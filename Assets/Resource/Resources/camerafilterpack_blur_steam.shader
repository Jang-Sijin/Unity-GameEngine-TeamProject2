Shader "CameraFilterPack/Blur_Steam" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Radius ("_Radius", Range(0, 1)) = 0.1
		_Quality ("_Quality", Range(0, 1)) = 0.75
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 38211
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _Quality;
					//   float _Radius;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Radius      c0       1
					//   _Quality     c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 0, 0.999999821, 0.5, 0
					    def c3, 6.28318548, -3.14159274, 0, 0
					    def c4, -1, 1, 0.00999999046, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c4
					    add r0.x, r0.x, c1.x
					    add r0.y, r0.y, -c1.x
					    cmp r0.x, -r0_abs.x, c4.z, r0.y
					    mov r1.zw, c4.w
					    mov r2, c4.w
					    mov r0.y, c4.w
					    rep i0
					      mov r0.z, -c4.x
					      break_ge r0.y, r0.z
					      mul r0.z, r0.y, c0.x
					      mov r3, r2
					      mov r0.w, c4.w
					      rep i0
					        mov r4.x, -c4.x
					        break_ge r0.w, r4.x
					        mad r4.x, r0.w, c2.y, c2.z
					        frc r4.x, r4.x
					        mad r4.x, r4.x, c3.x, c3.y
					        sincos r5.xy, r4.x
					        mad r1.xy, r5, r0.z, v0
					        texldl r4, r1, s0
					        add_pp r3, r3, r4
					        add r0.w, r0.x, r0.w
					      endrep
					      mov_pp r2, r3
					      add r0.y, r0.x, r0.y
					    endrep
					    mul r0.x, r0.x, r0.x
					    mul_pp oC0, r0.x, r2
					
					// approximately 48 instruction slots used (2 texture, 46 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _Radius;
						float _Quality;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat5;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					void main()
					{
					    u_xlatb0 = _Quality==1.0;
					    u_xlat5 = (-_Quality) + 1.0;
					    u_xlat0 = (u_xlatb0) ? 0.00999999046 : u_xlat5;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat5 = 0.0;
					    while(true){
					        u_xlatb10 = u_xlat5>=1.0;
					        if(u_xlatb10){break;}
					        u_xlat10 = u_xlat5 * _Radius;
					        u_xlat2 = u_xlat1;
					        u_xlat15 = 0.0;
					        while(true){
					            u_xlatb3 = u_xlat15>=1.0;
					            if(u_xlatb3){break;}
					            u_xlat3.x = u_xlat15 * 6.28318405;
					            u_xlat4.x = cos(u_xlat3.x);
					            u_xlat3.x = sin(u_xlat3.x);
					            u_xlat4.y = u_xlat3.x;
					            u_xlat3.xy = u_xlat4.xy * vec2(u_xlat10) + vs_TEXCOORD0.xy;
					            u_xlat3 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					            u_xlat2 = u_xlat2 + u_xlat3;
					            u_xlat15 = u_xlat0 + u_xlat15;
					        }
					        u_xlat1 = u_xlat2;
					        u_xlat5 = u_xlat0 + u_xlat5;
					    }
					    u_xlat0 = u_xlat0 * u_xlat0;
					    SV_Target0 = vec4(u_xlat0) * u_xlat1;
					    return;
					}"
				}
			}
		}
	}
}