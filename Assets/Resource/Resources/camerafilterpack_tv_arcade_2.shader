Shader "CameraFilterPack/TV_ARCADE_2" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 48780
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _TimeX            c0       1
					//   _Value            c1       1
					//   _Value2           c2       1
					//   _Value3           c3       1
					//   _ScreenResolution c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 2.20000005, 0.200000003, 1
					    def c6, 0.25, 0.920000017, 0.0399999991, 0.0409999974
					    def c7, 0.300000012, 0.699999988, 0.159154937, 0.5
					    def c8, 3.5, 21, 29, 31
					    def c9, 6.28318548, -3.14159274, 0.330000013, 0.300000012
					    def c10, 0.00170000002, 0.00100000005, 0.0500000007, -0.0500000007
					    def c11, 0, 0.100000001, -4, 1
					    def c12, 15.915494, 10, 0.5, -0.5
					    def c13, 0.0199999996, 0.00170000002, 0.0250000004, 0.75
					    def c14, 0.0799999982, 0.0500000007, 0.400000006, 0.600000024
					    def c15, 16, 2.66000009, 2.94000006, 1.5
					    def c16, 0.349999994, 1.70000005, 0.699999988, 0.400000006
					    def c17, 17.5070438, 0.5, 0.00999999978, 1
					    def c18, 0.920000017, -0.0149999997, 0.00100000005, 0.0409999974
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, c5.x, v0
					    mul r0.xy, r0, c5.y
					    mul r0.z, r0_abs.y, c5.z
					    mad r0.z, r0.z, r0.z, c5.w
					    mul r1.x, r0.z, r0.x
					    mul r0.x, r1_abs.x, c6.x
					    mad r0.x, r0.x, r0.x, c5.w
					    mul r1.y, r0.x, r0.y
					    mad r0.xy, r1, -c5.x, -c5.x
					    mad r1.yzw, r0.xxyy, c6.y, c6.xzzw
					    mul r0.zw, r1.z, c8.xyyz
					    mov r2.xy, c7
					    mad r0.zw, c0.x, r2.xyxy, r0
					    mad r0.zw, r0, c7.z, c7.w
					    frc r0.zw, r0
					    mad r0.zw, r0, c9.x, c9.y
					    sincos r2.y, r0.z
					    sincos r3.y, r0.w
					    mul r0.z, r2.y, r3.y
					    mov r2.zw, c9
					    mad r0.w, c0.x, r2.z, r2.w
					    mad r0.w, r1.z, c8.w, r0.w
					    mad r0.w, r0.w, c7.z, c7.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c9.x, c9.y
					    sincos r2.y, r0.w
					    mul r0.z, r0.z, r2.y
					    mad r0.w, r0.z, c13.y, c13.z
					    mad r0.z, r0.z, c10.x, r1.y
					    add r1.x, r0.z, c10.y
					    texld r2, r1.xwzw, s0
					    add r1.xyw, r2.xyzz, c10.z
					    mov r2.x, c0.x
					    mul r0.z, -r2.x, c2.x
					    frc r0.z, r0.z
					    mad r0.z, r1.z, c1.x, -r0.z
					    add r0.z, r0.z, c10.w
					    max r1.z, r0.z, c11.x
					    min r0.z, r1.z, c11.y
					    mad r2.yz, r0.z, c12.xxyw, c12.xzww
					    frc r0.z, r2.y
					    mul r1.z, r2.z, r2.z
					    mad r1.z, r1.z, c11.z, c11.w
					    mad r0.z, r0.z, c9.x, c9.y
					    sincos r3.y, r0.z
					    mul r0.z, r1.z, r3.y
					    mul r3.x, r0.z, c13.x
					    mul r2.y, r0.y, c6.y
					    mad r2.z, r0.x, c6.y, c6.z
					    mad r0.y, r0.y, c18.x, c18.y
					    mov r3.y, c6.z
					    add r2.yz, r2.xzyw, r3.xxyw
					    mad r0.x, r0.w, c13.w, r2.y
					    add r0.xy, r0, c18.zwzw
					    texld r0, r0, s0
					    mad r0.xyz, r0, c14.xyxw, r1.xyww
					    mul r1.xyz, r0, r0
					    mul r1.xyz, r1, c14.z
					    mad_sat r0.xyz, r0, c14.w, r1
					    mul r0.w, r2.y, r2.z
					    mul r0.w, r0.w, c15.x
					    add r1.xy, -r2.yzzw, c5.w
					    mul r0.w, r0.w, r1.x
					    mul r0.w, r1.y, r0.w
					    cmp r1.xy, r1, c11.x, c11.w
					    pow r1.z, r0.w, c7.x
					    mul r0.xyz, r0, r1.z
					    mul r0.xyz, r0, c15.yzyw
					    mul r0.w, r2.z, c4.y
					    cmp r1.zw, r2.xyyz, c11.x, c11.w
					    add r1.xy, r1, r1.zwzw
					    mul r1.z, r2.x, c8.x
					    mad r0.w, r0.w, c15.w, r1.z
					    mad r0.w, r0.w, c7.z, c7.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c9.x, c9.y
					    sincos r3.y, r0.w
					    mad r0.w, r3.y, c16.x, c16.x
					    pow r1.z, r0.w, c16.y
					    mul r0.w, r1.z, c3.x
					    mad r0.w, r0.w, c16.z, c16.w
					    mul r0.xyz, r0.w, r0
					    mad r0.w, r2.x, c17.x, c17.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c9.x, c9.y
					    sincos r2.y, r0.w
					    mad r0.w, r2.y, c17.z, c17.w
					    mul_pp r0.xyz, r0.w, r0
					    cmp_pp r0.xyz, -r1.x, r0, c11.x
					    cmp_pp oC0.xyz, -r1.y, r0, c11.x
					    mov_pp oC0.w, c5.w
					
					// approximately 137 instruction slots used (2 texture, 135 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						float _Value2;
						float _Value3;
						vec4 unused_0_5;
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat4;
					float u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					vec2 u_xlat8;
					bvec2 u_xlatb8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = _Value2 * (-_TimeX);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat4.xy = u_xlat4.xy * vec2(2.20000005, 2.20000005);
					    u_xlat12 = abs(u_xlat4.y) * 0.200000003;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.0;
					    u_xlat1.x = u_xlat12 * u_xlat4.x;
					    u_xlat4.x = abs(u_xlat1.x) * 0.25;
					    u_xlat4.x = u_xlat4.x * u_xlat4.x + 1.0;
					    u_xlat1.y = u_xlat4.x * u_xlat4.y;
					    u_xlat4.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat1.yzw = u_xlat4.xyy * vec3(0.920000017, 0.920000017, 0.920000017) + vec3(0.0399999991, 0.0399999991, 0.0409999974);
					    u_xlat0.x = u_xlat1.z * _Value + (-u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + -0.0500000007;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 0.100000001);
					    u_xlat12 = u_xlat0.x * 10.0 + -0.5;
					    u_xlat0.x = u_xlat0.x * 100.0;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * -4.0 + 1.0;
					    u_xlat0.x = u_xlat12 * u_xlat0.x;
					    u_xlat2.x = u_xlat0.x * 0.0199999996;
					    u_xlat7.x = u_xlat4.y * 0.920000017;
					    u_xlat7.y = u_xlat4.x * 0.920000017 + 0.0399999991;
					    u_xlat0.y = u_xlat4.y * 0.920000017 + -0.0149999997;
					    u_xlat2.y = 0.0399999991;
					    u_xlat8.xy = u_xlat2.xy + u_xlat7.yx;
					    u_xlat2.xy = u_xlat1.zz * vec2(21.0, 29.0);
					    u_xlat2.xy = vec2(_TimeX) * vec2(0.300000012, 0.699999988) + u_xlat2.xy;
					    u_xlat2.xy = sin(u_xlat2.xy);
					    u_xlat2.x = u_xlat2.y * u_xlat2.x;
					    u_xlat6 = _TimeX * 0.330000013 + 0.300000012;
					    u_xlat9 = u_xlat1.z * 31.0 + u_xlat6;
					    u_xlat9 = sin(u_xlat9);
					    u_xlat9 = u_xlat9 * u_xlat2.x;
					    u_xlat2.x = u_xlat9 * 0.00170000002 + 0.0250000004;
					    u_xlat5 = u_xlat9 * 0.00170000002 + u_xlat1.y;
					    u_xlat1.x = u_xlat5 + 0.00100000005;
					    u_xlat1 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.xyz = u_xlat1.xyz + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat0.x = u_xlat2.x * 0.75 + u_xlat8.x;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.00100000005, 0.0409999974);
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xyz = u_xlat2.xyz * vec3(0.0799999982, 0.0500000007, 0.0799999982) + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
					    u_xlat0.x = u_xlat8.x * u_xlat8.y;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat2.xy = (-u_xlat8.xy) + vec2(1.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat2.y * u_xlat0.x;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.300000012;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.66000009, 2.94000006, 2.66000009);
					    u_xlat0.x = u_xlat8.y * _ScreenResolution.y;
					    u_xlat4.x = _TimeX * 3.5;
					    u_xlat0.x = u_xlat0.x * 1.5 + u_xlat4.x;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.349999994 + 0.349999994;
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 1.70000005;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Value3;
					    u_xlat0.x = u_xlat0.x * 0.699999988 + 0.400000006;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = _TimeX * 110.0;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.00999999978 + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlatb0.xy = lessThan(u_xlat8.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlatb8.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat8.xyxy).xy;
					    {
					        bvec2 hlslcc_orTemp = u_xlatb0;
					        hlslcc_orTemp.x = u_xlatb8.x || u_xlatb0.x;
					        hlslcc_orTemp.y = u_xlatb8.y || u_xlatb0.y;
					        u_xlatb0 = hlslcc_orTemp;
					    }
					    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
					    SV_Target0.xyz = (u_xlatb0.x) ? vec3(0.0, 0.0, 0.0) : u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}