Shader "CameraFilterPack/Edge_Neon" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_EdgeWeight ("_EdgeWeight", Range(1, 10)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 3832
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _EdgeWeight;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _EdgeWeight  c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 100, -1, 0, 2
					    def c2, 1, -1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c1.x
					    mul r0.x, r0.x, c0.x
					    rcp r0.x, r0.x
					    mov r0.y, -r0.x
					    add r1, r0.yxxx, v0.xyxy
					    texld_pp r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add r3.xy, -r0.x, v0
					    texld r3, r3, s0
					    add_pp r4, r2, -r3
					    mul r0.zw, r0.x, c1.xyyz
					    add r5, r0.zwwx, v0.xyxy
					    texld r6, r5.zwzw, s0
					    texld r5, r5, s0
					    mad_pp r2, r5, c1.w, r2
					    add_pp r2, r3, r2
					    add_pp r2, -r1, r2
					    mad_pp r3, r6, c1.w, r4
					    mad r4.xy, r0.wxzw, c2, v0
					    add r0, r0.xwxz, v0.xyxy
					    texld r4, r4, s0
					    mad_pp r3, r4, -c1.w, r3
					    add_pp r1, r1, r3
					    texld r3, r0.zwzw, s0
					    texld r0, r0, s0
					    mad_pp r0, r0, -c1.w, r2
					    add_pp r0, -r3, r0
					    add_pp r1, r1, -r3
					    mul_pp r1, r1, r1
					    mad_pp r0, r0, r0, r1
					    rsq_pp r0.x, r0.x
					    rcp_pp oC0.x, r0.x
					    rsq_pp r0.x, r0.y
					    rcp_pp oC0.y, r0.x
					    rsq_pp r0.x, r0.z
					    rsq_pp r0.y, r0.w
					    rcp_pp oC0.w, r0.y
					    rcp_pp oC0.z, r0.x
					
					// approximately 38 instruction slots used (8 texture, 30 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _EdgeWeight;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					void main()
					{
					    u_xlat0.x = _EdgeWeight * 100.0;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat1.xy = (-u_xlat0.xx) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat0.yz = (-u_xlat0.xx);
					    u_xlat2 = u_xlat0.yxxx + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4 = (-u_xlat1) + u_xlat3;
					    u_xlat0.w = 0.0;
					    u_xlat5 = u_xlat0.zwwx + vs_TEXCOORD0.xyxy;
					    u_xlat6 = u_xlat0.xwxz + vs_TEXCOORD0.xyxy;
					    u_xlat0.xy = u_xlat0.wx * vec2(1.0, -1.0) + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat7 = texture(_MainTex, u_xlat5.zw);
					    u_xlat5 = texture(_MainTex, u_xlat5.xy);
					    u_xlat3 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + u_xlat3;
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat1 = (-u_xlat2) + u_xlat1;
					    u_xlat3 = u_xlat7 * vec4(2.0, 2.0, 2.0, 2.0) + u_xlat4;
					    u_xlat0 = (-u_xlat0) * vec4(2.0, 2.0, 2.0, 2.0) + u_xlat3;
					    u_xlat0 = u_xlat2 + u_xlat0;
					    u_xlat2 = texture(_MainTex, u_xlat6.zw);
					    u_xlat3 = texture(_MainTex, u_xlat6.xy);
					    u_xlat1 = (-u_xlat3) * vec4(2.0, 2.0, 2.0, 2.0) + u_xlat1;
					    u_xlat1 = (-u_xlat2) + u_xlat1;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat0 = u_xlat1 * u_xlat1 + u_xlat0;
					    SV_Target0 = sqrt(u_xlat0);
					    return;
					}"
				}
			}
		}
	}
}