Shader "CameraFilterPack/Drawing_NewCellShading" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Threshold ("_Threshold", Range(0, 1)) = 0
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 59618
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _Threshold;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Threshold        c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, -1, 1, 0, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c0, v0
					    mov r1.xyz, c2
					    mad r2, v0.xyyx, c0.xyyx, r1.xxyy
					    rcp r3.x, c0.x
					    rcp r3.y, c0.y
					    mul r4.xy, r2, r3
					    mov r4.zw, c2.z
					    texldl r4, r4, s0
					    mad r0.zw, v0.x, c0.x, r1.xyxy
					    mul r5.xy, r0.zyzw, r3
					    mov r5.zw, c2.z
					    texldl r5, r5, s0
					    mad r0.z, r5.x, -c2.w, -r4.x
					    mul r5.xy, r2.xzzw, r3
					    mov r5.zw, c2.z
					    texldl r5, r5, s0
					    add r0.z, r0.z, -r5.x
					    mul r6.xy, r2.wyzw, r3
					    mov r6.zw, c2.z
					    texldl r6, r6, s0
					    add r0.z, r0.z, r6.x
					    mul r7.xy, r0.wyzw, r3
					    mov r7.zw, c2.z
					    texldl r7, r7, s0
					    mad r0.z, r7.x, c2.w, r0.z
					    mul r2.xy, r2.wzzw, r3
					    mov r2.zw, c2.z
					    texldl r2, r2, s0
					    add r7.x, r0.z, r2.x
					    mad r1, v0.xyxy, c0.xyxy, r1.zxzy
					    mul r8.xy, r3, r1
					    mov r8.zw, c2.z
					    texldl r8, r8, s0
					    mad r0.z, r8.x, c2.w, r4.x
					    add r0.z, r6.x, r0.z
					    add r0.z, -r5.x, r0.z
					    mul r1.xy, r3, r1.zwzw
					    mov r1.zw, c2.z
					    texldl r1, r1, s0
					    mad r0.z, r1.x, -c2.w, r0.z
					    add r7.y, -r2.x, r0.z
					    dp2add r0.z, r7, r7, c2.z
					    rsq r0.z, r0.z
					    rcp r0.z, r0.z
					    if_lt c1.x, r0.z
					      mov_pp oC0, c2.z
					    else
					      mul r0.xy, r0, r3
					      mov r0.zw, c2.z
					      texldl_pp oC0, r0, s0
					    endif
					
					// approximately 63 instruction slots used (18 texture, 45 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Threshold;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat1 = vs_TEXCOORD0.xyyx * _ScreenResolution.xyyx + vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat2 = u_xlat1.xyxz / _ScreenResolution.xyxy;
					    u_xlat3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat0.zw = vs_TEXCOORD0.xx * _ScreenResolution.xx + vec2(-1.0, 1.0);
					    u_xlat4 = u_xlat0.zywy / _ScreenResolution.xyxy;
					    u_xlat5 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat16 = (-u_xlat5.x) * 2.0 + (-u_xlat3.x);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16 = u_xlat16 + (-u_xlat2.x);
					    u_xlat1 = u_xlat1.wywz / _ScreenResolution.xyxy;
					    u_xlat5 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat16 = u_xlat16 + u_xlat5.x;
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat16 = u_xlat4.x * 2.0 + u_xlat16;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat4.x = u_xlat16 + u_xlat1.x;
					    u_xlat6 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(0.0, -1.0, 0.0, 1.0);
					    u_xlat6 = u_xlat6 / _ScreenResolution.xyxy;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat16 = u_xlat7.x * 2.0 + u_xlat3.x;
					    u_xlat16 = u_xlat5.x + u_xlat16;
					    u_xlat16 = (-u_xlat2.x) + u_xlat16;
					    u_xlat2 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat16 = (-u_xlat2.x) * 2.0 + u_xlat16;
					    u_xlat4.y = (-u_xlat1.x) + u_xlat16;
					    u_xlat16 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat16 = sqrt(u_xlat16);
					    u_xlatb16 = _Threshold<u_xlat16;
					    if(u_xlatb16){
					        SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    } else {
					        u_xlat0.xy = u_xlat0.xy / _ScreenResolution.xy;
					        SV_Target0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    }
					    return;
					}"
				}
			}
		}
	}
}