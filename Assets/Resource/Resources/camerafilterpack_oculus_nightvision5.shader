Shader "CameraFilterPack/Oculus_NightVision5" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 22511
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blue_B;
					//   float _Blue_C;
					//   float _Blue_G;
					//   float _Blue_R;
					//   float _Dist;
					//   float _FadeFX;
					//   float _Green_B;
					//   float _Green_C;
					//   float _Green_G;
					//   float _Green_R;
					//   sampler2D _MainTex;
					//   float _Red_B;
					//   float _Red_C;
					//   float _Red_G;
					//   float _Red_R;
					//   float _Size;
					//   float _Smooth;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Red_R       c1       1
					//   _Red_G       c2       1
					//   _Red_B       c3       1
					//   _Green_R     c4       1
					//   _Green_G     c5       1
					//   _Green_B     c6       1
					//   _Blue_R      c7       1
					//   _Blue_G      c8       1
					//   _Blue_B      c9       1
					//   _Red_C       c10      1
					//   _Green_C     c11      1
					//   _Blue_C      c12      1
					//   _FadeFX      c13      1
					//   _Size        c14      1
					//   _Dist        c15      1
					//   _Smooth      c16      1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c17, 0.159154937, 0.0366056375, 0.5, 0.125
					    def c18, 0.25, 10, 6.28318548, -3.14159274
					    def c19, 8, 16, -0.400000006, -0.600000024
					    def c20, 4.99999952, 1, 30, 12
					    def c21, 0.0769230798, 6, 1.5, 250
					    def c22, 0.100000001, 0.899999976, 17.5070438, 0.5
					    def c23, 0.00999999978, 0.790000021, 1.38888884, 1
					    def c24, 0.5, 1, 3, 2
					    def c25, 1, 0, 0.694000006, 0.5
					    def c26, -2, 3, 0, 0
					    def c27, 1, -1, 0, -0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xyz, c17
					    mad r0.xy, c0.x, r0, r0.z
					    frc r0.xy, r0
					    mad r0.xy, r0, c18.z, c18.w
					    sincos r1.y, r0.y
					    sincos r2.x, r0.x
					    mul r0.y, r2.x, c0.x
					    add r0.z, r1.y, c0.x
					    mad r0.z, r0.z, c17.x, c17.z
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c18.z, c18.w
					    sincos r1.y, r0.z
					    mov r2.xy, c18
					    mul r0.zw, r2.xyxy, c0.x
					    mad r0.z, v0.y, c24.w, r0.z
					    mad r0.w, v0.y, c21.w, r0.w
					    mad r0.w, r0.w, c17.x, c17.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c18.z, c18.w
					    sincos r2.y, r0.w
					    mad r0.w, r2.y, c22.x, c22.y
					    add r0.z, r1.y, r0.z
					    frc r1.x, r0.z
					    add r1.x, r0.z, -r1.x
					    add r0.z, r0.z, -r1.x
					    add r1.xy, r0.z, c19.zwzw
					    cmp r1.yz, r1.xxyw, c27.xxyw, c27.xzww
					    add r0.z, r1.z, r1.y
					    mul r1.x, r0.z, r1.x
					    mad r1.x, r1.x, -c20.x, c20.y
					    mul r0.z, r0.z, r1.x
					    mad r1.xy, v0, c24, c24.yzzw
					    mov r0.x, c0.x
					    mad r0.xy, r0, c19, r1
					    texld r1, r0, s0
					    mul r0.x, r1.x, r1.x
					    mul r0.x, r0.x, r0.z
					    mov r1.x, c16.x
					    add r2.y, -r1.x, c2.x
					    mov r2.x, c1.x
					    mov r2.z, c3.x
					    texld r3, v0, s0
					    dp3 r0.y, r3, r2
					    add r2.x, r0.y, c10.x
					    add r4.y, -r1.x, c5.x
					    mov r4.x, c4.x
					    mov r4.z, c6.x
					    dp3 r0.y, r3, r4
					    add r2.y, r0.y, c11.x
					    add r1.y, -r1.x, c8.x
					    mov r1.x, c7.x
					    mov r1.z, c9.x
					    dp3 r0.y, r3, r1
					    add r2.z, r0.y, c12.x
					    mad r0.xyz, r0.x, c17.w, r2
					    mov r1.x, c0.x
					    mad r1.y, v0.y, c20.z, r1.x
					    frc r1.z, r1.y
					    add r1.z, -r1.z, r1.y
					    add r1.y, -r1.z, r1.y
					    add r1.y, r1.y, c20.w
					    mul r1.y, r1.y, c21.x
					    mul r0.xyz, r0, r1.y
					    mul r1.y, v0.x, v0.y
					    mul r1.y, r1.y, c21.y
					    mov r2.xyw, -v0.xyzy
					    add r1.zw, r2.xyxy, c21.z
					    mul r1.y, r1.z, r1.y
					    mad r1.y, r1.y, r1.w, c24.x
					    mul r0.xyz, r0, r1.y
					    mul r0.xyz, r0.w, r0
					    mad r0.w, r1.x, c22.z, c22.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c18.z, c18.w
					    sincos r1.y, r0.w
					    mad r0.w, r1.y, c23.x, c23.y
					    mul r0.xyz, r0.w, r0
					    mov r1.z, c23.z
					    mad r2.z, v0.x, -r1.z, -c15.x
					    add r1.xy, r2.zwzw, c25.zwzw
					    dp2add r0.w, r1, r1, c27.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r0.w, r0.w, -c14.x
					    rcp r1.x, -c16.x
					    mul_sat r0.w, r0.w, r1.x
					    mad r1.y, r0.w, c26.x, c26.y
					    mul r0.w, r0.w, r0.w
					    mad r0.w, r1.y, -r0.w, c24.y
					    mov r2, c25
					    mad r1.yz, c15.x, r2.xxyw, r2.xzww
					    mad r1.yz, v0.xxyw, -c23.xzww, r1
					    dp2add r1.y, r1.yzzw, r1.yzzw, c27.z
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r1.y, r1.y, -c14.x
					    mul_sat r1.x, r1.x, r1.y
					    mad r1.y, r1.x, c26.x, c26.y
					    mul r1.x, r1.x, r1.x
					    mad r1.x, r1.y, -r1.x, c24.y
					    mul r0.w, r0.w, r1.x
					    mad r0.xyz, r0.w, -r0, r0
					    add r0.xyz, -r3, r0
					    mad oC0.xyz, c13.x, r0, r3
					    mov oC0.w, c24.y
					
					// approximately 142 instruction slots used (2 texture, 140 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Red_R;
						float _Red_G;
						float _Red_B;
						float _Green_R;
						float _Green_G;
						float _Green_B;
						float _Blue_R;
						float _Blue_G;
						float _Blue_B;
						float _Red_C;
						float _Green_C;
						float _Blue_C;
						float _FadeFX;
						float _Size;
						float _Dist;
						float _Smooth;
						vec4 unused_0_18;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = vec3(_TimeX) * vec3(0.25, 0.230000004, 110.0);
					    u_xlat4.xy = sin(u_xlat0.yz);
					    u_xlat0.x = vs_TEXCOORD0.y * 2.0 + u_xlat0.x;
					    u_xlat4.x = u_xlat4.x + _TimeX;
					    u_xlat8 = u_xlat4.y * 0.00999999978 + 0.790000021;
					    u_xlat4.x = sin(u_xlat4.x);
					    u_xlat0.x = u_xlat4.x + u_xlat0.x;
					    u_xlat4.x = floor(u_xlat0.x);
					    u_xlat0.x = (-u_xlat4.x) + u_xlat0.x;
					    u_xlat4.x = u_xlat0.x + -0.400000006;
					    u_xlatb0.xw = greaterThanEqual(u_xlat0.xxxx, vec4(0.400000006, 0.0, 0.0, 0.600000024)).xw;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    u_xlat12 = (u_xlatb0.w) ? -1.0 : -0.0;
					    u_xlat0.x = u_xlat12 + u_xlat0.x;
					    u_xlat4.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = (-u_xlat4.x) * 4.99999952 + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = cos(_TimeX);
					    u_xlat1.y = u_xlat4.x * _TimeX;
					    u_xlat4.xz = vs_TEXCOORD0.xy * vec2(0.5, 1.0) + vec2(1.0, 3.0);
					    u_xlat1.x = _TimeX;
					    u_xlat4.xz = u_xlat1.xy * vec2(8.0, 16.0) + u_xlat4.xz;
					    u_xlat1 = texture(_MainTex, u_xlat4.xz);
					    u_xlat4.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat4.x * u_xlat0.x;
					    u_xlat1.y = _Blue_G + (-_Smooth);
					    u_xlat1.x = _Blue_R;
					    u_xlat1.z = _Blue_B;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.z = u_xlat4.x + _Blue_C;
					    u_xlat3.y = _Red_G + (-_Smooth);
					    u_xlat3.xz = vec2(_Red_R, _Red_B);
					    u_xlat4.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.x = u_xlat4.x + _Red_C;
					    u_xlat3.y = _Green_G + (-_Smooth);
					    u_xlat3.xz = vec2(_Green_R, _Green_B);
					    u_xlat4.x = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat1.y = u_xlat4.x + _Green_C;
					    u_xlat0.xyw = u_xlat0.xxx * vec3(0.125, 0.125, 0.125) + u_xlat1.xyz;
					    u_xlat1.x = vs_TEXCOORD0.y * 30.0 + _TimeX;
					    u_xlat5.x = floor(u_xlat1.x);
					    u_xlat1.x = (-u_xlat5.x) + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + 12.0;
					    u_xlat1.x = u_xlat1.x * 0.0769230798;
					    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
					    u_xlat1.x = vs_TEXCOORD0.x * 6.0;
					    u_xlat1.x = u_xlat1.x * vs_TEXCOORD0.y;
					    u_xlat3.xyw = (-vs_TEXCOORD0.xyy);
					    u_xlat5.xy = u_xlat3.xy + vec2(1.5, 1.5);
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat5.y + 0.5;
					    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
					    u_xlat1.x = vs_TEXCOORD0.y * 250.0;
					    u_xlat1.x = _TimeX * 10.0 + u_xlat1.x;
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 0.100000001 + 0.899999976;
					    u_xlat0.xyw = u_xlat0.xyw * u_xlat1.xxx;
					    u_xlat0.xyz = vec3(u_xlat8) * u_xlat0.xyw;
					    u_xlat3.z = (-vs_TEXCOORD0.x) * 1.38888884 + (-_Dist);
					    u_xlat1.xy = u_xlat3.zw + vec2(0.694000006, 0.5);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = u_xlat12 + (-_Size);
					    u_xlat1.x = float(1.0) / (-_Smooth);
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat5.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = (-u_xlat5.x) * u_xlat12 + 1.0;
					    u_xlat3.x = _Dist + 0.694000006;
					    u_xlat3.y = 0.5;
					    u_xlat5.xy = (-vs_TEXCOORD0.xy) * vec2(1.38888884, 1.0) + u_xlat3.xy;
					    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat5.x + (-_Size);
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat5.x) * u_xlat1.x + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat12) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(vec3(_FadeFX, _FadeFX, _FadeFX)) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}