Shader "CameraFilterPack/TV_Rgb" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(1, 10)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 25142
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c1, 0.166666672, 6, 0, 1
					    def c2, -0.833333313, -0.333333343, -0.666666687, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xyz, c0.yxxw, v0.yxxw
					    mul r1.xyz, r0.xzzw, c1.x
					    frc r2.xy, r1.zxzw
					    add r2.xy, r1.zxzw, -r2
					    frc r1.xyz, r1_abs
					    cmp r0.xyz, r0, r1, -r1.xzzw
					    add r0.xyz, r0, c2
					    mul r1.xy, r2, c1.y
					    rcp r2.x, c0.x
					    rcp r2.y, c0.y
					    mul r1.xy, r1, r2
					    texld r1, r1, s0
					    mul r2.xy, r1.z, c1.zwzw
					    mul r1.yw, r1.xyzz, c1.xwzz
					    mul r3.xyz, r1.xzzw, c1.wzzw
					    cmp r1.yz, r0.z, r2.xxyw, r1.xyww
					    mov r1.x, c1.z
					    cmp r0.yzw, r0.y, r1.xxyz, r3.xxyz
					    cmp oC0.xyz, r0.x, c1.z, r0.yzww
					    mov oC0.w, c1.w
					
					// approximately 20 instruction slots used (1 texture, 19 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat5.y = 0.0;
					    u_xlat6.x = 0.0;
					    u_xlat2.xyz = vs_TEXCOORD0.yxx * _ScreenResolution.yxx;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.166666672, 0.166666672, 0.166666672);
					    u_xlatb3.xyz = greaterThanEqual(u_xlat2.xyzx, (-u_xlat2.xzzx)).xyz;
					    u_xlat4.xyz = fract(abs(u_xlat2.xzz));
					    u_xlat0.xw = floor(u_xlat2.zx);
					    u_xlat0.xw = u_xlat0.xw * vec2(6.0, 6.0);
					    u_xlat0.xw = u_xlat0.xw / _ScreenResolution.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xw);
					    u_xlat3.x = (u_xlatb3.x) ? u_xlat4.x : (-u_xlat4.x);
					    u_xlat3.y = (u_xlatb3.y) ? u_xlat4.y : (-u_xlat4.z);
					    u_xlat3.z = (u_xlatb3.z) ? u_xlat4.z : (-u_xlat4.z);
					    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.833333313, 0.333333343, 0.666666687, 0.0)).xyz;
					    u_xlat5.x = u_xlat2.y;
					    u_xlat6.y = u_xlat2.z;
					    u_xlat0.yz = (u_xlatb3.z) ? u_xlat5.xy : u_xlat6.xy;
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat0.x = 0.0;
					    u_xlat0.xyz = (u_xlatb3.y) ? u_xlat2.xyz : u_xlat0.xyz;
					    SV_Target0.xyz = u_xlatb3.x ? u_xlat0.xyz : vec3(0.0, 0.0, 0.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}