Shader "CameraFilterPack/Blend2Camera_GreenScreen" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_MainTex2 ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 51404
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MainTex2;
					//   float2 _MainTex_TexelSize;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//   float _Value4;
					//   float _Value5;
					//   float _Value6;
					//   float _Value7;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _Value             c0       1
					//   _Value2            c1       1
					//   _Value3            c2       1
					//   _Value4            c3       1
					//   _Value5            c4       1
					//   _Value6            c5       1
					//   _Value7            c6       1
					//   _MainTex_TexelSize c7       1
					//   _MainTex           s0       1
					//   _MainTex2          s1       1
					//
					
					    ps_3_0
					    def c8, 1, 3, 0.800000012, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.x, c8.x, -v0.y
					    cmp r0.y, c7.y, v0.y, r0.x
					    mov r0.x, v0.x
					    texld r0, r0, s1
					    add r0.w, r0.y, -c1.x
					    max r1.x, r0.x, r0.z
					    mul r1.y, r1.x, c8.z
					    add r1.x, r0.y, -r1.x
					    add r1.x, r1.x, -c2.x
					    mul_sat r1.x, r1.x, c8.y
					    min r2.y, r1.y, r0.w
					    add r0.y, r0.y, -r2.y
					    mov r2.xz, r0
					    add r0.x, r0.y, -c3.x
					    add r0.xyz, r0.x, r2
					    add r2.x, r0.x, c4.x
					    add r2.z, r0.z, c5.x
					    add r2.y, r0.y, c6.x
					    texld r0, v0, s0
					    lrp r3.xyz, r1.x, r0, r2
					    add r1.xyz, -r0, r3
					    mad oC0.xyz, c0.x, r1, r0
					    mov oC0.w, c8.x
					
					// approximately 23 instruction slots used (2 texture, 21 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Value;
						float _Value2;
						float _Value3;
						float _Value4;
						float _Value5;
						float _Value6;
						float _Value7;
						vec4 unused_0_8;
						vec2 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MainTex2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat3 = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat3 : vs_TEXCOORD0.y;
					    u_xlat0.x = vs_TEXCOORD0.x;
					    u_xlat0 = texture(_MainTex2, u_xlat0.xy);
					    u_xlat9 = u_xlat0.y + (-_Value2);
					    u_xlat1 = max(u_xlat0.z, u_xlat0.x);
					    u_xlat4.x = u_xlat1 * 0.800000012;
					    u_xlat1 = u_xlat0.y + (-u_xlat1);
					    u_xlat1 = u_xlat1 + (-_Value3);
					    u_xlat1 = u_xlat1 * 3.0;
					    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
					    u_xlat2.y = min(u_xlat9, u_xlat4.x);
					    u_xlat3 = u_xlat0.y + (-u_xlat2.y);
					    u_xlat2.xz = u_xlat0.xz;
					    u_xlat0.x = u_xlat3 + (-_Value4);
					    u_xlat0.xyz = u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + vec3(_Value5, _Value7, _Value6);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = vec3(u_xlat1) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(vec3(_Value, _Value, _Value)) * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}