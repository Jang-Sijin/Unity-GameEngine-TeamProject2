Shader "CameraFilterPack/TV_ARCADE" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 37279
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _TimeX            c0       1
					//   _ScreenResolution c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, -0.5, 2.20000005, 0.200000003, 1
					    def c3, 0.25, 0.920000017, 0.0399999991, 0.0409999974
					    def c4, 0.300000012, 0.699999988, 0.159154937, 0.5
					    def c5, 3.5, 21, 29, 31
					    def c6, 6.28318548, -3.14159274, 0.330000013, 0.300000012
					    def c7, 0.00170000002, 0.00100000005, 0.0500000007, 0.0250000004
					    def c8, 0.0799999982, 0.0500000007, 0.600000024, 16
					    def c9, 0.75, 0.0409999974, -0.0149999997, 0.400000006
					    def c10, 2.66000009, 2.94000006, 1.5, 0.349999994
					    def c11, 17.5070438, 0.5, 0.00999999978, 1
					    def c12, 1.70000005, 0.699999988, 0.400000006, 0
					    def c13, 0, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, c2.x, v0
					    mul r0.xy, r0, c2.y
					    mul r0.z, r0_abs.y, c2.z
					    mad r0.z, r0.z, r0.z, c2.w
					    mul r1.y, r0.z, r0.x
					    mul r0.x, r1_abs.y, c3.x
					    mad r0.x, r0.x, r0.x, c2.w
					    mul r1.zw, r0.x, r0.y
					    mad r0.xyz, r1.yzww, -c2.x, -c2.x
					    mul r0.w, r0.x, c3.y
					    mad r1.yzw, r0.xzxy, c3.y, c3.xwzz
					    mul r0.xy, r1.w, c5.yzzw
					    mov r2.xy, c4
					    mad r0.xy, c0.x, r2, r0
					    mad r0.xy, r0, c4.z, c4.w
					    frc r0.xy, r0
					    mad r0.xy, r0, c6.x, c6.y
					    sincos r2.y, r0.x
					    sincos r3.y, r0.y
					    mul r0.x, r2.y, r3.y
					    mov r2.zw, c6
					    mad r0.y, c0.x, r2.z, r2.w
					    mad r0.y, r1.w, c5.w, r0.y
					    mad r0.y, r0.y, c4.z, c4.w
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c6.x, c6.y
					    sincos r2.y, r0.y
					    mul r0.x, r0.x, r2.y
					    mad r0.y, r0.x, c7.x, c7.w
					    mad r0.x, r0.x, c7.x, r1.z
					    add r1.x, r0.x, c7.y
					    texld r2, r1, s0
					    add r2.xyz, r2, c7.z
					    mad r1.x, r0.y, c9.x, r0.w
					    add r0.xy, r1, c9.yzzw
					    texld r0, r0, s0
					    mad r0.xyz, r0, c8.xyxw, r2
					    mul r2.xyz, r0, r0
					    mul r2.xyz, r2, c9.w
					    mad_sat r0.xyz, r0, c8.z, r2
					    mul r0.w, r1.z, r1.w
					    mul r0.w, r0.w, c8.w
					    add r1.xy, -r1.zwzw, c2.w
					    mul r0.w, r0.w, r1.x
					    mul r0.w, r1.y, r0.w
					    pow r2.x, r0.w, c4.x
					    mul r0.xyz, r0, r2.x
					    mul r0.xyz, r0, c10.xyxw
					    mul r0.w, r1.w, c1.y
					    cmp r1, r1, c13.x, c13.y
					    add r1.xy, r1, r1.zwzw
					    mov r2.x, c0.x
					    mul r1.z, r2.x, c5.x
					    mad r0.w, r0.w, c10.z, r1.z
					    mad r0.w, r0.w, c4.z, c4.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c6.x, c6.y
					    sincos r3.y, r0.w
					    mad r0.w, r3.y, c10.w, c10.w
					    pow r1.z, r0.w, c12.x
					    mad r0.w, r1.z, c12.y, c12.z
					    mul r0.xyz, r0.w, r0
					    mad r0.w, r2.x, c11.x, c11.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c6.x, c6.y
					    sincos r2.y, r0.w
					    mad r0.w, r2.y, c11.z, c11.w
					    mul_pp r0.xyz, r0.w, r0
					    cmp_pp r0.xyz, -r1.x, r0, c12.w
					    cmp_pp oC0.xyz, -r1.y, r0, c12.w
					    mov_pp oC0.w, c2.w
					
					// approximately 110 instruction slots used (2 texture, 108 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec2 u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					float u_xlat6;
					bvec2 u_xlatb7;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.20000005, 2.20000005);
					    u_xlat6 = abs(u_xlat0.y) * 0.200000003;
					    u_xlat6 = u_xlat6 * u_xlat6 + 1.0;
					    u_xlat4.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = abs(u_xlat4.x) * 0.25;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.0;
					    u_xlat4.yz = u_xlat0.xx * u_xlat0.yy;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat9 = u_xlat0.x * 0.920000017;
					    u_xlat1.yzw = u_xlat0.zxy * vec3(0.920000017, 0.920000017, 0.920000017) + vec3(0.0409999974, 0.0399999991, 0.0399999991);
					    u_xlat0.xy = u_xlat1.ww * vec2(21.0, 29.0);
					    u_xlat0.xy = vec2(_TimeX) * vec2(0.300000012, 0.699999988) + u_xlat0.xy;
					    u_xlat0.xy = sin(u_xlat0.xy);
					    u_xlat0.x = u_xlat0.y * u_xlat0.x;
					    u_xlat3 = _TimeX * 0.330000013 + 0.300000012;
					    u_xlat3 = u_xlat1.w * 31.0 + u_xlat3;
					    u_xlat3 = sin(u_xlat3);
					    u_xlat0.x = u_xlat3 * u_xlat0.x;
					    u_xlat3 = u_xlat0.x * 0.00170000002 + 0.0250000004;
					    u_xlat0.x = u_xlat0.x * 0.00170000002 + u_xlat1.z;
					    u_xlat1.x = u_xlat0.x + 0.00100000005;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2.xyz = u_xlat2.xyz + vec3(0.0500000007, 0.0500000007, 0.0500000007);
					    u_xlat1.x = u_xlat3 * 0.75 + u_xlat9;
					    u_xlat0.xy = u_xlat1.xy + vec2(0.0409999974, -0.0149999997);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0799999982, 0.0500000007, 0.0799999982) + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.400000006, 0.400000006, 0.400000006);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.600000024, 0.600000024, 0.600000024) + u_xlat2.xyz;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat9 = u_xlat1.z * u_xlat1.w;
					    u_xlat9 = u_xlat9 * 16.0;
					    u_xlat1.xy = (-u_xlat1.zw) + vec2(1.0, 1.0);
					    u_xlat9 = u_xlat9 * u_xlat1.x;
					    u_xlat9 = u_xlat1.y * u_xlat9;
					    u_xlat9 = log2(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.300000012;
					    u_xlat9 = exp2(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = u_xlat1.w * _ScreenResolution.y;
					    u_xlat1.x = _TimeX * 3.5;
					    u_xlat9 = u_xlat9 * 1.5 + u_xlat1.x;
					    u_xlat9 = sin(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.349999994 + 0.349999994;
					    u_xlat0.w = log2(u_xlat9);
					    u_xlat0 = u_xlat0 * vec4(2.66000009, 2.94000006, 2.66000009, 1.70000005);
					    u_xlat9 = exp2(u_xlat0.w);
					    u_xlat9 = u_xlat9 * 0.699999988 + 0.400000006;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = _TimeX * 110.0;
					    u_xlat9 = sin(u_xlat9);
					    u_xlat9 = u_xlat9 * 0.00999999978 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlatb1.xy = lessThan(u_xlat1.zwzz, vec4(0.0, 0.0, 0.0, 0.0)).xy;
					    u_xlatb7.xy = lessThan(vec4(1.0, 1.0, 1.0, 1.0), u_xlat1.zwzw).xy;
					    {
					        bvec2 hlslcc_orTemp = u_xlatb1;
					        hlslcc_orTemp.x = u_xlatb7.x || u_xlatb1.x;
					        hlslcc_orTemp.y = u_xlatb7.y || u_xlatb1.y;
					        u_xlatb1 = hlslcc_orTemp;
					    }
					    u_xlatb9 = u_xlatb1.y || u_xlatb1.x;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}