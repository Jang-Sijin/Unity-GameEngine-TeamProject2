Shader "CameraFilterPack/TV_Video3D" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 14033
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 500, 0.00200000009, 0, 0
					    def c1, 0.75, 0.375, 0.400000006, 0.200000003
					    def c2, 1, 0.00300000003, 0.00800000038, -6.40000071e-005
					    def c3, 0, 0.00400000019, -0, -0.00400000019
					    def c4, 0.707106769, -0.707106769, 0, 0.800000012
					    def c5, 0.00160000008, 0.00200000009, -0.400000006, 0
					    defi i0, 80, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xyz, c0.x, v0.xyxw
					    frc r1.xyz, r0.zyzw
					    add r0.xyz, r0, -r1
					    mul r1.xy, r0, c0.y
					    mov r2.xyz, c0.w
					    mov r0.x, c0.w
					    rep i0
					      mad r0.w, r0.x, -c0.y, r1.y
					      add r1.w, r0.w, r0.w
					      add r3.xy, r1.xwzw, c1
					      mul r1.zw, r3.xyxy, c1.z
					      texld r4, r1.zwzw, s0
					      mul r3.z, r4.x, c1.w
					      mad r0.w, r4.x, c1.w, r0.w
					      mad r0.w, r0.y, c0.y, -r0.w
					      cmp r2.xyz, r0.w, r2, r3
					      add r0.x, r0.x, c2.x
					    endrep
					    mul r0.xw, r2.xyzy, c1.z
					    texld r1, r0.xwzw, s0
					    add r3, r2.xyxy, c3
					    mul r3, r3, c1.z
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mul r0.x, r3.x, c1.w
					    mad r0.x, r4.x, c1.w, -r0.x
					    max r3.y, c2.y, r0.x
					    add r4, r2.xyxy, c3.yxwz
					    mul r4, r4, c1.z
					    texld r5, r4, s0
					    texld r4, r4.zwzw, s0
					    mul r0.x, r4.x, c1.w
					    mad r0.x, r5.x, c1.w, -r0.x
					    max r3.x, c2.y, r0.x
					    mul r3.xy, r3, c2.z
					    mov r3.z, c2.w
					    dp3 r0.x, r3, r3
					    rsq r0.x, r0.x
					    mul r0.xw, r0.x, r3.xyzz
					    dp2add r0.x, r0.xwzw, c4, c4.z
					    max r1.w, c1.w, r0.x
					    mul r1.xyz, r1.w, r1
					    mul r0.x, r0.x, r0.x
					    mul r0.w, r0.x, r0.x
					    mad r0.x, r0.x, r0.w, c2.x
					    mul r1.xyz, r0.x, r1
					    mad r2.xy, r0.zyzw, c5, c5.zwzw
					    dp3 r0.x, r2, r2
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.x, r0.x, r0.x
					    lrp oC0.xyz, r0.x, c4.w, r1
					    mov oC0.w, c2.x
					
					// approximately 57 instruction slots used (6 texture, 51 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD0.xyx * vec3(500.0, 500.0, 500.0);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat1.xy = u_xlat0.xy * vec2(0.00200000009, 0.00200000009);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<80 ; u_xlati_loop_1++)
					    {
					        u_xlat18 = float(u_xlati_loop_1);
					        u_xlat18 = (-u_xlat18) * 0.00200000009 + u_xlat1.y;
					        u_xlat1.w = u_xlat18 + u_xlat18;
					        u_xlat3.xy = u_xlat1.xw + vec2(0.75, 0.375);
					        u_xlat13.xy = u_xlat3.xy * vec2(0.400000006, 0.400000006);
					        u_xlat4 = texture(_MainTex, u_xlat13.xy);
					        u_xlat3.z = u_xlat4.x * 0.200000003;
					        u_xlat18 = u_xlat4.x * 0.200000003 + u_xlat18;
					        u_xlatb18 = u_xlat1.y<u_xlat18;
					        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : u_xlat2.xyz;
					    }
					    u_xlat0.xw = u_xlat2.xy * vec2(0.400000006, 0.400000006);
					    u_xlat1 = texture(_MainTex, u_xlat0.xw);
					    u_xlat3 = u_xlat2.xyxy + vec4(0.0, 0.00400000019, -0.0, -0.00400000019);
					    u_xlat3 = u_xlat3 * vec4(0.400000006, 0.400000006, 0.400000006, 0.400000006);
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat0.x = u_xlat3.x * 0.200000003;
					    u_xlat0.x = u_xlat4.x * 0.200000003 + (-u_xlat0.x);
					    u_xlat3.y = max(u_xlat0.x, 0.00300000003);
					    u_xlat4 = u_xlat2.xyxy + vec4(0.00400000019, 0.0, -0.00400000019, -0.0);
					    u_xlat4 = u_xlat4 * vec4(0.400000006, 0.400000006, 0.400000006, 0.400000006);
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat0.x = u_xlat4.x * 0.200000003;
					    u_xlat0.x = u_xlat5.x * 0.200000003 + (-u_xlat0.x);
					    u_xlat3.x = max(u_xlat0.x, 0.00300000003);
					    u_xlat3.xy = u_xlat3.xy * vec2(0.00800000038, 0.00800000038);
					    u_xlat3.z = -6.40000071e-05;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xw = u_xlat0.xx * u_xlat3.xz;
					    u_xlat0.x = dot(u_xlat0.xw, vec2(0.707106769, -0.707106769));
					    u_xlat18 = max(u_xlat0.x, 0.200000003);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat18 = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat18 + 1.0;
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xy = u_xlat0.zy * vec2(0.00160000008, 0.00200000009) + vec2(-0.400000006, 0.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat6 = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * 0.800000012;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xxx;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}