Shader "CameraFilterPack/EXTRA_SHOWFPS" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 44768
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _Value;
					//   float _Value2;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Value       c0       1
					//   _Value2      c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 512, 0, 1, -1
					    def c3, -5, -4, -3, -2
					    def c4, 1000, 7, 0.100000001, 10
					    def c5, 690407552, 972980224, 45, 30
					    def c6, 30, 3, 0.5, 0
					    def c7, 972881536, 0, 696556160, 704642688
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c2.x, v0
					    rcp r0.z, c0.x
					    mul r0.xy, r0.z, r0
					    frc r0.z, r0.y
					    add r0.w, r0.y, -r0.z
					    cmp r0.z, -r0.z, c2.y, c2.z
					    cmp r0.y, r0.y, c2.y, r0.z
					    add r0.xy, r0, r0.xwzw
					    add r1, r0.y, c3
					    add r0.y, r0.y, c2.w
					    cmp r0.y, -r0_abs.y, c7.x, c7.y
					    cmp r0.y, -r1_abs.w, c7.z, r0.y
					    cmp r0.y, -r1_abs.z, c7.w, r0.y
					    cmp r0.y, -r1_abs.y, c5.x, r0.y
					    cmp r0.y, -r1_abs.x, c5.y, r0.y
					    mov r0.zw, c5
					    add r0.zw, r0, -c1.x
					    mov r1.yz, c2
					    mov r2.xyw, c2.y
					    mov r1.w, r0.x
					    mov r3.x, c4.x
					    rep i0
					      add r3.y, r1.w, c3.y
					      if_lt r1.w, c4.y
					        rcp r3.z, r3.x
					        mul r3.z, r3.z, c1.x
					        frc r3.w, r3.z
					        add r3.z, -r3.w, r3.z
					        mul r3.w, r3.z, c4.z
					        frc r4.x, r3.w
					        add r3.w, r3.w, -r4.x
					        mad r3.z, r3.w, -c4.w, r3.z
					        add r4.xy, -r3.y, c6
					        mad r3.z, r3.z, c3.z, r4.x
					        frc r3.w, -r3.y
					        add r3.z, -r3.w, r3.z
					        exp r3.z, r3.z
					        frc r3.w, r3.z
					        add r3.z, r3.z, -r3.w
					        cmp r3.w, r3.y, c2.y, c2.z
					        cmp r4.x, r4.y, c2.y, c2.z
					        add r3.w, r3.w, r4.x
					        cmp r3.w, -r3.w, r0.y, c2.y
					        rcp r3.z, r3.z
					        mul r3.z, r3.z, r3.w
					        frc r3.w, r3.z
					        add r4.x, r3.z, -r3.w
					        cmp r3.w, -r3.w, c2.y, c2.z
					        cmp r3.z, r3.z, c2.y, r3.w
					        add r3.z, r3.z, r4.x
					        mul r3.w, r3.z, c6.z
					        frc r4.x, r3.w
					        add r3.w, r3.w, -r4.x
					        cmp r4.x, -r4.x, c2.y, c2.z
					        cmp r4.x, r3.z, c2.y, r4.x
					        add r3.w, r3.w, r4.x
					        mad r1.x, r3.w, c3.w, r3.z
					        add_pp r4.xyz, r1.yxzw, r2.xyww
					        add_pp r5.xyz, r1.xxzw, r2.xyww
					        add_pp r6.xyz, r1, r2.xyww
					        cmp_pp r5.xyz, r0.w, r6, r5
					        cmp_pp r2.xyw, r0.z, r5.xyzz, r4.xyzz
					      endif
					      mul r3.x, r3.x, c4.z
					      mov r1.w, r3.y
					    endrep
					    texld_pp r0, v0, s0
					    mov r2.z, c2.y
					    add_pp oC0, r2, r0
					
					// approximately 74 instruction slots used (1 texture, 73 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Value;
						float _Value2;
						vec4 unused_0_3;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					float u_xlat3;
					vec3 u_xlat4;
					int u_xlati4;
					uint u_xlatu4;
					bool u_xlatb4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					int u_xlati7;
					uint u_xlatu7;
					bool u_xlatb7;
					int u_xlati10;
					uint u_xlatu11;
					bvec2 u_xlatb14;
					float u_xlat17;
					int u_xlati17;
					uint u_xlatu17;
					bool u_xlatb17;
					float u_xlat22;
					float u_xlat24;
					int u_xlati24;
					uint u_xlatu24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(512.0, 512.0);
					    u_xlat0.xy = u_xlat0.xy / vec2(vec2(_Value, _Value));
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlati7 = int(u_xlat0.y);
					    u_xlatb1 = equal(ivec4(u_xlati7), ivec4(5, 4, 3, 2));
					    u_xlatb7 = u_xlati7==1;
					    u_xlatu7 = u_xlatb7 ? 972881535u : uint(0);
					    u_xlatu7 = (u_xlatb1.w) ? 696556137u : u_xlatu7;
					    u_xlatu7 = (u_xlatb1.z) ? 704642687u : u_xlatu7;
					    u_xlatu7 = (u_xlatb1.y) ? 690407533u : u_xlatu7;
					    u_xlatu7 = (u_xlatb1.x) ? 972980223u : u_xlatu7;
					    u_xlatb14.xy = lessThan(vec4(45.0, 30.0, 45.0, 30.0), vec4(vec4(_Value2, _Value2, _Value2, _Value2))).xy;
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(1.0);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat22 = u_xlat0.x;
					    u_xlat3 = float(1000.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat22 = u_xlat22 + -4.0;
					        u_xlatb17 = u_xlat22<3.0;
					        if(u_xlatb17){
					            u_xlat17 = _Value2 / u_xlat3;
					            u_xlat17 = floor(u_xlat17);
					            u_xlat24 = u_xlat17 * 0.100000001;
					            u_xlat24 = floor(u_xlat24);
					            u_xlat17 = (-u_xlat24) * 10.0 + u_xlat17;
					            u_xlat24 = (-u_xlat22) + 30.0;
					            u_xlat17 = (-u_xlat17) * 3.0 + u_xlat24;
					            u_xlat17 = floor(u_xlat17);
					            u_xlat17 = exp2(u_xlat17);
					            u_xlati17 = int(u_xlat17);
					            u_xlatb24 = u_xlat22<0.0;
					            u_xlatb4 = 3.0<u_xlat22;
					            u_xlatb24 = u_xlatb24 || u_xlatb4;
					            u_xlatu24 = (u_xlatb24) ? 0u : u_xlatu7;
					            u_xlati4 = int(uint(u_xlati17) ^ u_xlatu24);
					            u_xlatu17 =  uint(max(u_xlati17, (-u_xlati17)));
					            //null = uintBitsToFloat(u_xlatu24 % u_xlatu17);
					            u_xlatu17 = u_xlatu24 / u_xlatu17;
					            u_xlatu24 =  uint(0 - int(u_xlatu17));
					            u_xlati4 = int(uint(u_xlati4) & 2147483648u);
					            u_xlatu17 = (u_xlati4 != 0) ? u_xlatu24 : u_xlatu17;
					            u_xlati24 = int(u_xlatu17 ^ 2u);
					            u_xlatu4 =  uint(max(int(u_xlatu17), (-int(u_xlatu17))));
					            u_xlatu4 = u_xlatu4 >> 1u;
					            u_xlatu11 =  uint(0 - int(u_xlatu4));
					            u_xlati24 = int(uint(u_xlati24) & 2147483648u);
					            u_xlatu24 = (u_xlati24 != 0) ? u_xlatu11 : u_xlatu4;
					            u_xlati17 = int(0xFFFFFFFEu) * int(u_xlatu24) + int(u_xlatu17);
					            u_xlat1.x = float(u_xlati17);
					            u_xlat4.xyz = u_xlat1.yxz + u_xlat2.xyw;
					            u_xlat5.xyz = u_xlat1.xxz + u_xlat2.xyw;
					            u_xlat6.xyz = u_xlat1.xyz + u_xlat2.xyw;
					            u_xlat5.xyz = (u_xlatb14.y) ? u_xlat5.xyz : u_xlat6.xyz;
					            u_xlat2.xyw = (u_xlatb14.x) ? u_xlat4.xyz : u_xlat5.xyz;
					        }
					        u_xlat3 = u_xlat3 * 0.100000001;
					    }
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.z = 0.0;
					    SV_Target0 = u_xlat2 + u_xlat0;
					    return;
					}"
				}
			}
		}
	}
}