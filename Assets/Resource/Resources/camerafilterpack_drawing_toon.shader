Shader "CameraFilterPack/Drawing_Toon" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_DotSize ("_DotSize", Range(0, 1)) = 0
		_ColorLevel ("_ColorLevel", Range(0, 10)) = 7
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 48979
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Distortion;
					//   float _DotSize;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Distortion  c0       1
					//   _DotSize     c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 2.5, 0.649999976, 5, 0.200000003
					    def c3, 0.112500004, 0.221249998, 0.0412499979, 0.25
					    def c4, 1.53846157, 0.001953125, 2, 0.0399999991
					    def c5, 0, -1, 12.8000002, 0.899999976
					    def c6, 0.949999988, 0.75, 0.5, 0.25
					    def c7, 0.899999976, 0.699999988, 0.5, 0.75
					    def c8, 0.212599993, 0.715200007, 0.0722000003, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.x, v0.x
					    mov r1.y, c4.y
					    mad r0.yzw, c1.x, r1.y, v0.xyxy
					    texld r2, r0, s0
					    texld r0, r0.zwzw, s0
					    dp4 r0.x, r0, c3
					    dp4 r0.y, r2, c3
					    mad r2.w, c1.x, r1.y, v0.y
					    mad r2.xz, c1.x, -r1.y, v0.x
					    texld r3, r2.zwzw, s0
					    dp4 r0.z, r3, c3
					    mad r0.y, r0.y, c4.z, r0.z
					    add r0.y, r0.x, r0.y
					    mad r3.xyw, c1.x, -r1.y, v0.xyzy
					    texld r4, r3, s0
					    dp4 r0.w, r4, c3
					    add r0.y, -r0.w, r0.y
					    mad r0.y, r0.w, -c4.z, r0.y
					    mad r3.z, c1.x, r1.y, v0.x
					    texld r1, r3.zwzw, s0
					    dp4 r1.x, r1, c3
					    add r0.y, r0.y, -r1.x
					    add r0.x, r0.x, r1.x
					    mul r0.y, r0.y, r0.y
					    mov r2.y, v0.y
					    texld r1, r2, s0
					    dp4 r1.x, r1, c3
					    mad r0.x, r1.x, c4.z, r0.x
					    add r0.x, -r0.w, r0.x
					    mad r0.x, r1.x, -c4.z, r0.x
					    add r0.x, -r0.z, r0.x
					    mad r0.x, r0.x, r0.x, r0.y
					    add r0.x, -r0.x, c4.w
					    cmp r0.x, r0.x, c5.x, c5.y
					    texld r1, v0, s0
					    dp4 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r0.yzw, r0.y, r1.xxyz
					    mul_pp r0.yzw, r0, c2.x
					    log r1.x, r0.y
					    log r1.y, r0.z
					    log r1.z, r0.w
					    mul r0.yzw, r1.xxyz, c2.y
					    exp r1.x, r0.y
					    exp r1.y, r0.z
					    exp r1.z, r0.w
					    mul r0.yzw, r1.xxyz, c2.z
					    frc r1.xyz, r0.yzww
					    add r0.yzw, r0, -r1.xxyz
					    mul r0.yzw, r0, c2.w
					    log r1.x, r0.y
					    log r1.y, r0.z
					    log r1.z, r0.w
					    mul r0.yzw, r1.xxyz, c4.x
					    exp r1.x, r0.y
					    exp r1.y, r0.z
					    exp r1.z, r0.w
					    mad_pp r0.xyz, r1, c0.x, r0.x
					    add r0.w, r0.z, r0.x
					    mad r0.w, r0.w, c5.z, -r0.y
					    cmp r0.xyz, r0.w, r0, c5.x
					    dp3 r0.x, r0, c8
					    mul r1, r0.x, c7
					    mul r0.yz, r0.x, c6.xwzw
					    add r2, -r0.x, c6
					    cmp_pp r0.yz, r2.w, r0, r1.xzww
					    cmp_pp r0.yz, r2.z, r0, r1.xyxw
					    mul r0.w, r0.x, c5.w
					    cmp_pp r0.yz, r2.y, r0, r0.xwxw
					    cmp_pp oC0.xy, r2.x, r0.yzzw, r0.x
					    mad_pp oC0.zw, r0.x, c5_abs.xyyx, c5_abs.xyxy
					
					// approximately 71 instruction slots used (7 texture, 64 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Distortion;
						vec4 unused_0_2;
						float _DotSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.x;
					    u_xlat0.yzw = vec3(_DotSize) * vec3(0.001953125, 0.001953125, 0.001953125) + vs_TEXCOORD0.yxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat0.x = dot(u_xlat0, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat4.x = dot(u_xlat1, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat1.w = _DotSize * 0.001953125 + vs_TEXCOORD0.y;
					    u_xlat1.xz = (-vec2(_DotSize)) * vec2(0.001953125, 0.001953125) + vs_TEXCOORD0.xx;
					    u_xlat2 = texture(_MainTex, u_xlat1.zw);
					    u_xlat8 = dot(u_xlat2, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat4.x = u_xlat4.x * 2.0 + u_xlat8;
					    u_xlat4.x = u_xlat0.x + u_xlat4.x;
					    u_xlat2.xyw = (-vec3(_DotSize)) * vec3(0.001953125, 0.001953125, 0.001953125) + vs_TEXCOORD0.xyy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat12 = dot(u_xlat3, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat4.x = (-u_xlat12) + u_xlat4.x;
					    u_xlat4.x = (-u_xlat12) * 2.0 + u_xlat4.x;
					    u_xlat2.z = _DotSize * 0.001953125 + vs_TEXCOORD0.x;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat9 = dot(u_xlat2, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat4.x = u_xlat4.x + (-u_xlat9);
					    u_xlat0.x = u_xlat0.x + u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat4.x;
					    u_xlat1.y = vs_TEXCOORD0.y;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = dot(u_xlat1, vec4(0.112500004, 0.221249998, 0.0412499979, 0.25));
					    u_xlat0.x = u_xlat1.x * 2.0 + u_xlat0.x;
					    u_xlat0.x = (-u_xlat12) + u_xlat0.x;
					    u_xlat0.x = (-u_xlat1.x) * 2.0 + u_xlat0.x;
					    u_xlat0.x = (-u_xlat8) + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0399999991<u_xlat0.x;
					    u_xlat0.x = u_xlatb0 ? -1.0 : float(0.0);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat4.x = dot(u_xlat1, u_xlat1);
					    u_xlat4.x = inversesqrt(u_xlat4.x);
					    u_xlat4.xyz = u_xlat4.xxx * u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(2.5, 2.5, 2.5);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.649999976, 0.649999976, 0.649999976);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat4.xyz = floor(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.200000003, 0.200000003, 0.200000003);
					    u_xlat4.xyz = log2(u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * vec3(1.53846157, 1.53846157, 1.53846157);
					    u_xlat4.xyz = exp2(u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat4.xyz * vec3(vec3(_Distortion, _Distortion, _Distortion)) + u_xlat0.xxx;
					    u_xlat12 = u_xlat0.z + u_xlat0.x;
					    u_xlat12 = u_xlat12 * 12.8000002;
					    u_xlatb12 = u_xlat12<u_xlat0.y;
					    u_xlat0.xyz = (bool(u_xlatb12)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1 = u_xlat0.xxxx * vec4(0.899999976, 0.699999988, 0.5, 0.75);
					    u_xlat0.yzw = u_xlat0.xxx * vec3(0.25, 0.5, 0.899999976);
					    u_xlatb2 = lessThan(vec4(0.949999988, 0.75, 0.5, 0.25), u_xlat0.xxxx);
					    u_xlat4.xy = (u_xlatb2.w) ? u_xlat1.zw : u_xlat0.yz;
					    u_xlat4.xy = (u_xlatb2.z) ? u_xlat1.yx : u_xlat4.xy;
					    u_xlat4.xy = (u_xlatb2.y) ? u_xlat0.wx : u_xlat4.xy;
					    SV_Target0.xy = (u_xlatb2.x) ? u_xlat0.xx : u_xlat4.xy;
					    SV_Target0.z = u_xlat0.x;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}