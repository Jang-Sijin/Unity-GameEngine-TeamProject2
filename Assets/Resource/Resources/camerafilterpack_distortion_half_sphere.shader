Shader "CameraFilterPack/Distortion_Half_Sphere" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_SphereSize ("_SphereSize", Range(1, 10)) = 1
		_SpherePositionX ("_SpherePositionX", Range(-1, 1)) = 0
		_SpherePositionY ("_SpherePositionY", Range(-1, 1)) = 0
		_Strength ("_Strength", Range(1, 10)) = 5
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 53622
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _SpherePositionX;
					//   float _SpherePositionY;
					//   float _SphereSize;
					//   float _Strength;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _SphereSize       c1       1
					//   _SpherePositionX  c2       1
					//   _SpherePositionY  c3       1
					//   _Strength         c4       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c5, -0.5, 1, 0.5, 0.100000001
					    def c6, 0.180141002, -0.330299497, 0.999866009, 3.1400001
					    def c7, 0, 1, -2, 1.57079637
					    def c8, 1.07500005, 0, 0.0208350997, -0.0851330012
					    def c9, 6.28318548, -3.14159274, -0.0187292993, 0.0742610022
					    def c10, -0.212114394, 1.57072878, -2, 3.14159274
					    def c11, 1.57000005, -1.57000005, 0.159154937, 0.5
					    def c12, 0, -0, 1, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    mul r0.y, r0.x, c0.y
					    add r1.xy, c5.x, v0
					    mov r0.xz, c5.y
					    mad r1.xy, r1, r0, c5.z
					    mov r1.zw, c5
					    mad r0.x, c2.x, r1.z, r1.z
					    mad r1.z, c3.x, -r1.z, r1.z
					    mul r2.x, r1.w, c1.x
					    mov r3.x, c8.x
					    mul r2.y, r3.x, c4.x
					    mov r3.x, -r0.x
					    mov r3.y, -r1.z
					    add r2.zw, r1.xyxy, r3.xyxy
					    dp2add r3.x, r2.zwzw, r2.zwzw, c8.y
					    rsq r3.x, r3.x
					    rcp r3.x, r3.x
					    rcp r3.y, r2.w
					    mul r3.y, r2.z, r3.y
					    mov_sat r3.z, r3_abs.y
					    add r3.w, r3_abs.y, -c5.y
					    rcp r4.x, r3_abs.y
					    cmp r3.w, r3.w, r4.x, c5.y
					    mul r3.z, r3.w, r3.z
					    mul r3.w, r3.z, r3.z
					    mad r4.x, r3.w, c8.z, c8.w
					    mad r4.x, r3.w, r4.x, c6.x
					    mad r4.x, r3.w, r4.x, c6.y
					    mad r3.w, r3.w, r4.x, c6.z
					    mul r3.z, r3.w, r3.z
					    add r3.w, -r3_abs.y, c5.y
					    cmp r3.w, r3.w, c7.x, c7.y
					    mad r4.x, r3.z, c7.z, c7.w
					    mad r3.z, r4.x, r3.w, r3.z
					    min r4.x, r3.y, c5.y
					    cmp r3.y, r4.x, c7.x, c7.y
					    add r3.w, r3.z, r3.z
					    mad r3.y, r3.y, -r3.w, r3.z
					    if_lt -r2.w, c8.y
					    else
					      cmp r3.z, r2.w, c7.x, c7.y
					      cmp r3.w, r2.z, r3.z, c8.y
					      if_ne r3.w, -r3.w
					        add r4.x, r3.y, c6.w
					        cmp r3.y, -r3.w, r3.y, r4.x
					      else
					        cmp r4.xy, r2.z, c12, c12.zwzw
					        mul r3.z, r3.z, r4.x
					        add r3.w, r3.y, -c6.w
					        cmp r4.x, -r2_abs.w, -c7.y, -c7.x
					        cmp r2.z, -r2.z, c8.y, r4.x
					        cmp r2.w, -r2_abs.w, r4.y, c8.y
					        cmp r2.w, r2.w, c11.x, c11.y
					        cmp r2.z, r2.z, r2.w, c11.x
					        cmp r3.y, -r3.z, r2.z, r3.w
					      endif
					    endif
					    rcp r2.z, r2.x
					    mad_sat r2.z, r3.x, -r2.z, c5.y
					    add r2.w, r2.z, -c5.y
					    mad r2.w, r2.w, -r2.w, c5.y
					    rsq r2.w, r2.w
					    rcp r3.z, r2.w
					    add r3.w, -r2.z, c5.y
					    mul r4.x, r2.w, r3.w
					    mov_sat r4.y, r4.x
					    lrp r4.z, r2.w, -r2.z, -c5.y
					    rcp r2.z, r4.x
					    cmp r2.z, r4.z, r2.z, c5.y
					    mul r2.z, r2.z, r4.y
					    mul r4.x, r2.z, r2.z
					    mad r4.y, r4.x, c8.z, c8.w
					    mad r4.y, r4.x, r4.y, c6.x
					    mad r4.y, r4.x, r4.y, c6.y
					    mad r4.x, r4.x, r4.y, c6.z
					    mul r4.y, r2.z, r4.x
					    mad r2.w, r3.w, -r2.w, c5.y
					    mad r4.y, r4.y, c7.z, c7.w
					    cmp r2.w, r2.w, c8.y, r4.y
					    mad r2.z, r2.z, r4.x, r2.w
					    cmp r2.z, -r3.z, c11.x, r2.z
					    mad r2.w, r2.z, c11.z, c11.w
					    frc r2.w, r2.w
					    mad r2.w, r2.w, c9.x, c9.y
					    sincos r4.y, r2.w
					    rcp r2.y, r2.y
					    mul r2.y, r2.y, r4.y
					    add r2.w, -r2_abs.y, c5.y
					    rsq r2.w, r2.w
					    rcp r2.w, r2.w
					    mad r4.x, r2_abs.y, c9.z, c9.w
					    mad r4.x, r4.x, r2_abs.y, c10.x
					    mad r4.x, r4.x, r2_abs.y, c10.y
					    mul r2.w, r2.w, r4.x
					    mad r4.x, r2.w, c10.z, c10.w
					    cmp r2.y, r2.y, c7.x, c7.y
					    mad r2.y, r4.x, r2.y, r2.w
					    add r2.y, -r2.y, c7.w
					    add r2.y, -r2.y, r2.z
					    mad r2.y, r2.y, c11.z, c11.w
					    frc r2.y, r2.y
					    mad r2.y, r2.y, c9.x, c9.y
					    sincos r4.xy, r2.y
					    mul r2.y, r3.z, r4.y
					    rcp r2.z, r4.x
					    mad r2.y, r2.y, -r2.z, r3.w
					    mad r2.z, r3.y, c11.z, c11.w
					    frc r2.z, r2.z
					    mad r2.z, r2.z, c9.x, c9.y
					    sincos r4.xy, r2.z
					    mul r2.yz, r2.y, r4.xyxw
					    mad r4.x, r2.y, r2.x, r0.x
					    mad r4.y, r2.z, r2.x, r1.z
					    mad r0.x, c1.x, -r1.w, r3.x
					    cmp r1.zw, r0.x, c7.xyxy, c7.xyyx
					    mul r2.xy, r1.z, r4
					    mad r1.xy, r1, r1.w, r2
					    add r1.xy, r1, c5.x
					    rcp r0.w, r0.y
					    mad r0.xy, r1, r0.zwzw, c5.z
					    texld oC0, r0, s0
					
					// approximately 147 instruction slots used (1 texture, 146 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _SphereSize;
						float _SpherePositionX;
						float _SpherePositionY;
						float _Strength;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat4;
					vec2 u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					bool u_xlatb7;
					float u_xlat8;
					bool u_xlatb8;
					vec2 u_xlat10;
					vec2 u_xlat11;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					float u_xlat17;
					bool u_xlatb17;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.y = _ScreenResolution.y / _ScreenResolution.x;
					    u_xlat10.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat0.x = 1.0;
					    u_xlat10.xy = u_xlat10.xy * u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat1.xy = vec2(_SphereSize, _Strength) * vec2(0.100000001, 1.07500005);
					    u_xlat11.x = _SpherePositionX * 0.5 + 0.5;
					    u_xlat11.y = (-_SpherePositionY) * 0.5 + 0.5;
					    u_xlat2.xy = (-u_xlat11.xy);
					    u_xlat2.xy = u_xlat10.xy + u_xlat2.xy;
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat17 = u_xlat2.x / u_xlat2.y;
					    u_xlat3.x = min(abs(u_xlat17), 1.0);
					    u_xlat8 = max(abs(u_xlat17), 1.0);
					    u_xlat8 = float(1.0) / u_xlat8;
					    u_xlat3.x = u_xlat8 * u_xlat3.x;
					    u_xlat8 = u_xlat3.x * u_xlat3.x;
					    u_xlat13 = u_xlat8 * 0.0208350997 + -0.0851330012;
					    u_xlat13 = u_xlat8 * u_xlat13 + 0.180141002;
					    u_xlat13 = u_xlat8 * u_xlat13 + -0.330299497;
					    u_xlat8 = u_xlat8 * u_xlat13 + 0.999866009;
					    u_xlat13 = u_xlat8 * u_xlat3.x;
					    u_xlatb18 = 1.0<abs(u_xlat17);
					    u_xlat13 = u_xlat13 * -2.0 + 1.57079637;
					    u_xlat13 = u_xlatb18 ? u_xlat13 : float(0.0);
					    u_xlat3.x = u_xlat3.x * u_xlat8 + u_xlat13;
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlatb17 = u_xlat17<(-u_xlat17);
					    u_xlat17 = (u_xlatb17) ? (-u_xlat3.x) : u_xlat3.x;
					    u_xlatb3 = 0.0>=u_xlat2.y;
					    if(u_xlatb3){
					        u_xlatb3 = u_xlat2.x>=0.0;
					        u_xlatb8 = u_xlat2.y<0.0;
					        u_xlatb3 = u_xlatb8 && u_xlatb3;
					        if(!u_xlatb3){
					            u_xlatb13 = u_xlat2.x<0.0;
					            u_xlatb8 = u_xlatb8 && u_xlatb13;
					            u_xlat18 = u_xlat17 + -3.1400001;
					            u_xlatb2 = 0.0<u_xlat2.x;
					            u_xlatb7 = u_xlat2.y==0.0;
					            u_xlatb2 = u_xlatb7 && u_xlatb2;
					            u_xlatb7 = u_xlatb7 && u_xlatb13;
					            u_xlat7 = (u_xlatb7) ? -1.57000005 : 1.57000005;
					            u_xlat2.x = (u_xlatb2) ? 1.57000005 : u_xlat7;
					            u_xlat17 = (u_xlatb8) ? u_xlat18 : u_xlat2.x;
					        } else {
					            u_xlat2.x = u_xlat17 + 3.1400001;
					            u_xlat17 = (u_xlatb3) ? u_xlat2.x : u_xlat17;
					        }
					    }
					    u_xlat2.x = u_xlat12 / u_xlat1.x;
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat7 = u_xlat2.x + -1.0;
					    u_xlat7 = (-u_xlat7) * u_xlat7 + 1.0;
					    u_xlat7 = sqrt(u_xlat7);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat3.x = u_xlat2.x / u_xlat7;
					    u_xlat8 = min(u_xlat3.x, 1.0);
					    u_xlat13 = max(u_xlat3.x, 1.0);
					    u_xlat13 = float(1.0) / u_xlat13;
					    u_xlat8 = u_xlat13 * u_xlat8;
					    u_xlat13 = u_xlat8 * u_xlat8;
					    u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
					    u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
					    u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
					    u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
					    u_xlat18 = u_xlat13 * u_xlat8;
					    u_xlatb3 = 1.0<u_xlat3.x;
					    u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
					    u_xlat3.x = u_xlatb3 ? u_xlat18 : float(0.0);
					    u_xlat3.x = u_xlat8 * u_xlat13 + u_xlat3.x;
					    u_xlatb8 = 0.0>=u_xlat7;
					    u_xlat3.x = (u_xlatb8) ? 1.57000005 : u_xlat3.x;
					    u_xlat8 = sin(u_xlat3.x);
					    u_xlat6.x = u_xlat8 / u_xlat1.y;
					    u_xlat8 = -abs(u_xlat6.x) + 1.0;
					    u_xlat8 = sqrt(u_xlat8);
					    u_xlat13 = abs(u_xlat6.x) * -0.0187292993 + 0.0742610022;
					    u_xlat13 = u_xlat13 * abs(u_xlat6.x) + -0.212114394;
					    u_xlat13 = u_xlat13 * abs(u_xlat6.x) + 1.57072878;
					    u_xlat18 = u_xlat8 * u_xlat13;
					    u_xlat18 = u_xlat18 * -2.0 + 3.14159274;
					    u_xlatb6 = u_xlat6.x<(-u_xlat6.x);
					    u_xlat6.x = u_xlatb6 ? u_xlat18 : float(0.0);
					    u_xlat6.x = u_xlat13 * u_xlat8 + u_xlat6.x;
					    u_xlat6.x = (-u_xlat6.x) + 1.57079637;
					    u_xlat6.x = (-u_xlat6.x) + u_xlat3.x;
					    u_xlat3.x = sin(u_xlat6.x);
					    u_xlat4 = cos(u_xlat6.x);
					    u_xlat6.x = u_xlat7 * u_xlat3.x;
					    u_xlat6.x = u_xlat6.x / u_xlat4;
					    u_xlat6.x = (-u_xlat6.x) + u_xlat2.x;
					    u_xlat2.x = sin(u_xlat17);
					    u_xlat3.x = cos(u_xlat17);
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.xy = u_xlat6.xx * u_xlat2.xy;
					    u_xlat3.x = u_xlat2.x * u_xlat1.x + u_xlat11.x;
					    u_xlat3.y = u_xlat2.y * u_xlat1.x + u_xlat11.y;
					    u_xlatb1 = u_xlat12<u_xlat1.x;
					    u_xlat6.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = (u_xlatb1) ? 0.0 : 1.0;
					    u_xlat6.xy = u_xlat6.xx * u_xlat3.xy;
					    u_xlat10.xy = u_xlat10.xy * u_xlat1.xx + u_xlat6.xy;
					    u_xlat10.xy = u_xlat10.xy + vec2(-0.5, -0.5);
					    u_xlat0.xy = u_xlat10.xy / u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    SV_Target0 = texture(_MainTex, u_xlat0.xy);
					    return;
					}"
				}
			}
		}
	}
}