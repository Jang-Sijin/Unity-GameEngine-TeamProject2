Shader "CameraFilterPack/Antialiasing_FXAA" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			GpuProgramID 38683
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c1, 0.298999995, 0.587000012, 0.114, -8
					    def c2, 1, -1, 0.03125, 0.0078125
					    def c3, -0.166666672, 0.166666672, 0.5, -0.5
					    def c4, 0.25, 0, 1, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.xz, c0.x
					    rcp r0.yw, c0.y
					    add r1.xy, -r0.zwzw, v0
					    texld_pp r1, r1, s0
					    dp3_pp r1.x, r1, c1
					    mad r2, r0.zwzw, c2.xyyx, v0.xyxy
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    dp3_pp r1.y, r2, c1
					    dp3_pp r1.z, r3, c1
					    add_pp r1.w, r1.z, r1.x
					    add r2.xy, r0.zwzw, v0
					    texld_pp r2, r2, s0
					    dp3_pp r2.x, r2, c1
					    add_pp r2.yw, r1.xyzz, r2.x
					    add_pp r2.y, r1.w, -r2.y
					    add_pp r1.w, r1.y, r1.w
					    add_pp r1.w, r2.x, r1.w
					    mul_pp r1.w, r1.w, c2.z
					    max_pp r2.z, r1.w, c2.w
					    mov_pp r3.xz, -r2.y
					    cmp r1.w, r3.z, r3.z, r2.y
					    add_pp r2.y, r1.y, r1.x
					    add r3.yw, -r2.w, r2.y
					    min r2.y, r3_abs.w, r1.w
					    add r1.w, r2.z, r2.y
					    rcp_pp r1.w, r1.w
					    mul r4, r1.w, r3
					    mad r3, r3.zwzw, -r1.w, c1.w
					    cmp r3, r3, c1.w, r4
					    add r4, -r3.zwzw, -c1.w
					    cmp r3, r4, r3, -c1.w
					    mul r0, r0, r3
					    mad r3, r0, c3.wwzz, v0.xyxy
					    mad r0, r0.zwzw, c3.xxyy, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    add r2.yzw, r3.xxyz, r4.xxyz
					    mul r2.yzw, r2, c4.x
					    texld r3, r0, s0
					    texld r0, r0.zwzw, s0
					    add r0.xyz, r0, r3
					    mad_pp r2.yzw, r0.xxyz, c4.x, r2
					    mul_pp r0.xyz, r0, c3.z
					    dp3 r0.w, r2.yzww, c1
					    min_pp r3.x, r1.z, r1.x
					    max_pp r3.y, r1.x, r1.z
					    min_pp r3.z, r2.x, r1.y
					    max_pp r3.w, r1.y, r2.x
					    max_pp r1.x, r3.y, r3.w
					    min_pp r1.y, r3.z, r3.x
					    texld_pp r3, v0, s0
					    dp3_pp r1.z, r3, c1
					    min_pp r2.x, r1.y, r1.z
					    max_pp r3.x, r1.z, r1.x
					    add r1.x, -r0.w, r3.x
					    add r0.w, r0.w, -r2.x
					    cmp r0.w, r0.w, c4.y, c4.z
					    cmp r1.x, r1.x, c4.y, c4.z
					    add r0.w, r0.w, r1.x
					    cmp_pp oC0.xyz, -r0.w, r2.yzww, r0
					    mov_pp oC0.w, c2.x
					
					// approximately 62 instruction slots used (9 texture, 53 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat7;
					vec2 u_xlat8;
					vec2 u_xlat14;
					float u_xlat18;
					bool u_xlatb18;
					bool u_xlatb19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / _ScreenResolution.xyxy;
					    u_xlat1.xy = (-u_xlat0.zw) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = u_xlat0.zwzw * vec4(1.0, -1.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xy = u_xlat0.zw + vs_TEXCOORD0.xy;
					    u_xlat4 = texture(_MainTex, u_xlat4.xy);
					    u_xlat5 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat1.y = dot(u_xlat3.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat1.z = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat1.w = dot(u_xlat4.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat2.x = dot(u_xlat5.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat8.xy = min(u_xlat1.yw, u_xlat1.xz);
					    u_xlat8.x = min(u_xlat8.y, u_xlat8.x);
					    u_xlat8.x = min(u_xlat8.x, u_xlat2.x);
					    u_xlat14.xy = max(u_xlat1.yw, u_xlat1.xz);
					    u_xlat14.x = max(u_xlat14.y, u_xlat14.x);
					    u_xlat2.x = max(u_xlat14.x, u_xlat2.x);
					    u_xlat14.xy = u_xlat1.yw + u_xlat1.xz;
					    u_xlat20 = (-u_xlat14.y) + u_xlat14.x;
					    u_xlat3.xz = (-vec2(u_xlat20));
					    u_xlat1.xy = u_xlat1.zw + u_xlat1.xy;
					    u_xlat3.yw = (-u_xlat1.yy) + u_xlat1.xx;
					    u_xlat1.x = u_xlat1.z + u_xlat14.x;
					    u_xlat1.x = u_xlat1.w + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.03125;
					    u_xlat1.x = max(u_xlat1.x, 0.0078125);
					    u_xlat7 = min(abs(u_xlat20), abs(u_xlat3.w));
					    u_xlat1.x = u_xlat1.x + u_xlat7;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1 = u_xlat1.xxxx * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(-8.0, -8.0, -8.0, -8.0));
					    u_xlat1 = min(u_xlat1, vec4(8.0, 8.0, 8.0, 8.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1 = u_xlat0.zwzw * vec4(-0.166666672, -0.166666672, 0.166666672, 0.166666672) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat0 = u_xlat0 * vec4(-0.5, -0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlatb19 = u_xlat18<u_xlat8.x;
					    u_xlatb18 = u_xlat2.x<u_xlat18;
					    u_xlatb18 = u_xlatb18 || u_xlatb19;
					    if(u_xlatb18){
					        SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5);
					        SV_Target0.w = 1.0;
					        return;
					    } else {
					        SV_Target0.xyz = u_xlat0.xyz;
					        SV_Target0.w = 1.0;
					        return;
					    }
					    return;
					}"
				}
			}
		}
	}
}