Shader "CameraFilterPack/FX_Hexagon_Black" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0.2, 10)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 48204
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Value            c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, 0.5, 0.00312500005, 0.00625000009, -1
					    def c3, 0.5, 0.866025388, 0, 1.15470052
					    def c4, -2, 3, 0, 0
					    def c5, 0.00312500005, 0.00541265868, 0.0108253174, 0.00937500037
					    def c6, -1, 0, 0.0108253174, 0.00625000009
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xy, c0, v0
					    mov r1.x, c0.x
					    mul r0.z, r1.x, c1.x
					    mul r1.xyz, r0.z, c5
					    rcp r2.y, r1.z
					    mul r3.xyz, r0.z, c5.wzww
					    rcp r2.xz, r3.x
					    mul r0.xyw, r0.yxzy, r2.xyzz
					    frc r1.zw, r0_abs.xyyw
					    cmp r1.zw, r0.xyyw, r1, -r1
					    mul r1.z, r3.y, r1.z
					    rcp r2.x, r1.y
					    mul r2.x, r1.x, r2.x
					    mul r2.y, r1.z, r2.x
					    mad r1.x, r1.z, r2.x, -r1.x
					    mad r1.z, r0.z, c5.y, -r1.z
					    mad r1.x, r1.w, r3.z, -r1.x
					    mad r2.x, r1.w, r3.z, -r2.y
					    mad r2.yz, r0.z, c2, -r2.y
					    mad r2.yz, r1.w, r3.z, -r2
					    frc r3.yzw, r0.xwyw
					    add r4.xyz, r0.xyww, -r3.yzww
					    add r0.xy, r4.yzzw, c6
					    add r5.xy, r4.yzzw, c6.yxzw
					    cmp r0.xy, r2.x, r0, r5
					    add r2.xw, r4.yyzz, c2.w
					    cmp r5.z, r2.z, r4.z, r2.w
					    cmp r0.xy, r1.z, r0, r5.xzzw
					    cmp r4.w, r1.x, r4.z, r2.w
					    cmp r1.xz, r2.y, r4.yyww, r2.xyww
					    mul r0.w, r4.x, c2.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, r4.x, r0.w, -r0.w
					    cmp r0.xy, -r0.w, r0, r1.xzzw
					    mul r0.w, r0.y, c2.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, r0.y, r0.w, -r0.w
					    dp2add r0.w, r0.w, r1.y, c6.y
					    dp2add r1.x, r0.x, r1.y, -r0.w
					    mul r1.y, r3.x, r0.y
					    mad r0.xy, r0.z, c6.zwzw, r1
					    mad r1.xy, v0, -c0, r0
					    dp2add r0.w, r1_abs, c3, c3.z
					    max r2.x, r0.w, r1_abs.x
					    mad r0.w, r0.z, c2.z, c2.w
					    mad r0.z, r0.z, c2.z, -r0.w
					    mad r0.w, r2.x, c3.w, -r0.w
					    rcp r0.z, r0.z
					    mul_sat r0.z, r0.z, r0.w
					    mad r0.w, r0.z, c4.x, c4.y
					    mul r0.z, r0.z, r0.z
					    mad r0.z, r0.w, -r0.z, -c2.w
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul r0.xy, r0, r1
					    texld r1, r0, s0
					    mul oC0.xyz, r0.z, r1
					    mov oC0.w, -c2.w
					
					// approximately 61 instruction slots used (1 texture, 60 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Value;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat10;
					vec2 u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat10 = _ScreenResolution.x * _Value;
					    u_xlat1.xyz = vec3(u_xlat10) * vec3(0.0108253174, 0.00937500037, 0.0108253174);
					    u_xlat0.xyw = u_xlat0.yxy / u_xlat1.yxy;
					    u_xlatb1.xw = greaterThanEqual(u_xlat0.yyyw, (-u_xlat0.yyyw)).xw;
					    u_xlat2.xy = fract(abs(u_xlat0.yw));
					    u_xlat3.xyz = floor(u_xlat0.xyw);
					    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : (-u_xlat2.x);
					    u_xlat0.y = (u_xlatb1.w) ? u_xlat2.y : (-u_xlat2.y);
					    u_xlat0.xy = u_xlat1.zy * u_xlat0.xy;
					    u_xlat1.xy = vec2(u_xlat10) * vec2(0.00312500005, 0.00541265868);
					    u_xlat15 = u_xlat1.x / u_xlat1.y;
					    u_xlat1.z = u_xlat15 * u_xlat0.x;
					    u_xlat15 = u_xlat0.x * u_xlat15 + (-u_xlat1.x);
					    u_xlatb15 = u_xlat0.y<u_xlat15;
					    u_xlat1.xw = vec2(u_xlat10) * vec2(0.00312500005, 0.00625000009) + (-u_xlat1.zz);
					    u_xlatb1.xzw = lessThan(u_xlat0.yyyy, u_xlat1.xxzw).xzw;
					    u_xlatb0 = u_xlat1.y<u_xlat0.x;
					    u_xlat2 = u_xlat3.yzyz + vec4(-1.0, -1.0, -1.0, 0.0);
					    u_xlat4.z = (u_xlatb1.w) ? u_xlat2.y : u_xlat3.z;
					    u_xlat4.xy = u_xlat3.yz + vec2(0.0, -1.0);
					    u_xlat11.xy = (u_xlatb1.z) ? u_xlat4.xy : u_xlat2.zw;
					    u_xlat0.xy = (bool(u_xlatb0)) ? u_xlat4.xz : u_xlat11.xy;
					    u_xlat3.w = (u_xlatb15) ? u_xlat2.y : u_xlat3.z;
					    u_xlat1.xz = (u_xlatb1.x) ? u_xlat2.xy : u_xlat3.yw;
					    u_xlat15 = u_xlat3.x * 0.5;
					    u_xlatb16 = u_xlat15>=(-u_xlat15);
					    u_xlat15 = fract(abs(u_xlat15));
					    u_xlat15 = (u_xlatb16) ? u_xlat15 : (-u_xlat15);
					    u_xlatb15 = 0.0<u_xlat15;
					    u_xlat0.xy = (bool(u_xlatb15)) ? u_xlat1.xz : u_xlat0.xy;
					    u_xlat15 = u_xlat0.y * 0.5;
					    u_xlatb1.x = u_xlat15>=(-u_xlat15);
					    u_xlat15 = fract(abs(u_xlat15));
					    u_xlat15 = (u_xlatb1.x) ? u_xlat15 : (-u_xlat15);
					    u_xlat15 = dot(vec2(u_xlat15), u_xlat1.yy);
					    u_xlat0.x = dot(u_xlat0.xx, u_xlat1.yy);
					    u_xlat1.x = (-u_xlat15) + u_xlat0.x;
					    u_xlat0.x = u_xlat10 * 0.00937500037;
					    u_xlat1.y = u_xlat0.x * u_xlat0.y;
					    u_xlat0.xy = vec2(u_xlat10) * vec2(0.0108253174, 0.00625000009) + u_xlat1.xy;
					    u_xlat1.xy = (-vs_TEXCOORD0.xy) * _ScreenResolution.xy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / _ScreenResolution.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = dot(abs(u_xlat1.xy), vec2(0.5, 0.866025388));
					    u_xlat0.x = max(abs(u_xlat1.x), u_xlat0.x);
					    u_xlat5 = u_xlat10 * 0.00625000009 + -1.0;
					    u_xlat10 = u_xlat10 * 0.00625000009 + (-u_xlat5);
					    u_xlat0.x = u_xlat0.x * 1.15470052 + (-u_xlat5);
					    u_xlat5 = float(1.0) / u_xlat10;
					    u_xlat0.x = u_xlat5 * u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat5) * u_xlat0.x + 1.0;
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}