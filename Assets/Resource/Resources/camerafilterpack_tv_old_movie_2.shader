Shader "CameraFilterPack/TV_Old_Movie_2" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(1, 10)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 49557
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//   float _Value4;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Value       c1       1
					//   _Value2      c2       1
					//   _Value3      c3       1
					//   _Value4      c4       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c5, 0, 1, 12.9898005, 78.2330017
					    def c6, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c7, 43758.5469, 23, 8, 0.00200000009
					    def c8, 0.212599993, 0.715200007, 0.0722000003, 16
					    def c9, 1, 0.5, 0.699999988, 0.125
					    def c10, 0.00999999978, 2, 18, 0
					    def c11, 0.0208350997, -0.0851330012, 0.180141002, -0.330299497
					    def c12, 0.999866009, -2, 1.57079637, 0.0625
					    def c13, 0.99998647, 0.5, 0.100000001, 1
					    def c14, 7, 0, 24, 0.200000003
					    def c15, 0.300000012, 0.699999988, 0.400000006, 8
					    def c16, 8, -2, 6, 0
					    def c17, 1, 0, 0.48999998, 0.400000006
					    def c18, 25, 0, 26, 27
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mul r0.x, r0.x, c1.x
					    frc r0.y, r0.x
					    add r0.z, r0.x, -r0.y
					    cmp r0.y, -r0.y, c5.x, c5.y
					    cmp r0.x, r0.x, c5.x, r0.y
					    add r0.x, r0.x, r0.z
					    mov r0.y, c5.y
					    dp2add r1.x, r0, c5.zwzw, c5.x
					    mad r1.x, r1.x, c6.x, c6.y
					    frc r1.x, r1.x
					    mad r1.x, r1.x, c6.z, c6.w
					    sincos r2.y, r1.x
					    mul r1.x, r2.y, c7.x
					    frc r1.x, r1.x
					    add r0.zw, r0.x, c7.xyyz
					    dp2add r0.z, r0.zyzw, c5.zwzw, c5.x
					    mad r0.z, r0.z, c6.x, c6.y
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c6.z, c6.w
					    sincos r2.y, r0.z
					    mul r0.z, r2.y, c7.x
					    frc r1.y, r0.z
					    mad r1.xy, r1, c7.w, v0
					    texld r1, r1, s0
					    dp3 r1.x, c8, r1
					    mov r1.y, c2.x
					    mov r2, c9
					    mad r3.xy, c3.x, r2, r2.z
					    mov r3.z, c2.x
					    mul r3.xyz, r1.xxyw, r3
					    mul r3.xy, r3, c2.x
					    mad r1.zw, c3.x, r2.xyxw, r2.z
					    mul r1.xyz, r1.zwxw, r3
					    mov r2.x, c2.x
					    mad r2.xyz, r2.x, c17.xxyw, c17.yyzw
					    mul r1.xyz, r1, r2
					    dp2add r0.z, r0.wyzw, c5.zwzw, c5.x
					    mad r0.z, r0.z, c6.x, c6.y
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c6.z, c6.w
					    sincos r2.y, r0.z
					    mul r0.z, r2.y, c7.x
					    frc r0.z, r0.z
					    add r2.xy, c5.y, -v0
					    mul r0.w, r2.x, v0.x
					    mul r0.w, r0.w, v0.y
					    mul r0.w, r2.y, r0.w
					    mul r0.w, r0.w, c8.w
					    add r1.w, r0.z, c6.y
					    mad r1.w, r1.w, c15.x, c15.y
					    mul r2.xy, r0.z, c15.zwzw
					    mad r1.w, r0.w, r1.w, r2.x
					    add r1.w, r1.w, c5.y
					    pow r2.x, r0.w, c17.w
					    mul r0.w, r1.w, r2.x
					    frc r1.w, r2.y
					    add r1.w, r2.y, -r1.w
					    add r2, r0.xyxy, c14.xyzy
					    dp2add r2.x, r2, c5.zwzw, c5.x
					    mad r2.x, r2.x, c6.x, c6.y
					    frc r2.x, r2.x
					    mad r2.x, r2.x, c6.z, c6.w
					    sincos r3.y, r2.x
					    mul r2.x, r3.y, c7.x
					    frc r2.y, r2.x
					    add r3.x, r2.y, -c6.y
					    add r3.y, -r2.y, c14.w
					    mul r3.zw, r2.y, v0.xyyx
					    mad r3.z, r3.z, c10.x, r3.w
					    add r3.x, r3.x, r3.z
					    pow r4.x, r3_abs.x, c9.w
					    add r3.x, -r4.x, c10.y
					    cmp r3.x, r3.y, r3.x, r4.x
					    mov r3.y, c6.y
					    add r3.y, r3.y, -c4.x
					    lrp r4.x, r3.x, c5.y, r3.y
					    mul r3.x, r0.w, r4.x
					    cmp r0.w, -r1.w, r0.w, r3.x
					    add r1.w, -r1.w, c5.y
					    dp2add r2.z, r2.zwzw, c5.zwzw, c5.x
					    mad r2.z, r2.z, c6.x, c6.y
					    frc r2.z, r2.z
					    mad r2.z, r2.z, c6.z, c6.w
					    sincos r4.y, r2.z
					    mul r2.z, r4.y, c7.x
					    frc r2.z, r2.z
					    add r2.w, r2.z, -c6.y
					    add r3.x, -r2.z, c14.w
					    mul r3.zw, r2.z, v0.xyyx
					    mad r2.z, r3.z, c10.x, r3.w
					    add r2.z, r2.w, r2.z
					    pow r3.z, r2_abs.z, c9.w
					    add r2.z, -r3.z, c10.y
					    cmp r2.z, r3.x, r2.z, r3.z
					    lrp r4.x, r2.z, c5.y, r3.y
					    mul r2.z, r0.w, r4.x
					    cmp r0.w, r1.w, r0.w, r2.z
					    add r2.zw, r0.xyxy, c10
					    dp2add r1.w, r2.zwzw, c5.zwzw, c5.x
					    mad r1.w, r1.w, c6.x, c6.y
					    frc r1.w, r1.w
					    mad r1.w, r1.w, c6.z, c6.w
					    sincos r3.y, r1.w
					    mul r1.w, r3.y, c7.x
					    frc r1.w, r1.w
					    mad r1.w, r1.w, c16.x, c16.y
					    max r2.z, r1.w, c5.x
					    frc r1.w, r2.z
					    add r1.w, r2.z, -r1.w
					    if_lt -r1.w, c5.x
					      add r2.zw, r0.xyxy, c16
					      dp2add r2.z, r2.zwzw, c5.zwzw, c5.x
					      mad r2.z, r2.z, c6.x, c6.y
					      frc r2.z, r2.z
					      mad r2.z, r2.z, c6.z, c6.w
					      sincos r3.y, r2.z
					      mul r2.z, r3.y, c7.x
					      frc r2.x, r2.z
					      mul r2.z, r0.z, c10.x
					      add r2.yw, r2.xxzy, -v0.xxzy
					      rcp r3.x, r2.y
					      mul r3.x, r2.w, r3.x
					      mov_sat r3.y, r3_abs.x
					      add r3.z, r3_abs.x, -c5.y
					      rcp r3.w, r3_abs.x
					      cmp r3.z, r3.z, r3.w, c5.y
					      mul r3.y, r3.z, r3.y
					      mul r3.z, r3.y, r3.y
					      mad r3.w, r3.z, c11.x, c11.y
					      mad r3.w, r3.z, r3.w, c11.z
					      mad r3.w, r3.z, r3.w, c11.w
					      mad r3.z, r3.z, r3.w, c12.x
					      mul r3.y, r3.z, r3.y
					      add r3.z, -r3_abs.x, c5.y
					      cmp r3.z, r3.z, c5.x, c5.y
					      mad r3.w, r3.y, c12.y, c12.z
					      mad r3.y, r3.w, r3.z, r3.y
					      min r4.x, r3.x, c5.y
					      cmp r3.x, r4.x, c5.x, c5.y
					      add r3.z, r3.y, r3.y
					      mad r3.x, r3.x, -r3.z, r3.y
					      mul r2.z, r2.z, r2.z
					      mul r2.x, r2.x, r3.x
					      mad r2.x, r2.x, c13.x, c13.y
					      frc r2.x, r2.x
					      mad r2.x, r2.x, c6.z, c6.w
					      sincos r3.y, r2.x
					      mad r2.x, r3.y, c13.z, c13.w
					      mul r2.x, r2.x, r2.z
					      dp2add r2.x, r2.ywzw, r2.ywzw, -r2.x
					      pow r3.x, r2.x, c12.w
					      cmp r2.x, r2.x, r3.x, c14.w
					      mad r0.z, r0.z, -c9.y, c9.x
					      mov r2.w, c14.w
					      mad r0.z, r0.z, r2.w, -c4.x
					      add r0.z, r0.z, c15.x
					      lrp r3.x, r2.x, c5.y, r0.z
					      mul r0.w, r0.w, r3.x
					    endif
					    if_lt c5.y, r1.w
					      add r2, r0.xyxy, c18.xyzy
					      dp2add r0.z, r2, c5.zwzw, c5.x
					      mad r0.z, r0.z, c6.x, c6.y
					      frc r0.z, r0.z
					      mad r0.z, r0.z, c6.z, c6.w
					      sincos r3.y, r0.z
					      mul r0.z, r3.y, c7.x
					      frc r2.x, r0.z
					      dp2add r0.z, r2.zwzw, c5.zwzw, c5.x
					      mad r0.z, r0.z, c6.x, c6.y
					      frc r0.z, r0.z
					      mad r0.z, r0.z, c6.z, c6.w
					      sincos r3.y, r0.z
					      mul r0.z, r3.y, c7.x
					      frc r2.y, r0.z
					      add r0.xy, r0, c18.wyzw
					      dp2add r0.x, r0, c5.zwzw, c5.x
					      mad r0.x, r0.x, c6.x, c6.y
					      frc r0.x, r0.x
					      mad r0.x, r0.x, c6.z, c6.w
					      sincos r3.y, r0.x
					      mul r0.x, r3.y, c7.x
					      frc r0.x, r0.x
					      mul r0.y, r0.x, c10.x
					      add r2.yz, r2.xxyw, -v0.xxyw
					      rcp r0.z, r2.y
					      mul r0.z, r0.z, r2.z
					      mov_sat r1.w, r0_abs.z
					      add r2.w, r0_abs.z, -c5.y
					      rcp r3.x, r0_abs.z
					      cmp r2.w, r2.w, r3.x, c5.y
					      mul r1.w, r1.w, r2.w
					      mul r2.w, r1.w, r1.w
					      mad r3.x, r2.w, c11.x, c11.y
					      mad r3.x, r2.w, r3.x, c11.z
					      mad r3.x, r2.w, r3.x, c11.w
					      mad r2.w, r2.w, r3.x, c12.x
					      mul r1.w, r1.w, r2.w
					      add r2.w, -r0_abs.z, c5.y
					      cmp r2.w, r2.w, c5.x, c5.y
					      mad r3.x, r1.w, c12.y, c12.z
					      mad r1.w, r3.x, r2.w, r1.w
					      min r2.w, r0.z, c5.y
					      cmp r0.z, r2.w, c5.x, c5.y
					      add r2.w, r1.w, r1.w
					      mad r0.z, r0.z, -r2.w, r1.w
					      mul r0.y, r0.y, r0.y
					      mul r0.z, r0.z, r2.x
					      mad r0.z, r0.z, c13.x, c13.y
					      frc r0.z, r0.z
					      mad r0.z, r0.z, c6.z, c6.w
					      sincos r3.y, r0.z
					      mad r0.z, r3.y, c13.z, c13.w
					      mul r0.y, r0.z, r0.y
					      dp2add r0.y, r2.yzzw, r2.yzzw, -r0.y
					      pow r1.w, r0.y, c12.w
					      cmp r0.y, r0.y, r1.w, c14.w
					      mad r0.x, r0.x, -c9.y, c9.x
					      mov r1.w, c14.w
					      mad r0.x, r0.x, r1.w, -c4.x
					      add r0.x, r0.x, c15.x
					      lrp r1.w, r0.y, c5.y, r0.x
					      mul r0.w, r0.w, r1.w
					    endif
					    mul oC0.xyz, r0.w, r1
					    mov oC0.w, c5.y
					
					// approximately 337 instruction slots used (1 texture, 336 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						float _Value2;
						float _Value3;
						float _Value4;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec2 u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb4;
					float u_xlat5;
					vec2 u_xlat7;
					float u_xlat8;
					bool u_xlatb8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					bool u_xlatb16;
					float u_xlat17;
					bool u_xlatb17;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0.x = _Value * _TimeX;
					    u_xlat0.x = trunc(u_xlat0.x);
					    u_xlat0.y = 1.0;
					    u_xlat1.x = dot(u_xlat0.xy, vec2(12.9898005, 78.2330017));
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 43758.5469;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat0.zw = u_xlat0.xx + vec2(23.0, 8.0);
					    u_xlat10 = dot(u_xlat0.zy, vec2(12.9898005, 78.2330017));
					    u_xlat10 = sin(u_xlat10);
					    u_xlat10 = u_xlat10 * 43758.5469;
					    u_xlat1.y = fract(u_xlat10);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.00200000009, 0.00200000009) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.x = dot(vec3(0.212599993, 0.715200007, 0.0722000003), u_xlat1.xyz);
					    u_xlat1.y = _Value2;
					    u_xlat2.xyz = vec3(_Value3, _Value3, _Value2) * vec3(1.0, 0.5, 1.0) + vec3(0.699999988, 0.699999988, 0.0);
					    u_xlat2.xyz = u_xlat1.xxy * u_xlat2.xyz;
					    u_xlat2.xy = u_xlat2.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat1.zw = vec2(vec2(_Value3, _Value3)) * vec2(1.0, 0.125) + vec2(0.699999988, 0.699999988);
					    u_xlat1.xyz = u_xlat1.zwx * u_xlat2.xyz;
					    u_xlat2.x = _Value2;
					    u_xlat2.z = 0.48999998;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat2.xxz;
					    u_xlat10 = dot(u_xlat0.wy, vec2(12.9898005, 78.2330017));
					    u_xlat10 = sin(u_xlat10);
					    u_xlat10 = u_xlat10 * 43758.5469;
					    u_xlat10 = fract(u_xlat10);
					    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vec2(1.0, 1.0);
					    u_xlat15 = u_xlat2.x * vs_TEXCOORD0.x;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD0.y;
					    u_xlat15 = u_xlat2.y * u_xlat15;
					    u_xlat15 = u_xlat15 * 16.0;
					    u_xlat16 = u_xlat10 + 0.5;
					    u_xlat16 = u_xlat16 * 0.300000012 + 0.699999988;
					    u_xlat12.xy = vec2(u_xlat10) * vec2(0.400000006, 8.0);
					    u_xlat15 = u_xlat15 * u_xlat16 + u_xlat12.x;
					    u_xlat15 = u_xlat15 + 1.0;
					    u_xlat16 = vs_TEXCOORD0.x * 16.0;
					    u_xlat16 = u_xlat2.x * u_xlat16;
					    u_xlat16 = u_xlat16 * vs_TEXCOORD0.y;
					    u_xlat16 = u_xlat2.y * u_xlat16;
					    u_xlat16 = log2(u_xlat16);
					    u_xlat16 = u_xlat16 * 0.400000006;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat15 = u_xlat15 * u_xlat16;
					    u_xlati16 = int(u_xlat12.y);
					    u_xlatb2.xy = lessThan(ivec4(0, 1, 0, 0), ivec4(u_xlati16)).xy;
					    u_xlat3 = u_xlat0.xyxy + vec4(7.0, 0.0, 24.0, 0.0);
					    u_xlat16 = dot(u_xlat3.xy, vec2(12.9898005, 78.2330017));
					    u_xlat16 = sin(u_xlat16);
					    u_xlat16 = u_xlat16 * 43758.5469;
					    u_xlat3.y = fract(u_xlat16);
					    u_xlat16 = u_xlat3.y * 0.00999999978;
					    u_xlat12.x = u_xlat3.y + -0.5;
					    u_xlatb17 = 0.200000003<u_xlat3.y;
					    u_xlat16 = u_xlat16 * vs_TEXCOORD0.y;
					    u_xlat16 = u_xlat3.y * vs_TEXCOORD0.x + u_xlat16;
					    u_xlat16 = u_xlat12.x + u_xlat16;
					    u_xlat16 = log2(abs(u_xlat16));
					    u_xlat16 = u_xlat16 * 0.125;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat12.x = (-u_xlat16) + 2.0;
					    u_xlat16 = (u_xlatb17) ? u_xlat16 : u_xlat12.x;
					    u_xlat12.x = (-_Value4) + 0.5;
					    u_xlat17 = (-u_xlat12.x) + 1.0;
					    u_xlat16 = u_xlat16 * u_xlat17 + u_xlat12.x;
					    u_xlat16 = u_xlat15 * u_xlat16;
					    u_xlat15 = (u_xlatb2.x) ? u_xlat16 : u_xlat15;
					    u_xlat16 = dot(u_xlat3.zw, vec2(12.9898005, 78.2330017));
					    u_xlat16 = sin(u_xlat16);
					    u_xlat16 = u_xlat16 * 43758.5469;
					    u_xlat16 = fract(u_xlat16);
					    u_xlat2.x = u_xlat16 * 0.00999999978;
					    u_xlat13 = u_xlat16 + -0.5;
					    u_xlatb18 = 0.200000003<u_xlat16;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD0.y;
					    u_xlat16 = u_xlat16 * vs_TEXCOORD0.x + u_xlat2.x;
					    u_xlat16 = u_xlat13 + u_xlat16;
					    u_xlat16 = log2(abs(u_xlat16));
					    u_xlat16 = u_xlat16 * 0.125;
					    u_xlat16 = exp2(u_xlat16);
					    u_xlat2.x = (-u_xlat16) + 2.0;
					    u_xlat16 = (u_xlatb18) ? u_xlat16 : u_xlat2.x;
					    u_xlat16 = u_xlat16 * u_xlat17 + u_xlat12.x;
					    u_xlat16 = u_xlat15 * u_xlat16;
					    u_xlat15 = (u_xlatb2.y) ? u_xlat16 : u_xlat15;
					    u_xlat2.xy = u_xlat0.xy + vec2(18.0, 0.0);
					    u_xlat16 = dot(u_xlat2.xy, vec2(12.9898005, 78.2330017));
					    u_xlat16 = sin(u_xlat16);
					    u_xlat16 = u_xlat16 * 43758.5469;
					    u_xlat16 = fract(u_xlat16);
					    u_xlat16 = u_xlat16 * 8.0 + -2.0;
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlati16 = int(u_xlat16);
					    u_xlatb2.xy = lessThan(ivec4(0, 1, 0, 0), ivec4(u_xlati16)).xy;
					    if(u_xlatb2.x){
					        u_xlat2.xz = u_xlat0.xy + vec2(6.0, 0.0);
					        u_xlat16 = dot(u_xlat2.xz, vec2(12.9898005, 78.2330017));
					        u_xlat16 = sin(u_xlat16);
					        u_xlat16 = u_xlat16 * 43758.5469;
					        u_xlat3.x = fract(u_xlat16);
					        u_xlat16 = u_xlat10 * 0.00999999978;
					        u_xlat2.xz = u_xlat3.xy + (-vs_TEXCOORD0.xy);
					        u_xlat17 = u_xlat2.z / u_xlat2.x;
					        u_xlat8 = min(abs(u_xlat17), 1.0);
					        u_xlat13 = max(abs(u_xlat17), 1.0);
					        u_xlat13 = float(1.0) / u_xlat13;
					        u_xlat8 = u_xlat13 * u_xlat8;
					        u_xlat13 = u_xlat8 * u_xlat8;
					        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
					        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
					        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
					        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
					        u_xlat18 = u_xlat13 * u_xlat8;
					        u_xlatb4 = 1.0<abs(u_xlat17);
					        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
					        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
					        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
					        u_xlat17 = min(u_xlat17, 1.0);
					        u_xlatb17 = u_xlat17<(-u_xlat17);
					        u_xlat17 = (u_xlatb17) ? (-u_xlat8) : u_xlat8;
					        u_xlat16 = u_xlat16 * u_xlat16;
					        u_xlat17 = u_xlat17 * u_xlat3.x;
					        u_xlat17 = u_xlat17 * 6.28310013;
					        u_xlat17 = sin(u_xlat17);
					        u_xlat17 = u_xlat17 * 0.100000001 + 1.0;
					        u_xlat3.x = u_xlat16 * u_xlat17;
					        u_xlat2.x = dot(u_xlat2.xz, u_xlat2.xz);
					        u_xlatb12 = u_xlat2.x<u_xlat3.x;
					        u_xlat16 = (-u_xlat16) * u_xlat17 + u_xlat2.x;
					        u_xlat16 = log2(u_xlat16);
					        u_xlat16 = u_xlat16 * 0.0625;
					        u_xlat16 = exp2(u_xlat16);
					        u_xlat16 = (u_xlatb12) ? 0.200000003 : u_xlat16;
					        u_xlat10 = (-u_xlat10) * 0.5 + 1.0;
					        u_xlat10 = u_xlat10 * 0.200000003 + (-_Value4);
					        u_xlat10 = u_xlat10 + 0.300000012;
					        u_xlat2.x = (-u_xlat10) + 1.0;
					        u_xlat10 = u_xlat16 * u_xlat2.x + u_xlat10;
					        u_xlat15 = u_xlat10 * u_xlat15;
					    }
					    if(u_xlatb2.y){
					        u_xlat2 = u_xlat0.xyxy + vec4(25.0, 0.0, 26.0, 0.0);
					        u_xlat10 = dot(u_xlat2.xy, vec2(12.9898005, 78.2330017));
					        u_xlat10 = sin(u_xlat10);
					        u_xlat10 = u_xlat10 * 43758.5469;
					        u_xlat2.x = fract(u_xlat10);
					        u_xlat10 = dot(u_xlat2.zw, vec2(12.9898005, 78.2330017));
					        u_xlat10 = sin(u_xlat10);
					        u_xlat10 = u_xlat10 * 43758.5469;
					        u_xlat2.y = fract(u_xlat10);
					        u_xlat0.xy = u_xlat0.xy + vec2(27.0, 0.0);
					        u_xlat0.x = dot(u_xlat0.xy, vec2(12.9898005, 78.2330017));
					        u_xlat0.x = sin(u_xlat0.x);
					        u_xlat0.x = u_xlat0.x * 43758.5469;
					        u_xlat0.x = fract(u_xlat0.x);
					        u_xlat5 = u_xlat0.x * 0.00999999978;
					        u_xlat7.xy = u_xlat2.xy + (-vs_TEXCOORD0.xy);
					        u_xlat10 = u_xlat7.y / u_xlat7.x;
					        u_xlat16 = min(abs(u_xlat10), 1.0);
					        u_xlat17 = max(abs(u_xlat10), 1.0);
					        u_xlat17 = float(1.0) / u_xlat17;
					        u_xlat16 = u_xlat16 * u_xlat17;
					        u_xlat17 = u_xlat16 * u_xlat16;
					        u_xlat3.x = u_xlat17 * 0.0208350997 + -0.0851330012;
					        u_xlat3.x = u_xlat17 * u_xlat3.x + 0.180141002;
					        u_xlat3.x = u_xlat17 * u_xlat3.x + -0.330299497;
					        u_xlat17 = u_xlat17 * u_xlat3.x + 0.999866009;
					        u_xlat3.x = u_xlat16 * u_xlat17;
					        u_xlatb8 = 1.0<abs(u_xlat10);
					        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
					        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
					        u_xlat16 = u_xlat16 * u_xlat17 + u_xlat3.x;
					        u_xlat10 = min(u_xlat10, 1.0);
					        u_xlatb10 = u_xlat10<(-u_xlat10);
					        u_xlat10 = (u_xlatb10) ? (-u_xlat16) : u_xlat16;
					        u_xlat5 = u_xlat5 * u_xlat5;
					        u_xlat10 = u_xlat10 * u_xlat2.x;
					        u_xlat10 = u_xlat10 * 6.28310013;
					        u_xlat10 = sin(u_xlat10);
					        u_xlat10 = u_xlat10 * 0.100000001 + 1.0;
					        u_xlat16 = u_xlat10 * u_xlat5;
					        u_xlat2.x = dot(u_xlat7.xy, u_xlat7.xy);
					        u_xlatb16 = u_xlat2.x<u_xlat16;
					        u_xlat5 = (-u_xlat5) * u_xlat10 + u_xlat2.x;
					        u_xlat5 = log2(u_xlat5);
					        u_xlat5 = u_xlat5 * 0.0625;
					        u_xlat5 = exp2(u_xlat5);
					        u_xlat5 = (u_xlatb16) ? 0.200000003 : u_xlat5;
					        u_xlat0.x = (-u_xlat0.x) * 0.5 + 1.0;
					        u_xlat0.x = u_xlat0.x * 0.200000003 + (-_Value4);
					        u_xlat0.x = u_xlat0.x + 0.300000012;
					        u_xlat10 = (-u_xlat0.x) + 1.0;
					        u_xlat0.x = u_xlat5 * u_xlat10 + u_xlat0.x;
					        u_xlat15 = u_xlat0.x * u_xlat15;
					    }
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}