Shader "CameraFilterPack/Drawing_Crosshatch" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 10)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 39177
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Distortion;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Distortion       c0       1
					//   _ScreenResolution c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, 1, 10, 0.800000012, 0.600000024
					    def c3, -5, 0, -1, -2
					    def c4, 0.212599993, 0.715200007, 0.0722000003, 0.100000001
					    def c5, -0.800000012, -0.600000024, -0.300000012, -0.150000006
					    def c6, 1, -1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add r0.w, -r0.y, r0.x
					    cmp_pp r1.xy, r0.w, r0.yxzw, r0
					    min r2.x, r0.z, r1.x
					    max r2.y, r1.y, r0.z
					    add r0.w, -r2.x, r2.y
					    rcp r1.x, r2.y
					    mul_pp r1.xyz, r0, r1.x
					    dp3 r0.x, r0, c4
					    add r2, r0.x, c5
					    add r0.x, -r0.w, c4.w
					    cmp_pp r0.xyz, r0.x, c2.x, r1
					    mul_pp r1.xyz, r0, c2.w
					    mul r3.xy, c1, v0
					    mad r0.w, v0.x, c1.x, -r3.y
					    add r1.w, r3.y, r3.x
					    mul r3.x, r0.w, c4.w
					    frc r3.y, r3.x
					    add r3.x, -r3.y, r3.x
					    mad r3.x, r3.x, -c2.y, r0.w
					    add r0.w, r0.w, c3.x
					    mul r3.y, r1.w, c4.w
					    frc r3.z, r3.y
					    add r3.y, -r3.z, r3.y
					    mad r3.y, r3.y, -c2.y, r1.w
					    add r1.w, r1.w, c3.x
					    add r3.xy, -r3, c0.x
					    mul_pp r4.xyz, r0, c2.z
					    mul_pp r0.xyz, r0, -c5.z
					    cmp_pp r3.yzw, r3.y, r4.xxyz, c2.x
					    cmp_pp r3.yzw, r2.x, c2.x, r3
					    cmp_pp r1.xyz, r3.x, r1, r3.yzww
					    cmp_pp r1.xyz, r2.y, r3.yzww, r1
					    mul r2.x, r1.w, c4.w
					    frc r2.y, r2.x
					    add r2.x, -r2.y, r2.x
					    mad r1.w, r2.x, -c2.y, r1.w
					    add r1.w, -r1.w, c0.x
					    cmp_pp r0.xyz, r1.w, r0, r1
					    cmp_pp r0.xyz, r2.z, r1, r0
					    mul r1.x, r0.w, c4.w
					    frc r1.y, r1.x
					    add r1.x, -r1.y, r1.x
					    mad r0.w, r1.x, -c2.y, r0.w
					    add r0.w, -r0.w, c0.x
					    cmp_pp r1.xyz, r0.w, c3.y, r0
					    cmp_pp r0.xyz, r2.w, r0, r1
					    mov r1.xy, c1
					    mad r2, v0.xyxy, r1.xyxy, c3.zzzy
					    rcp r3.x, c1.x
					    rcp r3.y, c1.y
					    mul r2, r2, r3.xyxy
					    texld_pp r4, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    dp3 r0.w, r2, c4
					    dp3 r1.z, r4, c4
					    mad r2, v0.xyxy, r1.xyxy, c6.xyxz
					    mul r2, r3.xyxy, r2
					    texld_pp r4, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    dp3 r1.w, r2, c4
					    dp3 r2.x, r4, c4
					    add r2.y, -r1.z, -r2.x
					    mad r1.z, r0.w, c3.w, -r1.z
					    add r0.w, -r0.w, r1.z
					    add r0.w, r2.x, r0.w
					    mad r0.w, r1.w, -c3.w, r0.w
					    mad r4, v0.xyxy, r1.xyxy, c6.xxzy
					    mul r4, r3.xyxy, r4
					    texld_pp r5, r4, s0
					    texld_pp r4, r4.zwzw, s0
					    dp3 r1.z, r4, c4
					    dp3 r1.w, r5, c4
					    add r2.x, r1.w, r2.y
					    add r0.w, r0.w, r1.w
					    mad r1.z, r1.z, c3.w, r2.x
					    mad r2, v0.xyxy, r1.xyxy, c6.yxzx
					    mul r2, r3.xyxy, r2
					    texld_pp r3, r2, s0
					    texld_pp r2, r2.zwzw, s0
					    dp3 r1.x, r2, c4
					    dp3 r1.y, r3, c4
					    add r1.y, r1.y, r1.z
					    mad r1.x, r1.x, -c3.w, r1.y
					    mul r1.x, r1.x, r1.x
					    mad_pp r0.w, r0.w, r0.w, r1.x
					    add_pp r0.w, -r0.w, c2.x
					    mul_pp oC0.xyz, r0.w, r0
					    mov_pp oC0.w, c2.x
					
					// approximately 89 instruction slots used (9 texture, 80 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Distortion;
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec4 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					float u_xlat11;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					float u_xlat18;
					bool u_xlatb18;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat15 = min(u_xlat0.y, u_xlat0.x);
					    u_xlat15 = min(u_xlat0.z, u_xlat15);
					    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);
					    u_xlat1.x = max(u_xlat0.z, u_xlat1.x);
					    u_xlat15 = (-u_xlat15) + u_xlat1.x;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
					    u_xlat0.x = dot(u_xlat0.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlatb2 = lessThan(u_xlat0.xxxx, vec4(0.800000012, 0.600000024, 0.300000012, 0.150000006));
					    u_xlatb0 = 0.100000001<u_xlat15;
					    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat1.xyz : vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.600000024, 0.600000024, 0.600000024);
					    u_xlat3.xyz = u_xlat0.xyz * vec3(0.800000012, 0.800000012, 0.800000012);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.300000012, 0.300000012, 0.300000012);
					    u_xlat4.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat15 = u_xlat4.y + u_xlat4.x;
					    u_xlat16 = vs_TEXCOORD0.x * _ScreenResolution.x + (-u_xlat4.y);
					    u_xlat18 = u_xlat15 * 0.100000001;
					    u_xlat18 = floor(u_xlat18);
					    u_xlat18 = (-u_xlat18) * 10.0 + u_xlat15;
					    u_xlat15 = u_xlat15 + -5.0;
					    u_xlatb18 = _Distortion>=u_xlat18;
					    u_xlat3.xyz = (bool(u_xlatb18)) ? u_xlat3.xyz : vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (u_xlatb2.x) ? u_xlat3.xyz : vec3(1.0, 1.0, 1.0);
					    u_xlat2.x = u_xlat16 * 0.100000001;
					    u_xlat2.x = floor(u_xlat2.x);
					    u_xlat2.x = (-u_xlat2.x) * 10.0 + u_xlat16;
					    u_xlat16 = u_xlat16 + -5.0;
					    u_xlatb2.x = _Distortion>=u_xlat2.x;
					    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat1.xyz : u_xlat3.xyz;
					    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat3.xyz;
					    u_xlat2.x = u_xlat15 * 0.100000001;
					    u_xlat2.x = floor(u_xlat2.x);
					    u_xlat15 = (-u_xlat2.x) * 10.0 + u_xlat15;
					    u_xlatb15 = _Distortion>=u_xlat15;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat0.xyz = (u_xlatb2.z) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat15 = u_xlat16 * 0.100000001;
					    u_xlat15 = floor(u_xlat15);
					    u_xlat15 = (-u_xlat15) * 10.0 + u_xlat16;
					    u_xlatb15 = _Distortion>=u_xlat15;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(-1.0, -1.0, -1.0, 0.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / _ScreenResolution.xyxy;
					    u_xlat1 = u_xlat1 * u_xlat2;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.x = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat3 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(1.0, -1.0, 1.0, 0.0);
					    u_xlat3 = u_xlat2 * u_xlat3;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat6 = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat11 = dot(u_xlat4.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat16 = (-u_xlat11) + (-u_xlat1.x);
					    u_xlat1.x = u_xlat15 * -2.0 + (-u_xlat1.x);
					    u_xlat15 = (-u_xlat15) + u_xlat1.x;
					    u_xlat15 = u_xlat11 + u_xlat15;
					    u_xlat15 = u_xlat6 * 2.0 + u_xlat15;
					    u_xlat3 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(1.0, 1.0, 0.0, -1.0);
					    u_xlat3 = u_xlat2 * u_xlat3;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat1.x = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat6 = dot(u_xlat4.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat11 = u_xlat6 + u_xlat16;
					    u_xlat15 = u_xlat15 + u_xlat6;
					    u_xlat1.x = u_xlat1.x * -2.0 + u_xlat11;
					    u_xlat3 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(-1.0, 1.0, 0.0, 1.0);
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat6 = dot(u_xlat2.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat11 = dot(u_xlat3.xyz, vec3(0.212599993, 0.715200007, 0.0722000003));
					    u_xlat1.x = u_xlat11 + u_xlat1.x;
					    u_xlat1.x = u_xlat6 * 2.0 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + u_xlat1.x;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}