Shader "CameraFilterPack/Drawing_CellShading2" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_EdgeSize ("_EdgeSize", Range(0, 1)) = 0
		_ColorLevel ("_ColorLevel", Range(0, 10)) = 7
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 5162
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _ColorLevel;
					//   float _Distortion;
					//   float _EdgeSize;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _Distortion       c0       1
					//   _ScreenResolution c1       1
					//   _EdgeSize         c2       1
					//   _ColorLevel       c3       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c4, 0.111111112, 0, 1, -1
					    def c5, 0.5, 0.0500000007, 0, 0
					    def c6, 0, 0, -2, 0.160000011
					    def c7, 1, 0, -1, 0.777777791
					    defi i0, 5, 0, 0, 0
					    defi i1, 3, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c1, v0
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mov_pp r2.zw, c6.x
					    mov r3.xyz, c6.x
					    mov r1.z, c6.z
					    rep i0
					      mov r4.x, c6.x
					      dp2add r5.x, r1.z, c0.x, r4.x
					      mov r4.yzw, r3.xxyz
					      mov r1.w, c6.z
					      rep i0
					        dp2add r5.y, r1.w, c0.x, r4.x
					        mad r5.yz, v0.xxyw, c1.xxyw, r5.xxyw
					        mul r2.xy, r1, r5.yzzw
					        texldl_pp r6, r2, s0
					        mad r4.yzw, r6.xxyz, c6.w, r4
					        add r1.w, r1.w, c7.x
					      endrep
					      mov r3.xyz, r4.yzww
					      add r1.z, r1.z, c7.x
					    endrep
					    mov_pp r2.zw, c6.x
					    mov r4, c6.x
					    mov r1.z, c7.z
					    rep i1
					      mov r5.y, -r1.z
					      mov r6, r4
					      mov r1.w, c7.z
					      rep i1
					        mov r5.x, -r1.w
					        mad r5.xz, v0.xyyw, c1.xyyw, r5.xyyw
					        mul r2.xy, r1, r5.xzzw
					        texldl r7, r2, s0
					        add_pp r6, r6, r7
					        add r1.w, r1.w, c7.x
					      endrep
					      mov_pp r4, r6
					      add r1.z, r1.z, c7.x
					    endrep
					    mul_pp r2, r4, c7.w
					    frc_pp r4, r2
					    add r2, r2, -r4
					    rcp r1.z, c3.x
					    mul_pp r4, r1.z, r2
					    mov r0.zw, c7.xyxz
					    mov_pp r5.zw, c6.x
					    mov r6, c6.x
					    mov r1.w, c7.z
					    rep i1
					      mad r7.y, v0.y, c1.y, -r1.w
					      mov r8, r6
					      mov r3.w, c7.z
					      rep i1
					        mov r7.x, -r3.w
					        add r7.xz, r0, r7.xyyw
					        mul r5.xy, r1, r7.xzzw
					        texldl r9, r5, s0
					        add_pp r8, r8, r9
					        add r3.w, r3.w, c7.x
					      endrep
					      mov_pp r6, r8
					      add r1.w, r1.w, c7.x
					    endrep
					    mov_pp r5.zw, c6.x
					    mov r7, c6.x
					    mov r0.z, c7.z
					    rep i1
					      mad r8.y, v0.y, c1.y, -r0.z
					      mov r9, r7
					      mov r1.w, c7.z
					      rep i1
					        mov r8.x, -r1.w
					        add r8.xz, r0.xyww, r8.xyyw
					        mul r5.xy, r1, r8.xzzw
					        texldl r10, r5, s0
					        add_pp r9, r9, r10
					        add r1.w, r1.w, c7.x
					      endrep
					      mov_pp r7, r9
					      add r0.z, r0.z, c7.x
					    endrep
					    mul r5, r7, c4.x
					    mad r5, r6, c4.x, -r5
					    mul r0.xy, r0.y, c4.yzzw
					    add r0.zw, r0.xyxy, c4.xyzy
					    mov_pp r6.zw, c6.x
					    mov r7, c6.x
					    mov r1.w, c7.z
					    rep i1
					      mov r8.y, -r1.w
					      mov r9, r7
					      mov r3.w, c7.z
					      rep i1
					        mad r8.x, v0.x, c1.x, -r3.w
					        add r8.xz, r0.zyww, r8.xyyw
					        mul r6.xy, r1, r8.xzzw
					        texldl r10, r6, s0
					        add_pp r9, r9, r10
					        add r3.w, r3.w, c7.x
					      endrep
					      mov_pp r7, r9
					      add r1.w, r1.w, c7.x
					    endrep
					    add r0.xy, r0, c4.wyzw
					    mov_pp r6.zw, c6.x
					    mov r8, c6.x
					    mov r0.z, c7.z
					    rep i1
					      mov r9.y, -r0.z
					      mov r10, r8
					      mov r0.w, c7.z
					      rep i1
					        mad r9.x, v0.x, c1.x, -r0.w
					        add r9.xz, r0.xyyw, r9.xyyw
					        mul r6.xy, r1, r9.xzzw
					        texldl r11, r6, s0
					        add_pp r10, r10, r11
					        add r0.w, r0.w, c7.x
					      endrep
					      mov_pp r8, r10
					      add r0.z, r0.z, c7.x
					    endrep
					    mul r0, r8, c4.x
					    mad r0, r7, c4.x, -r0
					    add_pp r0, r0_abs, r5_abs
					    mul_pp r0, r0, c5.x
					    mul r3.xyz, r3, c5.x
					    mov r3.w, -c6.z
					    mad r1, r2, -r1.z, r3
					    mad_pp r1, c0.x, r1, r4
					    mov r2.y, c5.y
					    add r2.x, r2.y, c2.x
					    dp4_pp r0.x, r0, r0
					    rsq_pp r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, r2.x
					    cmp oC0.xyz, r0.x, r1, c6.x
					    mov_pp oC0.w, r1.w
					
					// approximately 183 instruction slots used (12 texture, 171 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Distortion;
						vec4 _ScreenResolution;
						float _EdgeSize;
						float _ColorLevel;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					ivec2 u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec4 u_xlat4;
					int u_xlati4;
					bool u_xlatb4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat9;
					vec2 u_xlat10;
					float u_xlat17;
					int u_xlati17;
					float u_xlat18;
					ivec2 u_xlati18;
					int u_xlati19;
					int u_xlati20;
					int u_xlati21;
					int u_xlati24;
					float u_xlat25;
					bool u_xlatb25;
					bool u_xlatb26;
					bool u_xlatb27;
					int u_xlati28;
					bool u_xlatb28;
					int u_xlati29;
					bool u_xlatb29;
					vec4 TempArray0[6];
					void main()
					{
					    TempArray0[5].x = 0.0;
					    TempArray0[2].x = 0.400000006;
					    TempArray0[1].x = 0.400000006;
					    TempArray0[3].x = 0.400000006;
					    TempArray0[0].x = 0.400000006;
					    TempArray0[4].x = 0.400000006;
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlati24 = int(int(0xFFFFFFFEu));
					    while(true){
					        u_xlatb1 = 2<u_xlati24;
					        if(u_xlatb1){break;}
					        u_xlati1.xy = ivec2(u_xlati24) + ivec2(2, 1);
					        u_xlat1.x = TempArray0[u_xlati1.x].x;
					        u_xlat17 = float(u_xlati24);
					        u_xlat2.x = dot(vec2(u_xlat17), vec2(vec2(_Distortion, _Distortion)));
					        u_xlat3.xyz = u_xlat0.xyz;
					        u_xlati17 = int(0xFFFFFFFEu);
					        while(true){
					            u_xlatb25 = 2<u_xlati17;
					            if(u_xlatb25){break;}
					            u_xlati18.xy = ivec2(u_xlati17) + ivec2(2, 1);
					            u_xlat25 = TempArray0[u_xlati18.x].x;
					            u_xlat25 = u_xlat1.x * u_xlat25;
					            u_xlat18 = float(u_xlati17);
					            u_xlat2.y = dot(vec2(u_xlat18), vec2(vec2(_Distortion, _Distortion)));
					            u_xlat10.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat2.xy;
					            u_xlat10.xy = u_xlat10.xy / _ScreenResolution.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					            u_xlat3.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat3.xyz;
					            u_xlati17 = u_xlati18.y;
					        }
					        u_xlat0.xyz = u_xlat3.xyz;
					        u_xlati24 = u_xlati1.y;
					    }
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    for(int u_xlati_loop_1 = int(0xFFFFFFFFu) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.y = float((-u_xlati_loop_1));
					        u_xlat3 = u_xlat1;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat2.x = float((-u_xlati_loop_2));
					            u_xlat2.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat2.xy;
					            u_xlat2.xw = u_xlat2.xw / _ScreenResolution.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat2.xw, 0.0);
					            u_xlat3 = u_xlat3 + u_xlat4;
					        }
					        u_xlat1 = u_xlat3;
					    }
					    u_xlat1 = u_xlat1 * vec4(0.777777791, 0.777777791, 0.777777791, 0.777777791);
					    u_xlat1 = floor(u_xlat1);
					    u_xlat1 = u_xlat1 / vec4(vec4(_ColorLevel, _ColorLevel, _ColorLevel, _ColorLevel));
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    for(int u_xlati_loop_3 = int(0xFFFFFFFFu) ; u_xlati_loop_3<=1 ; u_xlati_loop_3++)
					    {
					        u_xlati3 = (-u_xlati_loop_3) + 1;
					        u_xlat3.y = float(u_xlati3);
					        u_xlat4 = u_xlat2;
					        for(int u_xlati_loop_4 = int(0xFFFFFFFFu) ; u_xlati_loop_4<=1 ; u_xlati_loop_4++)
					        {
					            u_xlat3.x = float((-u_xlati_loop_4));
					            u_xlat3.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat3.xy;
					            u_xlat3.xw = u_xlat3.xw / _ScreenResolution.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.xw, 0.0);
					            u_xlat4 = u_xlat4 + u_xlat5;
					        }
					        u_xlat2 = u_xlat4;
					    }
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_5 = int(0xFFFFFFFFu) ; u_xlati_loop_5<=1 ; u_xlati_loop_5++)
					    {
					        u_xlati4 = (-u_xlati_loop_5) + int(0xFFFFFFFFu);
					        u_xlat4.y = float(u_xlati4);
					        u_xlat5 = u_xlat3;
					        for(int u_xlati_loop_6 = int(0xFFFFFFFFu) ; u_xlati_loop_6<=1 ; u_xlati_loop_6++)
					        {
					            u_xlat4.x = float((-u_xlati_loop_6));
					            u_xlat4.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat4.xy;
					            u_xlat4.xw = u_xlat4.xw / _ScreenResolution.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat4.xw, 0.0);
					            u_xlat5 = u_xlat5 + u_xlat6;
					        }
					        u_xlat3 = u_xlat5;
					    }
					    u_xlat3 = u_xlat3 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    u_xlat2 = u_xlat2 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112) + (-u_xlat3);
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_7 = int(0xFFFFFFFFu) ; u_xlati_loop_7<=1 ; u_xlati_loop_7++)
					    {
					        u_xlat4.y = float((-u_xlati_loop_7));
					        u_xlat5 = u_xlat3;
					        for(int u_xlati_loop_8 = int(0xFFFFFFFFu) ; u_xlati_loop_8<=1 ; u_xlati_loop_8++)
					        {
					            u_xlati28 = (-u_xlati_loop_8) + 1;
					            u_xlat4.x = float(u_xlati28);
					            u_xlat4.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat4.xy;
					            u_xlat4.xw = u_xlat4.xw / _ScreenResolution.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat4.xw, 0.0);
					            u_xlat5 = u_xlat5 + u_xlat6;
					        }
					        u_xlat3 = u_xlat5;
					    }
					    u_xlat4.x = float(0.0);
					    u_xlat4.y = float(0.0);
					    u_xlat4.z = float(0.0);
					    u_xlat4.w = float(0.0);
					    for(int u_xlati_loop_9 = int(0xFFFFFFFFu) ; u_xlati_loop_9<=1 ; u_xlati_loop_9++)
					    {
					        u_xlat5.y = float((-u_xlati_loop_9));
					        u_xlat6 = u_xlat4;
					        for(int u_xlati_loop_10 = int(0xFFFFFFFFu) ; u_xlati_loop_10<=1 ; u_xlati_loop_10++)
					        {
					            u_xlati29 = (-u_xlati_loop_10) + int(0xFFFFFFFFu);
					            u_xlat5.x = float(u_xlati29);
					            u_xlat5.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat5.xy;
					            u_xlat5.xw = u_xlat5.xw / _ScreenResolution.xy;
					            u_xlat7 = textureLod(_MainTex, u_xlat5.xw, 0.0);
					            u_xlat6 = u_xlat6 + u_xlat7;
					        }
					        u_xlat4 = u_xlat6;
					    }
					    u_xlat4 = u_xlat4 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    u_xlat3 = u_xlat3 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112) + (-u_xlat4);
					    u_xlat2 = abs(u_xlat2) + abs(u_xlat3);
					    u_xlat2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5);
					    u_xlat0.w = 2.0;
					    u_xlat0 = (-u_xlat1) + u_xlat0;
					    u_xlat0 = vec4(vec4(_Distortion, _Distortion, _Distortion, _Distortion)) * u_xlat0 + u_xlat1;
					    u_xlat1.x = _EdgeSize + 0.0500000007;
					    u_xlat9 = dot(u_xlat2, u_xlat2);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlatb1 = u_xlat1.x<u_xlat9;
					    SV_Target0.xyz = (bool(u_xlatb1)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
			}
		}
	}
}