Shader "CameraFilterPack/Drawing_CellShading" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_EdgeSize ("_EdgeSize", Range(0, 1)) = 0
		_ColorLevel ("_ColorLevel", Range(0, 10)) = 7
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 22426
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _ColorLevel;
					//   float _EdgeSize;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _EdgeSize         c1       1
					//   _ColorLevel       c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 0.111111112, 0.777777791, 0.5, 0.0500000007
					    def c4, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c0, v0
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mov_pp r2.zw, c4.x
					    mov r3, c4.x
					    mov r1.z, c4.z
					    rep i0
					      mov r4.y, -r1.z
					      mov r5, r3
					      mov r1.w, c4.z
					      rep i0
					        mov r4.x, -r1.w
					        mad r4.xz, v0.xyyw, c0.xyyw, r4.xyyw
					        mul r2.xy, r1, r4.xzzw
					        texldl r6, r2, s0
					        add_pp r5, r5, r6
					        add r1.w, r1.w, c4.w
					      endrep
					      mov_pp r3, r5
					      add r1.z, r1.z, c4.w
					    endrep
					    mul_pp oC0.w, r3.w, c3.x
					    mul_pp r2.xyz, r3, c3.y
					    frc_pp r3.xyz, r2
					    add r2.xyz, r2, -r3
					    rcp r1.z, c2.x
					    mul_pp r2.xyz, r1.z, r2
					    mov r0.zw, c4.xywz
					    mov_pp r3.zw, c4.x
					    mov r4, c4.x
					    mov r1.z, c4.z
					    rep i0
					      mad r5.y, v0.y, c0.y, -r1.z
					      mov r6, r4
					      mov r1.w, c4.z
					      rep i0
					        mov r5.x, -r1.w
					        add r5.xz, r0, r5.xyyw
					        mul r3.xy, r1, r5.xzzw
					        texldl r7, r3, s0
					        add_pp r6, r6, r7
					        add r1.w, r1.w, c4.w
					      endrep
					      mov_pp r4, r6
					      add r1.z, r1.z, c4.w
					    endrep
					    mov_pp r3.zw, c4.x
					    mov r5, c4.x
					    mov r0.z, c4.z
					    rep i0
					      mad r6.y, v0.y, c0.y, -r0.z
					      mov r7, r5
					      mov r1.z, c4.z
					      rep i0
					        mov r6.x, -r1.z
					        add r6.xz, r0.xyww, r6.xyyw
					        mul r3.xy, r1, r6.xzzw
					        texldl r8, r3, s0
					        add_pp r7, r7, r8
					        add r1.z, r1.z, c4.w
					      endrep
					      mov_pp r5, r7
					      add r0.z, r0.z, c4.w
					    endrep
					    mul r3, r5, c3.x
					    mad r3, r4, c3.x, -r3
					    mul r0.xy, r0.y, c4.xwzw
					    add r0.zw, r0.xyxy, c4.xywx
					    mov_pp r4.zw, c4.x
					    mov r5, c4.x
					    mov r1.z, c4.z
					    rep i0
					      mov r6.y, -r1.z
					      mov r7, r5
					      mov r1.w, c4.z
					      rep i0
					        mad r6.x, v0.x, c0.x, -r1.w
					        add r6.xz, r0.zyww, r6.xyyw
					        mul r4.xy, r1, r6.xzzw
					        texldl r8, r4, s0
					        add_pp r7, r7, r8
					        add r1.w, r1.w, c4.w
					      endrep
					      mov_pp r5, r7
					      add r1.z, r1.z, c4.w
					    endrep
					    add r0.xy, r0, c4.zxzw
					    mov_pp r4.zw, c4.x
					    mov r6, c4.x
					    mov r0.z, c4.z
					    rep i0
					      mov r7.y, -r0.z
					      mov r8, r6
					      mov r0.w, c4.z
					      rep i0
					        mad r7.x, v0.x, c0.x, -r0.w
					        add r1.zw, r0.xyxy, r7.xyxy
					        mul r4.xy, r1, r1.zwzw
					        texldl r9, r4, s0
					        add_pp r8, r8, r9
					        add r0.w, r0.w, c4.w
					      endrep
					      mov_pp r6, r8
					      add r0.z, r0.z, c4.w
					    endrep
					    mul r0, r6, c3.x
					    mad r0, r5, c3.x, -r0
					    add_pp r0, r0_abs, r3_abs
					    mul_pp r0, r0, c3.z
					    mov r1.w, c3.w
					    add r1.x, r1.w, c1.x
					    dp4_pp r0.x, r0, r0
					    rsq_pp r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, r1.x
					    cmp oC0.xyz, r0.x, r2, c4.x
					
					// approximately 151 instruction slots used (10 texture, 141 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _EdgeSize;
						float _ColorLevel;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					int u_xlati1;
					vec4 u_xlat2;
					int u_xlati2;
					bool u_xlatb2;
					vec4 u_xlat3;
					int u_xlati3;
					bool u_xlatb3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					int u_xlati8;
					bool u_xlatb8;
					vec2 u_xlat15;
					bool u_xlatb15;
					int u_xlati16;
					int u_xlati17;
					int u_xlati18;
					float u_xlat21;
					int u_xlati21;
					bool u_xlatb21;
					bool u_xlatb23;
					int u_xlati24;
					bool u_xlatb24;
					int u_xlati25;
					bool u_xlatb25;
					void main()
					{
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.w = float(0.0);
					    for(int u_xlati_loop_1 = int(0xFFFFFFFFu) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)
					    {
					        u_xlat2.y = float((-u_xlati_loop_1));
					        u_xlat3 = u_xlat0;
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat2.x = float((-u_xlati_loop_2));
					            u_xlat15.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat2.xy;
					            u_xlat15.xy = u_xlat15.xy / _ScreenResolution.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat15.xy, 0.0);
					            u_xlat3 = u_xlat3 + u_xlat4;
					        }
					        u_xlat0 = u_xlat3;
					    }
					    SV_Target0.w = u_xlat0.w * 0.111111112;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.777777791, 0.777777791, 0.777777791);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz / vec3(vec3(_ColorLevel, _ColorLevel, _ColorLevel));
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    for(int u_xlati_loop_3 = int(0xFFFFFFFFu) ; u_xlati_loop_3<=1 ; u_xlati_loop_3++)
					    {
					        u_xlati2 = (-u_xlati_loop_3) + 1;
					        u_xlat2.y = float(u_xlati2);
					        u_xlat3 = u_xlat1;
					        for(int u_xlati_loop_4 = int(0xFFFFFFFFu) ; u_xlati_loop_4<=1 ; u_xlati_loop_4++)
					        {
					            u_xlat2.x = float((-u_xlati_loop_4));
					            u_xlat2.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat2.xy;
					            u_xlat2.xw = u_xlat2.xw / _ScreenResolution.xy;
					            u_xlat4 = textureLod(_MainTex, u_xlat2.xw, 0.0);
					            u_xlat3 = u_xlat3 + u_xlat4;
					        }
					        u_xlat1 = u_xlat3;
					    }
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    for(int u_xlati_loop_5 = int(0xFFFFFFFFu) ; u_xlati_loop_5<=1 ; u_xlati_loop_5++)
					    {
					        u_xlati3 = (-u_xlati_loop_5) + int(0xFFFFFFFFu);
					        u_xlat3.y = float(u_xlati3);
					        u_xlat4 = u_xlat2;
					        for(int u_xlati_loop_6 = int(0xFFFFFFFFu) ; u_xlati_loop_6<=1 ; u_xlati_loop_6++)
					        {
					            u_xlat3.x = float((-u_xlati_loop_6));
					            u_xlat3.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat3.xy;
					            u_xlat3.xw = u_xlat3.xw / _ScreenResolution.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.xw, 0.0);
					            u_xlat4 = u_xlat4 + u_xlat5;
					        }
					        u_xlat2 = u_xlat4;
					    }
					    u_xlat2 = u_xlat2 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    u_xlat1 = u_xlat1 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112) + (-u_xlat2);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    for(int u_xlati_loop_7 = int(0xFFFFFFFFu) ; u_xlati_loop_7<=1 ; u_xlati_loop_7++)
					    {
					        u_xlat3.y = float((-u_xlati_loop_7));
					        u_xlat4 = u_xlat2;
					        for(int u_xlati_loop_8 = int(0xFFFFFFFFu) ; u_xlati_loop_8<=1 ; u_xlati_loop_8++)
					        {
					            u_xlati24 = (-u_xlati_loop_8) + 1;
					            u_xlat3.x = float(u_xlati24);
					            u_xlat3.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat3.xy;
					            u_xlat3.xw = u_xlat3.xw / _ScreenResolution.xy;
					            u_xlat5 = textureLod(_MainTex, u_xlat3.xw, 0.0);
					            u_xlat4 = u_xlat4 + u_xlat5;
					        }
					        u_xlat2 = u_xlat4;
					    }
					    u_xlat3.x = float(0.0);
					    u_xlat3.y = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.w = float(0.0);
					    for(int u_xlati_loop_9 = int(0xFFFFFFFFu) ; u_xlati_loop_9<=1 ; u_xlati_loop_9++)
					    {
					        u_xlat4.y = float((-u_xlati_loop_9));
					        u_xlat5 = u_xlat3;
					        for(int u_xlati_loop_10 = int(0xFFFFFFFFu) ; u_xlati_loop_10<=1 ; u_xlati_loop_10++)
					        {
					            u_xlati25 = (-u_xlati_loop_10) + int(0xFFFFFFFFu);
					            u_xlat4.x = float(u_xlati25);
					            u_xlat4.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy + u_xlat4.xy;
					            u_xlat4.xw = u_xlat4.xw / _ScreenResolution.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat4.xw, 0.0);
					            u_xlat5 = u_xlat5 + u_xlat6;
					        }
					        u_xlat3 = u_xlat5;
					    }
					    u_xlat3 = u_xlat3 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    u_xlat2 = u_xlat2 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112) + (-u_xlat3);
					    u_xlat1 = abs(u_xlat1) + abs(u_xlat2);
					    u_xlat1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat21 = _EdgeSize + 0.0500000007;
					    u_xlat1.x = dot(u_xlat1, u_xlat1);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlatb21 = u_xlat21<u_xlat1.x;
					    SV_Target0.xyz = (bool(u_xlatb21)) ? vec3(0.0, 0.0, 0.0) : u_xlat0.xyz;
					    return;
					}"
				}
			}
		}
	}
}