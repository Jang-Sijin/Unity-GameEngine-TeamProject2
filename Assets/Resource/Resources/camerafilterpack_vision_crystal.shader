Shader "CameraFilterPack/Vision_Crystal" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 57186
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _Time;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Time        c0       1
					//   _Value       c1       1
					//   _Value2      c2       1
					//   _Value3      c3       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c4, 20, 0.0700000003, 0.140000001, 0.210000008
					    def c5, 6.28318548, -3.14159274, 9, 0.00999999978
					    def c6, -0.5, 0, 0.159154937, 0.5
					    def c7, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0, c4
					    mad r0.xyz, c0.x, r0.x, r0.yzww
					    add r1.xyz, r0, r0
					    mad r0.xyz, r0, c6.z, c6.w
					    frc r0.xyz, r0
					    mad r0.xyz, r0, c5.x, c5.y
					    add r2.x, c2.x, v0.x
					    add r2.y, c3.x, v0.y
					    add r2.zw, r2.xyxy, c6.x
					    dp2add r0.w, r2.zwzw, r2.zwzw, c6.y
					    rsq r0.w, r0.w
					    rcp r1.w, r0.w
					    mad r1.xyz, r1.w, c5.z, -r1
					    mad r1.xyz, r1, c6.z, c6.w
					    frc r1.xyz, r1
					    mad r1.xyz, r1, c5.x, c5.y
					    sincos r3.y, r1.x
					    sincos r4.y, r0.x
					    add r0.x, r4.y, c1.x
					    mul r1.xw, r0.w, r2.zyzw
					    mul r2.zw, r0.x, r1.xyxw
					    mad r2.zw, r2, r3_abs.y, r2.xyxy
					    frc r3.xy, r2_abs.zwzw
					    cmp r2.zw, r2, r3.xyxy, -r3.xyxy
					    add r2.zw, r2, c6.x
					    dp2add r0.x, r2_abs.zwzw, r2_abs.zwzw, c6.y
					    rsq r0.x, r0.x
					    mul r3.x, r0.x, c5.w
					    sincos r4.y, r0.y
					    sincos r5.y, r0.z
					    add r0.x, r5.y, c1.x
					    mul r0.xy, r0.x, r1.xwzw
					    add r0.z, r4.y, c1.x
					    mul r1.xw, r0.z, r1
					    sincos r4.y, r1.y
					    sincos r5.y, r1.z
					    mad r0.xy, r0, r5_abs.y, r2
					    mad r1.xy, r1.xwzw, r4_abs.y, r2
					    frc r1.zw, r1_abs.xyxy
					    cmp r1.xy, r1, r1.zwzw, -r1.zwzw
					    add r1.xy, r1, c6.x
					    dp2add r0.z, r1_abs, r1_abs, c6.y
					    rsq r0.z, r0.z
					    frc r1.xy, r0_abs
					    cmp r0.xy, r0, r1, -r1
					    add r0.xy, r0, c6.x
					    dp2add r0.x, r0_abs, r0_abs, c6.y
					    rsq r0.x, r0.x
					    mul r3.yz, r0.xzxw, c5.w
					    texld r1, v0, s0
					    add r0.xyz, r1, r3
					    mul oC0.xyz, r0.w, r0
					    mov oC0.w, c7.x
					
					// approximately 99 instruction slots used (1 texture, 98 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Value;
						float _Value2;
						float _Value3;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat9;
					vec2 u_xlat10;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = _Time.xxx * vec3(20.0, 20.0, 20.0) + vec3(0.0700000003, 0.140000001, 0.210000008);
					    u_xlat1.xyz = sin(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + vec3(vec3(_Value, _Value, _Value));
					    u_xlat2.xy = vs_TEXCOORD0.xy + vec2(_Value2, _Value3);
					    u_xlat10.xy = u_xlat2.xy + vec2(-0.5, -0.5);
					    u_xlat12 = dot(u_xlat10.xy, u_xlat10.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat10.xy = u_xlat10.xy / vec2(u_xlat12);
					    u_xlat9.xy = u_xlat1.zz * u_xlat10.xy;
					    u_xlat3 = u_xlat1.xxyy * u_xlat10.xyxy;
					    u_xlat0.xyz = vec3(u_xlat12) * vec3(9.0, 9.0, 9.0) + (-u_xlat0.xyz);
					    u_xlat0.xyz = sin(u_xlat0.xyz);
					    u_xlat1.xy = u_xlat9.xy * abs(u_xlat0.zz) + u_xlat2.xy;
					    u_xlat2 = u_xlat3 * abs(u_xlat0.xxyy) + u_xlat2.xyxy;
					    u_xlatb0.xy = greaterThanEqual(u_xlat1.xyxx, (-u_xlat1.xyxx)).xy;
					    u_xlat1.xy = fract(abs(u_xlat1.xy));
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : (-u_xlat1.x);
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : (-u_xlat1.y);
					    u_xlat0.xy = u_xlat0.xy + vec2(-0.5, -0.5);
					    u_xlat0.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.z = 0.00999999978 / u_xlat0.x;
					    u_xlatb1 = greaterThanEqual(u_xlat2, (-u_xlat2));
					    u_xlat2 = fract(abs(u_xlat2));
					    u_xlat1.x = (u_xlatb1.x) ? u_xlat2.x : (-u_xlat2.x);
					    u_xlat1.y = (u_xlatb1.y) ? u_xlat2.y : (-u_xlat2.y);
					    u_xlat1.z = (u_xlatb1.z) ? u_xlat2.z : (-u_xlat2.z);
					    u_xlat1.w = (u_xlatb1.w) ? u_xlat2.w : (-u_xlat2.w);
					    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
					    u_xlat1.y = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
					    u_xlat1.xy = sqrt(u_xlat1.xy);
					    u_xlat0.xy = vec2(0.00999999978, 0.00999999978) / u_xlat1.xy;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz / vec3(u_xlat12);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}