Shader "CameraFilterPack/Blur_Bloom" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Amount ("_Amount", Range(0, 20)) = 5
		_Glow ("_Glow", Range(0, 20)) = 5
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 25635
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Amount;
					//   float _Glow;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Amount           c1       1
					//   _Glow             c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 0, 2, 4, 0.125
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    mul r0.x, r0.x, c1.x
					    mov r1.x, -r0.x
					    rcp r2.x, c0.y
					    mul r1.w, r2.x, c1.x
					    mov r1.y, -r1.w
					    add r2, r1.xyxw, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mov r1.z, c3.x
					    add r4, r1.xzzy, v0.xyxy
					    mov r0.yw, r1
					    add r1.xy, r1.zwzw, v0
					    texld r1, r1, s0
					    add r5, r0.xyxw, v0.xyxy
					    texld r6, r4, s0
					    texld r4, r4.zwzw, s0
					    mad r3, r6, c3.y, r3
					    add r2, r2, r3
					    mad r2, r4, c3.y, r2
					    texld r3, v0, s0
					    mad r2, r3, c3.z, r2
					    mad r1, r1, c3.y, r2
					    texld r2, r5, s0
					    texld r4, r5.zwzw, s0
					    add r1, r1, r2
					    mov r0.z, c3.x
					    add r0.xy, r0.xzzw, v0
					    texld r0, r0, s0
					    mad r0, r0, c3.y, r1
					    add r0, r4, r0
					    mad r0.xyz, r0, c3.w, -r3
					    mul r0.w, r0.w, c3.w
					    mov oC0.w, r0.w
					    mad oC0.xyz, c2.x, r0, r3
					
					// approximately 35 instruction slots used (9 texture, 26 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec3 ImmCB_0_0_0[4];
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Amount;
						float _Glow;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					ivec3 u_xlati3;
					vec2 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec3 u_xlat8;
					int u_xlati16;
					float u_xlat24;
					int u_xlati24;
					bool u_xlatb24;
					float u_xlat25;
					bool u_xlatb25;
					void main()
					{
						ImmCB_0_0_0[0] = vec3(1.0, 0.0, 0.0);
						ImmCB_0_0_0[1] = vec3(0.0, 1.0, 0.0);
						ImmCB_0_0_0[2] = vec3(0.0, 0.0, 1.0);
						ImmCB_0_0_0[3] = vec3(0.0, 0.0, 0.0);
					    u_xlat0.xy = vec2(1.0, 1.0) / _ScreenResolution.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(_Amount);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlati16 = 0;
					    while(true){
					        u_xlatb24 = u_xlati16>=3;
					        if(u_xlatb24){break;}
					        u_xlati3.xy = ivec2(u_xlati16) + ivec2(int(0xFFFFFFFFu), 1);
					        u_xlat24 = float(u_xlati3.x);
					        u_xlat4.x = u_xlat0.x * u_xlat24;
					        u_xlat5.x = dot(vec3(1.0, 2.0, 1.0), ImmCB_0_0_0[u_xlati16].xyz);
					        u_xlat5.y = dot(vec3(2.0, 4.0, 2.0), ImmCB_0_0_0[u_xlati16].xyz);
					        u_xlat5.z = dot(vec3(1.0, 2.0, 1.0), ImmCB_0_0_0[u_xlati16].xyz);
					        u_xlat6 = u_xlat2;
					        u_xlati24 = 0;
					        while(true){
					            u_xlatb25 = u_xlati24>=3;
					            if(u_xlatb25){break;}
					            u_xlati3.xz = ivec2(u_xlati24) + ivec2(int(0xFFFFFFFFu), 1);
					            u_xlat25 = float(u_xlati3.x);
					            u_xlat4.y = u_xlat0.y * u_xlat25;
					            u_xlat3.xw = u_xlat4.xy + vs_TEXCOORD0.xy;
					            u_xlat25 = dot(u_xlat5.xyz, ImmCB_0_0_0[u_xlati24].xyz);
					            u_xlat7 = texture(_MainTex, u_xlat3.xw);
					            u_xlat6 = vec4(u_xlat25) * u_xlat7 + u_xlat6;
					            u_xlati24 = u_xlati3.z;
					        }
					        u_xlat2 = u_xlat6;
					        u_xlati16 = u_xlati3.y;
					    }
					    u_xlat0.x = u_xlat2.w * 0.125;
					    u_xlat8.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + (-u_xlat1.xyz);
					    SV_Target0.xyz = vec3(vec3(_Glow, _Glow, _Glow)) * u_xlat8.xyz + u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.x;
					    return;
					}"
				}
			}
		}
	}
}