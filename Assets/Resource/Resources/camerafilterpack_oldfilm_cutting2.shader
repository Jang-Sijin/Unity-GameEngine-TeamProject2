Shader "CameraFilterPack/OldFilm_Cutting2" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_MainTex2 ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 41484
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _MainTex2;
					//   float2 _MainTex_TexelSize;
					//   float _Speed;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _TimeX             c0       1
					//   _Speed             c1       1
					//   _Value             c2       1
					//   _Value2            c3       1
					//   _Value3            c4       1
					//   _MainTex_TexelSize c5       1
					//   _MainTex           s0       1
					//   _MainTex2          s1       1
					//
					
					    ps_3_0
					    def c6, 15, 0, 1, 43758.5469
					    def c7, 12.9898005, 78.2330017, 0, 23
					    def c8, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c9, 0.00999999978, 16, 0.400000006, 0
					    def c10, 0.212599993, 0.715200007, 0.0722000003, 0
					    def c11, -0.00800000038, 0.00400000019, -2, 1
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.xy, c6
					    mul r0.x, r0.x, c0.x
					    frc r0.z, r0.x
					    add r0.x, r0.x, -r0.z
					    cmp r0.z, -r0.z, c6.y, c6.z
					    cmp r0.y, c0.x, r0.y, r0.z
					    add r0.x, r0.y, r0.x
					    dp2add r0.y, r0.x, c7, c7.z
					    add r0.x, r0.x, c7.w
					    dp2add r0.x, r0.x, c7, c7.z
					    mad r0.x, r0.x, c8.x, c8.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c8.z, c8.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c6.w
					    frc r1.y, r0.x
					    mad r0.x, r0.y, c8.x, c8.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c8.z, c8.w
					    sincos r2.y, r0.x
					    mul r0.x, r2.y, c6.w
					    frc r1.x, r0.x
					    mad r0.xy, r1, c11, v0
					    texld r0, r0, s0
					    mad r1.xzw, r0.xyyz, c11.z, c11.w
					    mad r0.xyz, c4.x, r1.xzww, r0
					    add r1.xz, c6.z, -v0.xyyw
					    mul r0.w, r1.x, v0.x
					    mul r0.w, r0.w, v0.y
					    mul r0.w, r1.z, r0.w
					    cmp r1.xz, c5.y, v0.xyyw, r1
					    mul r0.w, r0.w, c9.y
					    pow r1.w, r0.w, c9.z
					    add r0.w, r1.w, c3.x
					    mul r0.xyz, r0.w, r0
					    dp3 r0.x, c10, r0
					    mad r2.y, r1.y, c9.x, r1.z
					    mov r3.x, c0.x
					    mad r2.x, r3.x, c1.x, r1.x
					    texld r1, r2, s1
					    mad r0.xyz, r1, -c11.z, r0.x
					    add_pp oC0.xyz, r0, -c2.x
					    mov_pp oC0.w, c6.z
					
					// approximately 61 instruction slots used (2 texture, 59 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Speed;
						float _Value;
						float _Value2;
						float _Value3;
						vec4 unused_0_6;
						vec2 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _MainTex2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					void main()
					{
					    u_xlat0.x = _TimeX * 15.0;
					    u_xlat0.x = trunc(u_xlat0.x);
					    u_xlat2.x = dot(u_xlat0.xx, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = u_xlat0.x + 23.0;
					    u_xlat0.x = dot(u_xlat0.xx, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 43758.5469;
					    u_xlat1.y = fract(u_xlat0.x);
					    u_xlat0.x = sin(u_xlat2.x);
					    u_xlat0.x = u_xlat0.x * 43758.5469;
					    u_xlat1.x = fract(u_xlat0.x);
					    u_xlat0.xy = u_xlat1.xy * vec2(-0.00800000038, 0.00400000019) + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.xzw = u_xlat0.xyz * vec3(-2.0, -2.0, -2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = vec3(_Value3) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD0.x * 16.0;
					    u_xlat1.xz = (-vs_TEXCOORD0.xy) + vec2(1.0, 1.0);
					    u_xlat6 = u_xlat6 * u_xlat1.x;
					    u_xlat6 = u_xlat6 * vs_TEXCOORD0.y;
					    u_xlat6 = u_xlat1.z * u_xlat6;
					    u_xlat6 = log2(u_xlat6);
					    u_xlat6 = u_xlat6 * 0.400000006;
					    u_xlat6 = exp2(u_xlat6);
					    u_xlat6 = u_xlat6 + _Value2;
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(vec3(0.212599993, 0.715200007, 0.0722000003), u_xlat0.xyz);
					    u_xlatb2 = _MainTex_TexelSize.y<0.0;
					    u_xlat2.xy = (bool(u_xlatb2)) ? u_xlat1.xz : vs_TEXCOORD0.xy;
					    u_xlat1.y = u_xlat1.y * 0.00999999978 + u_xlat2.y;
					    u_xlat1.x = _TimeX * _Speed + u_xlat2.x;
					    u_xlat1 = texture(_MainTex2, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz + (-vec3(vec3(_Value, _Value, _Value)));
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}