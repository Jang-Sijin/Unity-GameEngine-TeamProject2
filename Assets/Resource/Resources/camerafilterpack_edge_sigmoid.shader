Shader "CameraFilterPack/Edge_Sigmoid" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Gain ("_Gain", Range(1, 10)) = 3
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 41892
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Gain;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Gain             c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, 8, 10, -0.180000007, -12.9842558
					    def c3, 0, 0, -1, 1
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c0.x
					    rcp r0.y, c0.y
					    mov r1.zw, c3.x
					    mov r2.zw, c3.x
					    mov r3.xyz, c3.x
					    mov r0.z, c3.z
					    rep i0
					      cmp r0.w, -r0_abs.z, c3.w, c3.x
					      mov r4.yw, r0.z
					      mov r5.xyz, r3
					      mov r4.z, c3.z
					      rep i0
					        cmp r3.w, -r4_abs.z, r0.w, c3.x
					        if_ne r3.w, -r3.w
					          mov r4.x, r4.z
					          mad r1.xy, r0, r4, v0
					          texldl r6, r1, s0
					          mad_pp r5.xyz, r6, c2.x, r5
					        else
					          mad r2.xy, r0, r4.zwzw, v0
					          texldl r6, r2, s0
					          add_pp r5.xyz, r5, -r6
					        endif
					        add r4.z, r4.z, c3.w
					      endrep
					      mov_pp r3.xyz, r5
					      add r0.z, r0.z, c3.w
					    endrep
					    add r0.x, r3.y, r3.x
					    add r0.x, r3.z, r0.x
					    mov r0.y, c2.y
					    add r0.y, r0.y, -c1.x
					    rcp r0.y, r0.y
					    mad r0.x, r0.x, r0.y, c2.z
					    mul r0.x, r0.x, c2.w
					    exp r0.x, r0.x
					    add r0.x, r0.x, c3.w
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, c3.w
					    add oC0.xyz, r0.x, r0.x
					    mov oC0.w, c3.w
					
					// approximately 51 instruction slots used (4 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Gain;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat10;
					bool u_xlatb10;
					int u_xlati12;
					float u_xlat18;
					bool u_xlatb19;
					int u_xlati21;
					void main()
					{
					    u_xlat0.xy = vec2(1.0, 1.0) / _ScreenResolution.xy;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlati12 = int(0xFFFFFFFFu);
					    while(true){
					        u_xlat18 = float(u_xlati12);
					        u_xlatb19 = 1.0<u_xlat18;
					        if(u_xlatb19){break;}
					        u_xlatb19 = u_xlat18==0.0;
					        u_xlat2.yw = vec2(ivec2(u_xlati12));
					        u_xlat3.xyz = u_xlat1.xyz;
					        u_xlati21 = int(0xFFFFFFFFu);
					        while(true){
					            u_xlat4 = float(u_xlati21);
					            u_xlatb10 = 1.0<u_xlat4;
					            if(u_xlatb10){break;}
					            u_xlatb10 = u_xlat4==0.0;
					            u_xlatb10 = u_xlatb19 && u_xlatb10;
					            if(u_xlatb10){
					                u_xlat2.x = float(u_xlati21);
					                u_xlat10.xy = u_xlat0.xy * u_xlat2.xy + vs_TEXCOORD0.xy;
					                u_xlat5 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					                u_xlat3.xyz = u_xlat5.xyz * vec3(8.0, 8.0, 8.0) + u_xlat3.xyz;
					            } else {
					                u_xlat2.z = float(u_xlati21);
					                u_xlat2.xz = u_xlat0.xy * u_xlat2.zw + vs_TEXCOORD0.xy;
					                u_xlat5 = textureLod(_MainTex, u_xlat2.xz, 0.0);
					                u_xlat3.xyz = u_xlat3.xyz + (-u_xlat5.xyz);
					            }
					            u_xlat2.x = u_xlat4 + 1.0;
					            u_xlati21 = int(u_xlat2.x);
					        }
					        u_xlat1.xyz = u_xlat3.xyz;
					        u_xlat18 = u_xlat18 + 1.0;
					        u_xlati12 = int(u_xlat18);
					    }
					    u_xlat0.x = u_xlat1.y + u_xlat1.x;
					    u_xlat0.x = u_xlat1.z + u_xlat0.x;
					    u_xlat6 = (-_Gain) + 10.0;
					    u_xlat0.x = u_xlat0.x / u_xlat6;
					    u_xlat0.x = u_xlat0.x + -0.180000007;
					    u_xlat0.x = u_xlat0.x * -12.9842558;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    SV_Target0.xyz = u_xlat0.xxx + u_xlat0.xxx;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}