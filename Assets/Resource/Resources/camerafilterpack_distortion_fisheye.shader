Shader "CameraFilterPack/Distortion_FishEye" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.87
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 43461
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Distortion;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Distortion  c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, -0.5, 0, 4.44289351, -0.707106769
					    def c2, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c3, 10, -1, 1, 0.180141002
					    def c4, 0.0208350997, -0.0851330012, -0.330299497, 0.999866009
					    def c5, 0, 1, -2, 1.57079637
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, c1.x, v0
					    dp2add r0.z, r0, r0, c1.y
					    rsq r0.z, r0.z
					    rcp r0.w, r0.z
					    mov r1.x, c1.x
					    add r1.y, r1.x, c0.x
					    mul r1.z, r1.y, c1.z
					    cmp r1.w, -r1.y, -c1.x, -c1.w
					    if_lt -r1.y, c1.y
					      mul r2.xy, r0.z, r0
					      mul r1.y, r0.w, r1.z
					      mad r1.y, r1.y, c2.x, c2.y
					      frc r1.y, r1.y
					      mad r1.y, r1.y, c2.z, c2.w
					      sincos r3.xy, r1.y
					      rcp r1.y, r3.x
					      mul r1.y, r1.y, r3.y
					      mul r2.xy, r1.y, r2
					      mul r2.xy, r1.w, r2
					      mul r1.y, r1.z, r1.w
					      mad r1.y, r1.y, c2.x, c2.y
					      frc r1.y, r1.y
					      mad r1.y, r1.y, c2.z, c2.w
					      sincos r3.xy, r1.y
					      rcp r1.y, r3.x
					      mul r1.y, r1.y, r3.y
					      rcp r1.y, r1.y
					      mad r2.xy, r2, r1.y, -c1.x
					    else
					      if_lt c0.x, -r1.x
					        mul r0.xy, r0.z, r0
					        mul r0.z, r0.w, -r1.z
					        mul r0.z, r0.z, c3.x
					        mov_sat r0.w, r0_abs.z
					        add r1.x, r0_abs.z, c3.y
					        rcp r1.y, r0_abs.z
					        cmp r1.x, r1.x, r1.y, c3.z
					        mul r0.w, r0.w, r1.x
					        mul r1.x, r0.w, r0.w
					        mad r1.y, r1.x, c4.x, c4.y
					        mad r1.y, r1.x, r1.y, c3.w
					        mad r1.y, r1.x, r1.y, c4.z
					        mad r1.x, r1.x, r1.y, c4.w
					        mul r0.w, r0.w, r1.x
					        add r1.x, -r0_abs.z, c3.z
					        cmp r1.x, r1.x, c5.x, c5.y
					        mad r1.y, r0.w, c5.z, c5.w
					        mad r0.w, r1.y, r1.x, r0.w
					        min r1.x, r0.z, c3.z
					        cmp r0.z, r1.x, c5.x, c5.y
					        add r1.x, r0.w, r0.w
					        mad r0.z, r0.z, -r1.x, r0.w
					        mul r0.xy, r0.z, r0
					        mul r0.xy, r1.w, r0
					        mul r0.z, r1.w, -r1.z
					        mul r0.z, r0.z, c3.x
					        mov_sat r0.w, r0_abs.z
					        add r1.x, r0_abs.z, c3.y
					        rcp r1.y, r0_abs.z
					        cmp r1.x, r1.x, r1.y, c3.z
					        mul r0.w, r0.w, r1.x
					        mul r1.x, r0.w, r0.w
					        mad r1.y, r1.x, c4.x, c4.y
					        mad r1.y, r1.x, r1.y, c3.w
					        mad r1.y, r1.x, r1.y, c4.z
					        mad r1.x, r1.x, r1.y, c4.w
					        mul r1.y, r0.w, r1.x
					        add r1.z, -r0_abs.z, c3.z
					        mad r1.y, r1.y, c5.z, c5.w
					        cmp r1.y, r1.z, c1.y, r1.y
					        mad r0.w, r0.w, r1.x, r1.y
					        min r1.x, r0.z, c3.z
					        add r0.z, r0.w, r0.w
					        cmp r0.z, r1.x, c1.y, -r0.z
					        add r0.z, r0.z, r0.w
					        rcp r0.z, r0.z
					        mad r2.xy, r0, r0.z, -c1.x
					      else
					        mov r2.xy, v0
					      endif
					    endif
					    texld_pp r0, r2, s0
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c3.z
					
					// approximately 103 instruction slots used (1 texture, 102 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Distortion;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					bool u_xlatb1;
					vec2 u_xlat2;
					float u_xlat3;
					float u_xlat4;
					float u_xlat6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					bool u_xlatb11;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat10 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat15 = sqrt(u_xlat10);
					    u_xlat1 = _Distortion + -0.5;
					    u_xlat6 = u_xlat1 * 4.44289351;
					    u_xlatb11 = 0.0<u_xlat1;
					    u_xlat16 = (u_xlatb11) ? 0.707106769 : 0.5;
					    if(u_xlatb11){
					        u_xlat11 = inversesqrt(u_xlat10);
					        u_xlat2.xy = u_xlat0.xy * vec2(u_xlat11);
					        u_xlat11 = u_xlat15 * u_xlat6;
					        u_xlat3 = sin(u_xlat11);
					        u_xlat4 = cos(u_xlat11);
					        u_xlat11 = u_xlat3 / u_xlat4;
					        u_xlat2.xy = vec2(u_xlat11) * u_xlat2.xy;
					        u_xlat2.xy = vec2(u_xlat16) * u_xlat2.xy;
					        u_xlat11 = u_xlat6 * u_xlat16;
					        u_xlat3 = sin(u_xlat11);
					        u_xlat4 = cos(u_xlat11);
					        u_xlat11 = u_xlat3 / u_xlat4;
					        u_xlat2.xy = u_xlat2.xy / vec2(u_xlat11);
					        u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    } else {
					        u_xlatb1 = u_xlat1<0.0;
					        if(u_xlatb1){
					            u_xlat10 = inversesqrt(u_xlat10);
					            u_xlat0.xy = vec2(u_xlat10) * u_xlat0.xy;
					            u_xlat10 = u_xlat15 * (-u_xlat6);
					            u_xlat10 = u_xlat10 * 10.0;
					            u_xlat15 = min(abs(u_xlat10), 1.0);
					            u_xlat1 = max(abs(u_xlat10), 1.0);
					            u_xlat1 = float(1.0) / u_xlat1;
					            u_xlat15 = u_xlat15 * u_xlat1;
					            u_xlat1 = u_xlat15 * u_xlat15;
					            u_xlat11 = u_xlat1 * 0.0208350997 + -0.0851330012;
					            u_xlat11 = u_xlat1 * u_xlat11 + 0.180141002;
					            u_xlat11 = u_xlat1 * u_xlat11 + -0.330299497;
					            u_xlat1 = u_xlat1 * u_xlat11 + 0.999866009;
					            u_xlat11 = u_xlat15 * u_xlat1;
					            u_xlatb12 = 1.0<abs(u_xlat10);
					            u_xlat11 = u_xlat11 * -2.0 + 1.57079637;
					            u_xlat11 = u_xlatb12 ? u_xlat11 : float(0.0);
					            u_xlat15 = u_xlat15 * u_xlat1 + u_xlat11;
					            u_xlat10 = min(u_xlat10, 1.0);
					            u_xlatb10 = u_xlat10<(-u_xlat10);
					            u_xlat10 = (u_xlatb10) ? (-u_xlat15) : u_xlat15;
					            u_xlat0.xy = vec2(u_xlat10) * u_xlat0.xy;
					            u_xlat0.xy = vec2(u_xlat16) * u_xlat0.xy;
					            u_xlat10 = u_xlat16 * (-u_xlat6);
					            u_xlat10 = u_xlat10 * 10.0;
					            u_xlat15 = min(abs(u_xlat10), 1.0);
					            u_xlat1 = max(abs(u_xlat10), 1.0);
					            u_xlat1 = float(1.0) / u_xlat1;
					            u_xlat15 = u_xlat15 * u_xlat1;
					            u_xlat1 = u_xlat15 * u_xlat15;
					            u_xlat6 = u_xlat1 * 0.0208350997 + -0.0851330012;
					            u_xlat6 = u_xlat1 * u_xlat6 + 0.180141002;
					            u_xlat6 = u_xlat1 * u_xlat6 + -0.330299497;
					            u_xlat1 = u_xlat1 * u_xlat6 + 0.999866009;
					            u_xlat6 = u_xlat15 * u_xlat1;
					            u_xlatb11 = 1.0<abs(u_xlat10);
					            u_xlat6 = u_xlat6 * -2.0 + 1.57079637;
					            u_xlat6 = u_xlatb11 ? u_xlat6 : float(0.0);
					            u_xlat15 = u_xlat15 * u_xlat1 + u_xlat6;
					            u_xlat10 = min(u_xlat10, 1.0);
					            u_xlatb10 = u_xlat10<(-u_xlat10);
					            u_xlat10 = (u_xlatb10) ? (-u_xlat15) : u_xlat15;
					            u_xlat0.xy = u_xlat0.xy / vec2(u_xlat10);
					            u_xlat2.xy = u_xlat0.xy + vec2(0.5, 0.5);
					        } else {
					            u_xlat2.xy = vs_TEXCOORD0.xy;
					        }
					    }
					    u_xlat0 = texture(_MainTex, u_xlat2.xy);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}