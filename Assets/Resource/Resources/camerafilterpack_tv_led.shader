Shader "CameraFilterPack/TV_LED" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(1, 10)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 47246
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _Size;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _TimeX            c0       1
					//   _Size             c1       1
					//   _ScreenResolution c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 5.5999999, 6, 0.159154937, 0.5
					    def c4, 6.28318548, -3.14159274, 1.25, 0
					    def c5, 1, 0.333333343, 0.666666687, 0
					    def c6, -0.200000003, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.x, c2.x
					    rcp r0.y, c2.y
					    rcp r0.z, c1.x
					    mul r1.xyz, c2.yxxw, v0.yxxw
					    mul r1.yzw, r0.z, r1.xxyz
					    frc r0.zw, r1.xywy
					    add r0.zw, -r0, r1.xywy
					    mul r0.zw, r0, c1.x
					    mul r0.xy, r0, r0.zwzw
					    texld r0, r0, s0
					    mul r2, r0.zzyz, c5.wxxw
					    frc r3.xyz, r1_abs.ywww
					    cmp r1.yzw, r1, r3.xxyz, -r3.xxzz
					    mov r3.xyz, c5
					    mul r3.xyz, r3, c1.x
					    mad r1.yzw, r1, c1.x, -r3.xxyz
					    cmp r2.yz, r1.w, r2.xxyw, r2.xzww
					    mov r2.x, c4.w
					    mul r3.xyz, r0.xzzw, c5.xwww
					    cmp r2.xyz, r1.z, r2, r3
					    cmp r1.yzw, r1.y, c4.w, r2.xxyz
					    add r0.xyz, r0, r1.yzww
					    add r1.yzw, r0.xxyz, c6.x
					    add r0.xyz, r0, -r1.yzww
					    mov r2.x, c3.x
					    mul r0.w, r2.x, c0.x
					    mad r0.w, r1.x, c3.y, r0.w
					    mad r0.w, r0.w, c3.z, c3.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c4.x, c4.y
					    sincos r2.y, r0.w
					    add_sat r0.w, r2.y, c4.z
					    mul r0.w, r0.w, c3.w
					    mad oC0.xyz, r0.w, r0, r1.yzww
					    mov oC0.w, c5.x
					
					// approximately 42 instruction slots used (1 texture, 41 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Size;
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec2 u_xlatb2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat6;
					bvec2 u_xlatb7;
					vec2 u_xlat12;
					float u_xlat15;
					void main()
					{
					    u_xlat5.y = 0.0;
					    u_xlat6.x = 0.0;
					    u_xlat0.xw = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat1.xw = u_xlat0.xw / vec2(vec2(_Size, _Size));
					    u_xlatb2.xy = greaterThanEqual(u_xlat1.xwxx, (-u_xlat1.xwxx)).xy;
					    u_xlat12.xy = fract(abs(u_xlat1.xw));
					    u_xlat1.xw = floor(u_xlat1.xw);
					    u_xlat1.xw = u_xlat1.xw * vec2(vec2(_Size, _Size));
					    u_xlat1.xw = u_xlat1.xw / _ScreenResolution.xy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xw);
					    u_xlat1.x = (u_xlatb2.x) ? u_xlat12.x : (-u_xlat12.x);
					    u_xlat1.w = (u_xlatb2.y) ? u_xlat12.y : (-u_xlat12.y);
					    u_xlat1.xw = u_xlat1.xw * vec2(vec2(_Size, _Size));
					    u_xlat2.xyz = vec3(_TimeX, _Size, _Size) * vec3(5.5999999, 0.333333343, 0.666666687);
					    u_xlatb7.xy = lessThan(u_xlat1.xxxx, u_xlat2.yzyy).xy;
					    u_xlatb0 = u_xlat1.w<_Size;
					    u_xlat15 = u_xlat0.w * 6.0 + u_xlat2.x;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 + 1.25;
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = u_xlat15 * 0.5;
					    u_xlat5.x = u_xlat3.y;
					    u_xlat6.y = u_xlat3.z;
					    u_xlat1.yz = (u_xlatb7.y) ? u_xlat5.xy : u_xlat6.xy;
					    u_xlat4.y = float(0.0);
					    u_xlat4.z = float(0.0);
					    u_xlat1.x = 0.0;
					    u_xlat4.x = u_xlat3.x;
					    u_xlat1.xyz = (u_xlatb7.x) ? u_xlat4.xyz : u_xlat1.xyz;
					    u_xlat0.xyz = bool(u_xlatb0) ? u_xlat1.xyz : vec3(0.0, 0.0, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(-0.200000003, -0.200000003, -0.200000003);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}