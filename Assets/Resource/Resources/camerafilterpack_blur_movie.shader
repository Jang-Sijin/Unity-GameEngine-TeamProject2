Shader "CameraFilterPack/Blur_Movie" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Radius ("_Radius", Range(0, 1000)) = 700
		_Factor ("_Factor", Range(0, 1000)) = 200
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 39928
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Factor;
					//   sampler2D _MainTex;
					//   float _Radius;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Radius           c1       1
					//   _Factor           c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 64, 0, 0, -5
					    def c4, 1, 0, 0, 0
					    defi i0, 10, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    rcp r0.y, c0.y
					    mul r0.z, r0.y, c2.x
					    mul r0.z, r0.z, c3.x
					    rcp r0.x, c0.x
					    mov r1.yzw, c3.y
					    dp2add r0.w, c1.x, r0.x, r1.y
					    mov r2, c3.y
					    mov r3, c3.y
					    mov r4.x, c3.w
					    rep i0
					      mov r5, r2
					      mov r6, r3
					      mov r4.y, c3.w
					      rep i0
					        add r7.x, r4.x, r4.y
					        add r7.y, -r4.y, r4.x
					        mul r4.zw, r0.xyxy, r7.xyxy
					        mad r1.xy, r4.zwzw, r0.w, v0
					        texldl r7, r1, s0
					        mul r8, r7, r7
					        mul r8, r7, r8
					        mad r8, r8, r0.z, c4.x
					        mad r5, r7, r8, r5
					        add r6, r6, r8
					        add r4.y, r4.y, c4.x
					      endrep
					      mov r2, r5
					      mov r3, r6
					      add r4.x, r4.x, c4.x
					    endrep
					    rcp r0.x, r3.x
					    rcp r0.y, r3.y
					    rcp r0.z, r3.z
					    rcp r0.w, r3.w
					    mul oC0, r0, r2
					
					// approximately 43 instruction slots used (2 texture, 41 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Radius;
						float _Factor;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat16;
					vec2 u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.xy = vec2(_Factor, _Radius) / _ScreenResolution.yx;
					    u_xlat0.x = u_xlat0.x * 64.0;
					    u_xlat8 = u_xlat0.y + u_xlat0.y;
					    u_xlat16.xy = vec2(1.0, 1.0) / _ScreenResolution.xy;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat3 = -5.0;
					    while(true){
					        u_xlatb11 = u_xlat3>=5.0;
					        if(u_xlatb11){break;}
					        u_xlat4 = u_xlat1;
					        u_xlat5 = u_xlat2;
					        u_xlat11 = -5.0;
					        while(true){
					            u_xlatb19 = u_xlat11>=5.0;
					            if(u_xlatb19){break;}
					            u_xlat6.x = u_xlat3 + u_xlat11;
					            u_xlat6.y = (-u_xlat11) + u_xlat3;
					            u_xlat19.xy = u_xlat16.xy * u_xlat6.xy;
					            u_xlat19.xy = u_xlat19.xy * vec2(u_xlat8) + vs_TEXCOORD0.xy;
					            u_xlat6 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					            u_xlat7 = u_xlat6 * u_xlat6;
					            u_xlat7 = u_xlat6 * u_xlat7;
					            u_xlat7 = u_xlat7 * u_xlat0.xxxx + vec4(1.0, 1.0, 1.0, 1.0);
					            u_xlat4 = u_xlat6 * u_xlat7 + u_xlat4;
					            u_xlat5 = u_xlat5 + u_xlat7;
					            u_xlat11 = u_xlat11 + 1.0;
					        }
					        u_xlat1 = u_xlat4;
					        u_xlat2 = u_xlat5;
					        u_xlat3 = u_xlat3 + 1.0;
					    }
					    SV_Target0 = u_xlat1 / u_xlat2;
					    return;
					}"
				}
			}
		}
	}
}