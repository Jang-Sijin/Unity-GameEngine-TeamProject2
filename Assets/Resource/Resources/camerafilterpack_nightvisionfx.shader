Shader "CameraFilterPack/NightVisionFX" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 1553
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Color_B;
					//   float _Color_G;
					//   float _Color_R;
					//   float _Dist;
					//   float _Distortion;
					//   float _Greenness;
					//   float _Intensity;
					//   float _Light;
					//   float _Light2;
					//   float _Line;
					//   sampler2D _MainTex;
					//   float _Noise;
					//   float _OnOff;
					//   float _Size;
					//   float _Smooth;
					//   float _TimeX;
					//   float _Vignette;
					//   float _Vignette_Alpha;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _TimeX          c0       1
					//   _OnOff          c1       1
					//   _Vignette       c2       1
					//   _Vignette_Alpha c3       1
					//   _Greenness      c4       1
					//   _Distortion     c5       1
					//   _Noise          c6       1
					//   _Intensity      c7       1
					//   _Light          c8       1
					//   _Light2         c9       1
					//   _Line           c10      1
					//   _Color_R        c11      1
					//   _Color_G        c12      1
					//   _Color_B        c13      1
					//   _Size           c14      1
					//   _Dist           c15      1
					//   _Smooth         c16      1
					//   _MainTex        s0       1
					//
					
					    ps_3_0
					    def c17, -0.5, 1.20000005, 0.833333313, 0.5
					    def c18, 8, 10, 0.159154937, 0.5
					    def c19, 12.9898005, 78.2330017, 0, 43758.5469
					    def c20, 6.28318548, -3.14159274, 0.150000006, 0.25
					    def c21, 2.85714293, -4, -2, 3
					    def c22, 0.25, 1.54999995, 0.550000012, 300
					    def c23, 1, 0, 0.694000006, 0.5
					    def c24, 0.100000001, -0.199999988, 1, 1.38888884
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c18
					    mul r0.xy, r0, c0.x
					    frc r0.z, r0.x
					    add r0.x, -r0.z, r0.x
					    add r0.zw, c17.x, v0.xyxy
					    mul r1.xy, r0.zwzw, r0.zwzw
					    mul r0.zw, r0, c17.y
					    dp2add r1.x, r1.y, r1.x, c17.z
					    mad r0.zw, r0, r1.x, c17.w
					    mov r1.xyw, -v0.xyzy
					    add r0.zw, r0, r1.xyxy
					    mad r0.zw, c5.x, r0, v0.xyxy
					    mul r2.xy, r0.x, r0.zwzw
					    dp2add r0.x, r2, c19, c19.z
					    mad r0.x, r0.x, c18.z, c18.w
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c20.x, c20.y
					    sincos r2.y, r0.x
					    mul r0.x, r2.y, c19.w
					    frc r0.x, r0.x
					    mul r0.x, r0.x, c6.x
					    texld r2, r0.zwzw, s0
					    mul r0.z, r0.w, c8.x
					    mad r0.y, r0.z, c22.w, r0.y
					    mad r0.y, r0.y, c18.z, c18.w
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c20.x, c20.y
					    sincos r3.y, r0.y
					    mad r0.y, r3.y, c24.x, c24.y
					    mov r0.zw, c24
					    mad r0.y, c10.x, r0.y, r0.z
					    mad r2.xyz, r0.x, c17.w, r2
					    add r0.xz, r1.xyyw, c17.w
					    dp2add r0.x, r0.xzzw, r0.xzzw, c19.z
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    mov r3.zw, c20
					    add r1.xy, r3.zwzw, c2.x
					    add r0.xz, r0.x, -r1.xyyw
					    mul_sat r0.xz, r0, c21.xyyw
					    mad r1.xy, r0.xzzw, c21.z, c21.w
					    mul r0.xz, r0, r0
					    mul r0.xz, r0, r1.xyyw
					    mad r2.xyz, r0.x, -c3.x, r2
					    mad r2.xyz, r0.z, c9.x, r2
					    add r2.xyz, r2, c7.x
					    mov r1.xy, c22
					    mad r0.x, c4.x, r1.x, r1.y
					    mul r0.x, r0.x, r2.y
					    mad r3.y, r0.x, r0.y, c12.x
					    mul r0.xz, r2, c22.z
					    mad r3.x, r0.x, r0.y, c11.x
					    mad r3.z, r0.z, r0.y, c13.x
					    lrp r0.xyz, c1.x, r2, r3
					    mad r1.z, v0.x, -r0.w, -c15.x
					    add r1.xy, r1.zwzw, c23.zwzw
					    dp2add r0.w, r1, r1, c19.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r0.w, r0.w, -c14.x
					    rcp r1.x, -c16.x
					    mul_sat r0.w, r0.w, r1.x
					    mad r1.y, r0.w, c21.z, c21.w
					    mul r0.w, r0.w, r0.w
					    mad r0.w, r1.y, -r0.w, c24.z
					    mov r2, c23
					    mad r1.yz, c15.x, r2.xxyw, r2.xzww
					    mad r1.yz, v0.xxyw, -c24.xwzw, r1
					    dp2add r1.y, r1.yzzw, r1.yzzw, c19.z
					    rsq r1.y, r1.y
					    rcp r1.y, r1.y
					    add r1.y, r1.y, -c14.x
					    mul_sat r1.x, r1.x, r1.y
					    mad r1.y, r1.x, c21.z, c21.w
					    mul r1.x, r1.x, r1.x
					    mad r1.x, r1.y, -r1.x, c24.z
					    mul r0.w, r0.w, r1.x
					    mad oC0.xyz, r0.w, -r0, r0
					    mov oC0.w, c24.z
					
					// approximately 98 instruction slots used (1 texture, 97 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _OnOff;
						float _Vignette;
						float _Vignette_Alpha;
						vec4 unused_0_5;
						float _Greenness;
						float _Distortion;
						float _Noise;
						float _Intensity;
						float _Light;
						float _Light2;
						float _Line;
						float _Color_R;
						float _Color_G;
						float _Color_B;
						float _Size;
						float _Dist;
						float _Smooth;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat8.xy = u_xlat0.xy * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(1.20000005, 1.20000005);
					    u_xlat8.x = dot(u_xlat8.yy, u_xlat8.xx);
					    u_xlat8.x = u_xlat8.x + 0.833333313;
					    u_xlat0.xy = u_xlat0.xy * u_xlat8.xx + vec2(0.5, 0.5);
					    u_xlat1.xyw = (-vs_TEXCOORD0.xyy);
					    u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;
					    u_xlat0.xy = vec2(vec2(_Distortion, _Distortion)) * u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat8.xy = vec2(_TimeX) * vec2(8.0, 10.0);
					    u_xlat8.x = floor(u_xlat8.x);
					    u_xlat2.xy = u_xlat8.xx * u_xlat0.xy;
					    u_xlat8.x = dot(u_xlat2.xy, vec2(12.9898005, 78.2330017));
					    u_xlat8.x = sin(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * 43758.5469;
					    u_xlat8.x = fract(u_xlat8.x);
					    u_xlat8.x = u_xlat8.x * _Noise;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0.x = u_xlat0.y * _Light;
					    u_xlat0.x = u_xlat0.x * 300.0 + u_xlat8.y;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 0.100000001 + -0.199999988;
					    u_xlat0.x = _Line * u_xlat0.x + 1.0;
					    u_xlat4.xyz = u_xlat8.xxx * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat2.xy = vec2(vec2(_Vignette, _Vignette)) + vec2(0.150000006, 0.25);
					    u_xlat1.xy = u_xlat1.xx + (-u_xlat2.xy);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.85714293, -4.0);
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
					    u_xlat4.xyz = (-u_xlat1.xxx) * vec3(vec3(_Vignette_Alpha, _Vignette_Alpha, _Vignette_Alpha)) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat1.yyy * vec3(vec3(_Light2, _Light2, _Light2)) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + vec3(vec3(_Intensity, _Intensity, _Intensity));
					    u_xlat1.x = _Greenness * 0.25 + 1.54999995;
					    u_xlat2.y = u_xlat4.y * u_xlat1.x;
					    u_xlat2.xz = u_xlat4.xz * vec2(0.550000012, 0.550000012);
					    u_xlat3.yz = u_xlat2.yz * u_xlat0.xx + vec2(_Color_G, _Color_B);
					    u_xlat3.x = u_xlat2.x * u_xlat0.x + _Color_R;
					    u_xlat0.xyz = u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(vec3(_OnOff, _OnOff, _OnOff)) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat1.z = (-vs_TEXCOORD0.x) * 1.38888884 + (-_Dist);
					    u_xlat1.xy = u_xlat1.zw + vec2(0.694000006, 0.5);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat12 = u_xlat12 + (-_Size);
					    u_xlat1.x = float(1.0) / (-_Smooth);
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat5.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = (-u_xlat5.x) * u_xlat12 + 1.0;
					    u_xlat2.x = _Dist + 0.694000006;
					    u_xlat2.y = 0.5;
					    u_xlat5.xy = (-vs_TEXCOORD0.xy) * vec2(1.38888884, 1.0) + u_xlat2.xy;
					    u_xlat5.x = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat5.x + (-_Size);
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat5.x) * u_xlat1.x + 1.0;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    SV_Target0.xyz = vec3(u_xlat12) * (-u_xlat0.xyz) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}