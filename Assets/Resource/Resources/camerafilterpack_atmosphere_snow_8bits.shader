Shader "CameraFilterPack/Atmosphere_Snow_8bits" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 7171
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float2 _MainTex_TexelSize;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _TimeX             c0       1
					//   _Value             c1       1
					//   _Value2            c2       1
					//   _MainTex_TexelSize c3       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c4, 1, 2, -0.5, -0.159154937
					    def c5, 1.08748353, 0.926055908, 1.07671642, 0.916887045
					    def c6, 0.0199999996, 0.500999987, 0.0500000007, 0.5
					    def c7, 12.9898005, 78.2330017, 0, 43758.5469
					    def c8, 6.28318548, -3.14159274, 0.899999976, -0.899999976
					    def c9, 9.99999809, -2, 3, -0.939999998
					    def c10, 1.15208662, 0.981069207, 0.980000019, -0.899999976
					    def c11, 0.969044745, 0.825198293, 0.99000001, -0.899999976
					    def c12, 0.0199999996, 0.50999999, 0.0700000003, 0.493000001
					    def c13, 0.0299999993, 0.504000008, 0.0199999996, 0.497000009
					    def c14, 16.666666, 0.323014945, 0.275066137, -0.949999988
					    def c15, 19.9999962, 0, 0.50999999, 0.523000002
					    def c16, 0.107671641, 0.0916887075, -0.959999979, 24.9999866
					    def c17, 0.032301493, 0.0275066104, 100.000099, 0
					    def c18, 0.807537317, 0.687665284, 0.538358212, 0.458443522
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mul r1, r0.x, c6
					    add r0.y, c4.x, -v0.y
					    cmp r2.y, c3.y, v0.y, r0.y
					    mov r2.x, v0.x
					    mad r0.yz, r2.xxyw, c4.y, c4.z
					    mad r2, r0.yzyz, c5, r1
					    mad r1.xy, r0.yzzw, c10, r1
					    frc r3, r2
					    add r3, r2, -r3
					    add r2, r2, -r3
					    mul r2, r2, c2.x
					    frc r3, r2
					    add r2, r2, -r3
					    dp2add r0.w, r2, c7, c7.z
					    dp2add r1.z, r2.zwzw, c7, c7.z
					    mad r1.z, r1.z, -c4.w, -c4.z
					    frc r1.z, r1.z
					    mad r1.z, r1.z, c8.x, c8.y
					    sincos r2.y, r1.z
					    mul r1.z, r2.y, c7.w
					    frc r1.z, r1.z
					    mul r1.z, r1.z, c1.x
					    mad r1.z, r1.z, c10.z, c10.w
					    mul_sat r1.z, r1.z, c9.x
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r2.y, r0.w
					    mul r0.w, r2.y, c7.w
					    frc r0.w, r0.w
					    mul r0.w, r0.w, c1.x
					    mad r0.w, r0.w, c8.z, c8.w
					    mul_sat r0.w, r0.w, c9.x
					    mad r1.w, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r1.w
					    texld r2, v0, s0
					    lrp r3.xyz, r0.w, c4.x, r2
					    frc r2.xy, r1
					    add r2.xy, r1, -r2
					    add r1.xy, r1, -r2
					    mul r1.xy, r1, c2.x
					    frc r2.xy, r1
					    add r1.xy, r1, -r2
					    dp2add r0.w, r1, c7, c7.z
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r2.y, r0.w
					    mul r0.w, r2.y, c7.w
					    frc r0.w, r0.w
					    mov r1.w, c8.w
					    mad r0.w, r0.w, c1.x, r1.w
					    mul_sat r0.w, r0.w, c9.x
					    mad r1.x, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r1.x
					    lrp r2.xyz, r0.w, c4.x, r3
					    mad r0.w, r1.z, c9.y, c9.z
					    mul r1.x, r1.z, r1.z
					    mul r0.w, r0.w, r1.x
					    lrp r1.xyz, r0.w, c4.x, r2
					    mul r2, r0.x, c12
					    mad r2.xy, r0.yzzw, c11, r2
					    mad r2.zw, r0.xyyz, c18.xyxy, r2
					    frc r3.xy, r2
					    add r3.xy, r2, -r3
					    add r2.xy, r2, -r3
					    mul r2.xy, r2, c2.x
					    frc r3.xy, r2
					    add r2.xy, r2, -r3
					    dp2add r0.w, r2, c7, c7.z
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r3.y, r0.w
					    mul r0.w, r3.y, c7.w
					    frc r0.w, r0.w
					    mul r0.w, r0.w, c1.x
					    mad r0.w, r0.w, c11.z, c11.w
					    mul_sat r0.w, r0.w, c9.x
					    mad r2.x, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r2.x
					    lrp r3.xyz, r0.w, c4.x, r1
					    frc r1.xy, r2.zwzw
					    add r1.xy, -r1, r2.zwzw
					    add r1.xy, -r1, r2.zwzw
					    mul r1.xy, r1, c2.x
					    frc r2.xy, r1
					    add r1.xy, r1, -r2
					    dp2add r0.w, r1, c7, c7.z
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r2.y, r0.w
					    mul r0.w, r2.y, c7.w
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c1.x, r1.w
					    mul_sat r0.w, r0.w, c9.x
					    mad r1.x, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r1.x
					    lrp r1.xyz, r0.w, c4.x, r3
					    mul r2, r0.x, c13
					    mad r2.xy, r0.yzzw, c18.zwzw, r2
					    mad r2.zw, r0.xyyz, c14.xyyz, r2
					    frc r3.xy, r2
					    add r3.xy, r2, -r3
					    add r2.xy, r2, -r3
					    mul r2.xy, r2, c2.x
					    frc r3.xy, r2
					    add r2.xy, r2, -r3
					    dp2add r0.w, r2, c7, c7.z
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r3.y, r0.w
					    mul r0.w, r3.y, c7.w
					    frc r0.w, r0.w
					    mov r1.w, c9.w
					    mad r0.w, r0.w, c1.x, r1.w
					    mul_sat r0.w, r0.w, c14.x
					    mad r1.w, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r1.w
					    lrp r3.xyz, r0.w, c4.x, r1
					    frc r1.xy, r2.zwzw
					    add r1.xy, -r1, r2.zwzw
					    add r1.xy, -r1, r2.zwzw
					    mul r1.xy, r1, c2.x
					    frc r1.zw, r1.xyxy
					    add r1.xy, -r1.zwzw, r1
					    dp2add r0.w, r1, c7, c7.z
					    mad r0.w, r0.w, -c4.w, -c4.z
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.x, c8.y
					    sincos r1.y, r0.w
					    mul r0.w, r1.y, c7.w
					    frc r0.w, r0.w
					    mov r1.x, c1.x
					    mad r0.w, r0.w, r1.x, c14.w
					    mul_sat r0.w, r0.w, c15.x
					    mad r1.y, r0.w, c9.y, c9.z
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r1.y
					    lrp r1.yzw, r0.w, c4.x, r3.xxyz
					    mul r2, r0.x, c15.yzyw
					    mad r0.xw, r0.yyzz, c16.xyzy, r2.xyzy
					    mad r0.yz, r0, c17.xxyw, r2.xzww
					    frc r2.xy, r0.xwzw
					    add r2.xy, r0.xwzw, -r2
					    add r0.xw, r0, -r2.xyzy
					    mul r0.xw, r0, c2.x
					    frc r2.xy, r0.xwzw
					    add r0.xw, r0, -r2.xyzy
					    dp2add r0.x, r0.xwzw, c7, c7.z
					    mad r0.x, r0.x, -c4.w, -c4.z
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c8.x, c8.y
					    sincos r2.y, r0.x
					    mul r0.x, r2.y, c7.w
					    frc r0.x, r0.x
					    mad r0.x, r0.x, r1.x, c16.z
					    mul_sat r0.x, r0.x, c16.w
					    mad r0.w, r0.x, c9.y, c9.z
					    mul r0.x, r0.x, r0.x
					    mul r0.x, r0.x, r0.w
					    lrp r2.xyz, r0.x, c4.x, r1.yzww
					    add r1.yzw, -r2.xxyz, c4.x
					    frc r0.xw, r0.yyzz
					    add r0.xw, -r0, r0.yyzz
					    add r0.xy, -r0.xwzw, r0.yzzw
					    mul r0.xy, r0, c2.x
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    dp2add r0.x, r0, c7, c7.z
					    mad r0.x, r0.x, -c4.w, -c4.z
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c8.x, c8.y
					    sincos r3.y, r0.x
					    mul r0.x, r3.y, c7.w
					    frc r0.x, r0.x
					    mad r0.x, r0.x, r1.x, -c11.z
					    mul_sat r0.x, r0.x, c17.z
					    mad r0.y, r0.x, c9.y, c9.z
					    mul r0.x, r0.x, r0.x
					    mul r0.x, r0.x, r0.y
					    mad oC0.xyz, r0.x, r1.yzww, r2
					    mov oC0.w, c4.x
					
					// approximately 263 instruction slots used (1 texture, 262 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						float _Value2;
						vec4 unused_0_4;
						vec2 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec2 u_xlat9;
					vec2 u_xlat11;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = vec4(_TimeX) * vec4(0.0199999996, 0.500999987, 0.0500000007, 0.5);
					    u_xlatb1 = _MainTex_TexelSize.y<0.0;
					    u_xlat5 = (-vs_TEXCOORD0.y) + 1.0;
					    u_xlat1.y = (u_xlatb1) ? u_xlat5 : vs_TEXCOORD0.y;
					    u_xlat1.x = vs_TEXCOORD0.x;
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-0.5, -0.5);
					    u_xlat2 = u_xlat1.xyxy * vec4(1.08748353, 0.926055908, 1.07671642, 0.916887045) + u_xlat0;
					    u_xlat0.xy = u_xlat1.xy * vec2(1.15208662, 0.981069207) + u_xlat0.xy;
					    u_xlat3 = floor(u_xlat2);
					    u_xlat2 = u_xlat2 + (-u_xlat3);
					    u_xlat2 = u_xlat2 * vec4(vec4(_Value2, _Value2, _Value2, _Value2));
					    u_xlat2 = floor(u_xlat2);
					    u_xlat8.x = dot(u_xlat2.xy, vec2(12.9898005, 78.2330017));
					    u_xlat8.y = dot(u_xlat2.zw, vec2(12.9898005, 78.2330017));
					    u_xlat8.xy = sin(u_xlat8.xy);
					    u_xlat8.xy = u_xlat8.xy * vec2(43758.5469, 43758.5469);
					    u_xlat8.xy = fract(u_xlat8.xy);
					    u_xlat8.xy = u_xlat8.xy * vec2(vec2(_Value, _Value));
					    u_xlat8.y = u_xlat8.y * 0.980000019 + -0.899999976;
					    u_xlat8.x = u_xlat8.x * 0.899999976 + -0.899999976;
					    u_xlat8.xy = u_xlat8.xy * vec2(9.99999809, 9.99999809);
					    u_xlat8.xy = clamp(u_xlat8.xy, 0.0, 1.0);
					    u_xlat9.x = u_xlat8.x * -2.0 + 3.0;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat8.x = u_xlat8.x * u_xlat9.x;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat8.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy + (-u_xlat9.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0.xy, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 43758.5469;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Value + -0.899999976;
					    u_xlat0.x = u_xlat0.x * 9.99999809;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.x = u_xlat8.y * -2.0 + 3.0;
					    u_xlat12 = u_xlat8.y * u_xlat8.y;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = vec4(_TimeX) * vec4(0.0199999996, 0.50999999, 0.0700000003, 0.493000001);
					    u_xlat9.xy = u_xlat1.xy * vec2(0.969044745, 0.825198293) + u_xlat3.xy;
					    u_xlat3.xy = u_xlat1.xy * vec2(0.807537317, 0.687665284) + u_xlat3.zw;
					    u_xlat11.xy = floor(u_xlat9.xy);
					    u_xlat9.xy = u_xlat9.xy + (-u_xlat11.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat9.xy = floor(u_xlat9.xy);
					    u_xlat12 = dot(u_xlat9.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value;
					    u_xlat12 = u_xlat12 * 0.99000001 + -0.899999976;
					    u_xlat12 = u_xlat12 * 9.99999809;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat9.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xy = floor(u_xlat3.xy);
					    u_xlat9.xy = (-u_xlat9.xy) + u_xlat3.xy;
					    u_xlat9.xy = u_xlat9.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat9.xy = floor(u_xlat9.xy);
					    u_xlat12 = dot(u_xlat9.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value + -0.899999976;
					    u_xlat12 = u_xlat12 * 9.99999809;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat9.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = vec4(_TimeX) * vec4(0.0299999993, 0.504000008, 0.0199999996, 0.497000009);
					    u_xlat9.xy = u_xlat1.xy * vec2(0.538358212, 0.458443522) + u_xlat3.xy;
					    u_xlat3.xy = u_xlat1.xy * vec2(0.323014945, 0.275066137) + u_xlat3.zw;
					    u_xlat11.xy = floor(u_xlat9.xy);
					    u_xlat9.xy = u_xlat9.xy + (-u_xlat11.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat9.xy = floor(u_xlat9.xy);
					    u_xlat12 = dot(u_xlat9.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value + -0.939999998;
					    u_xlat12 = u_xlat12 * 16.666666;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat9.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xy = floor(u_xlat3.xy);
					    u_xlat9.xy = (-u_xlat9.xy) + u_xlat3.xy;
					    u_xlat9.xy = u_xlat9.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat9.xy = floor(u_xlat9.xy);
					    u_xlat12 = dot(u_xlat9.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value + -0.949999988;
					    u_xlat12 = u_xlat12 * 19.9999962;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat9.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3 = vec4(_TimeX) * vec4(0.0, 0.50999999, 0.0, 0.523000002);
					    u_xlat9.xy = u_xlat1.xy * vec2(0.107671641, 0.0916887075) + u_xlat3.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(0.032301493, 0.0275066104) + u_xlat3.zw;
					    u_xlat3.xy = floor(u_xlat9.xy);
					    u_xlat9.xy = u_xlat9.xy + (-u_xlat3.xy);
					    u_xlat9.xy = u_xlat9.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat9.xy = floor(u_xlat9.xy);
					    u_xlat12 = dot(u_xlat9.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value + -0.959999979;
					    u_xlat12 = u_xlat12 * 24.9999866;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat9.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat9.x;
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat9.xy = floor(u_xlat1.xy);
					    u_xlat1.xy = (-u_xlat9.xy) + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * vec2(vec2(_Value2, _Value2));
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat12 = dot(u_xlat1.xy, vec2(12.9898005, 78.2330017));
					    u_xlat12 = sin(u_xlat12);
					    u_xlat12 = u_xlat12 * 43758.5469;
					    u_xlat12 = fract(u_xlat12);
					    u_xlat12 = u_xlat12 * _Value + -0.99000001;
					    u_xlat12 = u_xlat12 * 100.000099;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat12 * -2.0 + 3.0;
					    u_xlat12 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat2.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}