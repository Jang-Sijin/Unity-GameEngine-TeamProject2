Shader "CameraFilterPack/FX_Drunk" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0, 20)) = 6
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 13946
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _TimeX;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _TimeX            c0       1
					//   _ScreenResolution c1       1
					//   _Value            c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 6.28318548, -3.14159274, 1, 0
					    def c4, 0.318309873, 0.190985933, 0.286478877, 0.5
					    def c5, 1.25, 1.10000002, 0.400000006, 1.39999998
					    def c6, 0.199999988, 0.0750000179, 0.850000024, 0.949999988
					    def c7, -0.199999988, -0.0750000179, 0.100000009, 0.400000006
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0, c4
					    mad r0.xyz, c0.x, r0, r0.w
					    frc r0.xyz, r0
					    mad r0.xyz, r0, c3.x, c3.y
					    sincos r1.y, r0.x
					    mul r1.yz, r1.y, c2.x
					    rcp r0.x, c1.x
					    mov r1.xw, c3.w
					    mad r1, r1, r0.x, v0.xyxy
					    frc r2, r1_abs
					    cmp r1, r1, r2, -r2
					    sincos r2.y, r0.z
					    sincos r3.y, r0.y
					    add r0.x, r3.y, c3.z
					    mov r3.xyz, c7
					    mad r0.xyz, r0.x, r3, c5
					    add r0.w, r2.y, c3.z
					    mad r2.xy, r0.w, c6, c6.zwzw
					    pow r3.y, r1.y, r2.x
					    pow r4.x, r1.z, r2.y
					    pow r3.x, r1.x, r0.x
					    pow r4.y, r1.w, r0.y
					    texld_pp r1, r4, s0
					    texld_pp r2, r3, s0
					    rsq_pp r0.x, r1.x
					    rcp_pp r2.x, r0.x
					    mov_pp r1.x, r2.x
					    lrp r3, r0.z, r1, r2
					    texld_pp r0, v0, s0
					    lrp_pp r1, c7.w, r0, r3
					    dp4_pp r0.x, r1, r1
					    rsq_pp r0.x, r0.x
					    rcp_pp r0.x, r0.x
					    add r0.y, r0.x, -c7.w
					    add r0.x, -r0.x, c5.w
					    lrp_pp r2, c4.w, v0.xyxy, r1.xyyz
					    cmp_pp r3.yz, r0.y, r1, r2.xzww
					    mov_pp r3.x, r1.x
					    mov_pp r2.z, r1.z
					    mov_pp oC0.w, r1.w
					    cmp_pp oC0.xyz, r0.x, r3, r2
					
					// approximately 70 instruction slots used (3 texture, 67 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						vec4 _ScreenResolution;
						float _Value;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec3 u_xlat3;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.x = _TimeX + _TimeX;
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.yz = u_xlat0.xx * vec2(_Value);
					    u_xlat0.x = float(0.0);
					    u_xlat0.w = float(0.0);
					    u_xlat0 = u_xlat0 / _ScreenResolution.xxxx;
					    u_xlat0 = u_xlat0 + vs_TEXCOORD0.xyxy;
					    u_xlatb1 = greaterThanEqual(u_xlat0, (-u_xlat0));
					    u_xlat0 = fract(abs(u_xlat0));
					    {
					        vec4 hlslcc_movcTemp = u_xlat0;
					        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat0.x : (-u_xlat0.x);
					        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat0.y : (-u_xlat0.y);
					        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat0.z : (-u_xlat0.z);
					        hlslcc_movcTemp.w = (u_xlatb1.w) ? u_xlat0.w : (-u_xlat0.w);
					        u_xlat0 = hlslcc_movcTemp;
					    }
					    u_xlat0 = log2(u_xlat0);
					    u_xlat1 = vec4(_TimeX) * vec4(1.20000005, 1.79999995, 1.79999995, 1.20000005);
					    u_xlat1 = sin(u_xlat1);
					    u_xlat1 = u_xlat1 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = u_xlat1 * vec4(-0.199999988, 0.199999988, 0.0750000179, -0.0750000179) + vec4(1.25, 0.850000024, 0.949999988, 1.10000002);
					    u_xlat1.x = u_xlat1.w * 0.100000009 + 0.400000006;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = exp2(u_xlat0);
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat2.x;
					    u_xlat0 = (-u_xlat2) + u_xlat0;
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + u_xlat2;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = (-u_xlat0) + u_xlat1;
					    u_xlat0 = u_xlat1 * vec4(0.400000006, 0.400000006, 0.400000006, 0.400000006) + u_xlat0;
					    u_xlat1 = (-u_xlat0.xyyz) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0.xyyz;
					    u_xlat2.x = dot(u_xlat0, u_xlat0);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlatb6 = u_xlat2.x<0.400000006;
					    u_xlatb2 = 1.39999998<u_xlat2.x;
					    u_xlat3.yz = (bool(u_xlatb6)) ? u_xlat1.zw : u_xlat0.yz;
					    u_xlat1.z = u_xlat0.z;
					    u_xlat3.x = u_xlat0.x;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat1.xyz : u_xlat3.xyz;
					    return;
					}"
				}
			}
		}
	}
}