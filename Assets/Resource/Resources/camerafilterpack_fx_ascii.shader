Shader "CameraFilterPack/FX_Ascii" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 50973
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c1, 0.125, 8, 65536, 65600
					    def c2, 4, -4, 2.5, 5
					    def c3, 0.5, 0, 0, 0
					    def c4, 332772, 15255086, 23385164, 15252014
					    def c5, 1.20000005, 1.39999998, 1.60000002, 13199452
					    def c6, 11512810, 2, -1, 0
					    def c7, 0.400000006, 0.600000024, 0.800000012, 1
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xy, c0, v0
					    mul r0.zw, r0.xyxy, c1.x
					    frc r1.xy, r0.zwzw
					    add r1.xy, r0.zwzw, -r1
					    frc r0.zw, r0_abs
					    cmp r0.xy, r0, r0.zwzw, -r0.zwzw
					    mad r0.xy, r0, c6.y, c6.z
					    mad r0.xy, r0, c2, c2.z
					    mul r0.zw, r1.xyxy, c1.y
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul r0.zw, r0, r1.xyxy
					    texld r1, r0.zwzw, s0
					    add r0.z, r1.z, r1.x
					    add r2, -r0.z, c7
					    add r3.xyz, -r0.z, c5
					    cmp r0.z, r2.x, c1.z, c1.w
					    cmp r0.z, r2.y, r0.z, c4.x
					    cmp r0.z, r2.z, r0.z, c4.y
					    cmp r0.z, r2.w, r0.z, c4.z
					    cmp r0.z, r3.x, r0.z, c4.w
					    cmp r0.z, r3.y, r0.z, c5.w
					    cmp r0.z, r3.z, r0.z, c6.x
					    frc r2.xy, r0
					    add r0.xy, r0, -r2
					    mad r0.w, r0.y, c2.w, r0.x
					    exp r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.z, r0.w, r0.z
					    mul r0.z, r0.z, c3.x
					    frc r0.z, r0.z
					    add r0.z, r0.z, r0.z
					    frc r0.w, r0.z
					    add r0.z, r0.z, -r0.w
					    add r0.z, r0.z, -c7.w
					    cmp r1.xyz, -r0_abs.z, r1, c6.w
					    max r2.xy, r0, c6.w
					    min r0.zw, r2.xyxy, c2.x
					    add r0.xy, -r0, r0.zwzw
					    cmp r0.y, -r0_abs.y, -c6_abs.z, -c6_abs.w
					    cmp r0.x, -r0_abs.x, r0.y, c6.w
					    cmp oC0.xyz, r0.x, c6.w, r1
					    mov oC0.w, c7.w
					
					// approximately 43 instruction slots used (1 texture, 42 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bvec4 u_xlatb2;
					bvec3 u_xlatb3;
					vec2 u_xlat8;
					int u_xlati8;
					bool u_xlatb8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.125, 0.125);
					    u_xlat8.xy = floor(u_xlat0.xy);
					    u_xlat8.xy = u_xlat8.xy * vec2(8.0, 8.0);
					    u_xlat8.xy = u_xlat8.xy / _ScreenResolution.xy;
					    u_xlat1 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8.x = u_xlat1.z + u_xlat1.x;
					    u_xlatb2 = lessThan(vec4(0.400000006, 0.600000024, 0.800000012, 1.0), u_xlat8.xxxx);
					    u_xlatb3.xyz = lessThan(vec4(1.20000005, 1.39999998, 1.60000002, 0.0), u_xlat8.xxxx).xyz;
					    u_xlat8.x = (u_xlatb2.x) ? 65600.0 : 65536.0;
					    u_xlat8.x = (u_xlatb2.y) ? 332772.0 : u_xlat8.x;
					    u_xlat8.x = (u_xlatb2.z) ? 15255086.0 : u_xlat8.x;
					    u_xlat8.x = (u_xlatb2.w) ? 23385164.0 : u_xlat8.x;
					    u_xlat8.x = (u_xlatb3.x) ? 15252014.0 : u_xlat8.x;
					    u_xlat8.x = (u_xlatb3.y) ? 13199452.0 : u_xlat8.x;
					    u_xlat8.x = (u_xlatb3.z) ? 11512810.0 : u_xlat8.x;
					    u_xlatb2.xy = greaterThanEqual(u_xlat0.xyxx, (-u_xlat0.xyxx)).xy;
					    u_xlat0.xy = fract(abs(u_xlat0.xy));
					    {
					        vec2 hlslcc_movcTemp = u_xlat0;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat0.x : (-u_xlat0.x);
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat0.y : (-u_xlat0.y);
					        u_xlat0 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, -4.0) + vec2(2.5, 2.5);
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat12 = u_xlat0.y * 5.0 + u_xlat0.x;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat8.x = u_xlat8.x / u_xlat12;
					    u_xlat8.x = u_xlat8.x * 0.5;
					    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
					    u_xlat8.x = fract(u_xlat8.x);
					    u_xlat8.x = (u_xlatb12) ? u_xlat8.x : (-u_xlat8.x);
					    u_xlat8.x = u_xlat8.x + u_xlat8.x;
					    u_xlati8 = int(u_xlat8.x);
					    u_xlatb8 = u_xlati8==1;
					    u_xlat2.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = min(u_xlat2.xy, vec2(4.0, 4.0));
					    u_xlatb0.xy = equal(u_xlat0.xyxx, u_xlat2.xyxx).xy;
					    u_xlatb0.x = u_xlatb0.y && u_xlatb0.x;
					    u_xlatb0.x = u_xlatb8 && u_xlatb0.x;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}