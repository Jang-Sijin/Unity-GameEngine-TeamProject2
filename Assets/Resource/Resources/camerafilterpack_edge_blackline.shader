Shader "CameraFilterPack/Edge_BlackLine" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 59371
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, -0.0199999996, -0.00999999978, 0, 0.00999999978
					    def c1, -0.0199999996, 0.0199999996, -0.00999999978, 24
					    def c2, 0.0199999996, -0.00999999978, 0, -2.39999986
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0, c0.xxxy, v0.xyxy
					    texld_pp r1, r0, s0
					    texld r0, r0.zwzw, s0
					    add_pp r0, -r0, -r1
					    add r1, c0.xzxw, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c1.xyzx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c0.yyyz, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, -c0.wywx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c0.zxzy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    texld r1, v0, s0
					    mad_pp r0, r1, c1.w, r0
					    add r1, c0_abs.zyzx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c0.wxwy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c0.wzww, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, -c1.zxxy, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, c2.xyxz, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add r1, -c0.xyxx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    add_pp r0, r0, -r2
					    add_pp r0, -r1, r0
					    add_pp r1.x, r0.y, r0.x
					    add_pp r1.x, r0.z, r1.x
					    add r1.x, r1.x, c2.w
					    cmp oC0, r1.x, r0, c0.z
					
					// approximately 65 instruction slots used (25 texture, 40 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					int u_xlati1;
					bool u_xlatb1;
					vec2 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					ivec3 u_xlati6;
					bool u_xlatb6;
					vec3 u_xlat7;
					float u_xlat12;
					int u_xlati12;
					bool u_xlatb12;
					vec4 TempArray0[25];
					void main()
					{
					    TempArray0[0].x = -1.0;
					    TempArray0[1].x = -1.0;
					    TempArray0[2].x = -1.0;
					    TempArray0[3].x = -1.0;
					    TempArray0[4].x = -1.0;
					    TempArray0[5].x = -1.0;
					    TempArray0[6].x = -1.0;
					    TempArray0[7].x = -1.0;
					    TempArray0[8].x = -1.0;
					    TempArray0[9].x = -1.0;
					    TempArray0[10].x = -1.0;
					    TempArray0[11].x = -1.0;
					    TempArray0[13].x = -1.0;
					    TempArray0[14].x = -1.0;
					    TempArray0[15].x = -1.0;
					    TempArray0[16].x = -1.0;
					    TempArray0[17].x = -1.0;
					    TempArray0[18].x = -1.0;
					    TempArray0[19].x = -1.0;
					    TempArray0[20].x = -1.0;
					    TempArray0[21].x = -1.0;
					    TempArray0[22].x = -1.0;
					    TempArray0[23].x = -1.0;
					    TempArray0[24].x = -1.0;
					    TempArray0[12].x = 24.0;
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    u_xlat0.w = float(0.0);
					    u_xlati1 = 0;
					    while(true){
					        u_xlatb6 = u_xlati1>=5;
					        if(u_xlatb6){break;}
					        u_xlati6.xy = ivec2(u_xlati1) + ivec2(int(0xFFFFFFFEu), 1);
					        u_xlat2.x = float(u_xlati6.x);
					        u_xlat3 = u_xlat0;
					        u_xlati6.x = 0;
					        while(true){
					            u_xlatb12 = u_xlati6.x>=5;
					            if(u_xlatb12){break;}
					            u_xlati12 = u_xlati1 * 5 + u_xlati6.x;
					            u_xlat12 = TempArray0[u_xlati12].x;
					            u_xlati6.xz = u_xlati6.xx + ivec2(1, int(0xFFFFFFFEu));
					            u_xlat2.y = float(u_xlati6.z);
					            u_xlat7.xz = u_xlat2.xy * vec2(0.00999999978, 0.00999999978) + vs_TEXCOORD0.xy;
					            u_xlat4 = texture(_MainTex, u_xlat7.xz);
					            u_xlat3 = vec4(u_xlat12) * u_xlat4 + u_xlat3;
					        }
					        u_xlat0 = u_xlat3;
					        u_xlati1 = u_xlati6.y;
					    }
					    u_xlat1 = u_xlat0.y + u_xlat0.x;
					    u_xlat1 = u_xlat0.z + u_xlat1;
					    u_xlatb1 = u_xlat1<2.39999986;
					    SV_Target0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 0.0) : u_xlat0;
					    return;
					}"
				}
			}
		}
	}
}