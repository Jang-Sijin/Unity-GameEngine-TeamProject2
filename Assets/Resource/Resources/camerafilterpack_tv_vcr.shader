Shader "CameraFilterPack/TV_Vcr" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(1, 10)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 53391
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, -0.5, 1.20000005, 0.833333313, 0.5
					    def c2, 0.25, 20, 1, 10
					    def c3, 0.0199999996, 4, -0.300000012, 2
					    def c4, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c5, 0.100000001, 5, 0.300000012, 3
					    def c6, 9.99999809, 1, 30, 12
					    def c7, 0.0769230798, 0, 0, 0
					    def c8, 1, 0, -0.899999976, 0.400000006
					    def c9, 8, 16, -0.5, -0.600000024
					    def c10, 0.636619747, 12.7323952, 0.477464825, 0.5
					    def c11, 0.159154937, 3.18309879, 31.8309879, 0.795774698
					    def c12, 0.5, 1, 3, 0.100267611
					    def c13, 1, -1, 0, -0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mad r0.yzw, r0.x, c10.xxyz, c10.w
					    frc r0.yzw, r0
					    mad r0.yzw, r0, c4.z, c4.w
					    sincos r1.x, r0.y
					    mad r0.y, r1.x, c3.y, r0.x
					    mad r0.y, r0.y, c4.x, c4.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c4.z, c4.w
					    sincos r1.y, r0.y
					    add r0.y, r1.y, c3.z
					    cmp r0.y, r0.y, c8.x, c8.y
					    add r1.xy, c1.x, v0
					    mul r1.zw, r1.xyxy, r1.xyxy
					    mul r1.xy, r1.yxzw, c1.y
					    dp2add r1.z, r1.w, r1.z, c1.z
					    mad r2.xy, r1.yxzw, r1.z, c1.w
					    mul r1.xy, r1.z, r1
					    mul r1.xy, r1, r1
					    mad r1.z, r2.y, c2.w, r0.x
					    mad r1.z, r1.z, c4.x, c4.y
					    frc r1.z, r1.z
					    mad r1.z, r1.z, c4.z, c4.w
					    sincos r3.y, r1.z
					    mul r1.z, r3.y, c3.x
					    mul r0.y, r0.y, r1.z
					    sincos r3.x, r0.z
					    sincos r4.x, r0.w
					    mad r0.z, r4.x, c3.w, r0.x
					    mad r0.z, r0.z, c4.x, c4.y
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c4.z, c4.w
					    sincos r4.y, r0.z
					    add r0.z, r4.y, c8.z
					    cmp r0.z, r0.z, c8.w, c8.y
					    add r0.w, r3.x, c2.z
					    mul r0.y, r0.w, r0.y
					    mul r0.w, r0.x, c2.x
					    frc r1.z, r0.w
					    add r0.w, r0.w, -r1.z
					    mad r0.w, r0.x, c2.x, -r0.w
					    add r0.w, -r0.w, r2.y
					    mul r0.w, r0.w, r0.w
					    mad r0.w, r0.w, c2.y, c2.z
					    rcp r0.w, r0.w
					    mad r3.x, r0.y, r0.w, r2.x
					    mov r0.w, c1.w
					    mad r4, r0.x, c11, r0.w
					    frc r4, r4
					    mad r4, r4, c4.z, c4.w
					    sincos r5.y, r4.z
					    sincos r6.xy, r4.x
					    mul r0.y, r5.y, r6.x
					    mul r0.y, r0.y, c5.x
					    sincos r5.y, r4.y
					    sincos r7.x, r4.w
					    mad r0.w, r7.x, c5.y, r0.x
					    mad r0.w, r0.w, c4.x, c4.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c4.z, c4.w
					    sincos r4.y, r0.w
					    mad r0.w, r4.y, c5.z, c5.w
					    mad r1.xy, r1, -r0.w, c2.z
					    mul r0.w, r1.y, r1.x
					    mad r0.y, r6.y, r5.y, r0.y
					    mul r1.y, r6.x, c0.x
					    add r0.y, r0.y, c1.w
					    mad r0.y, r0.z, r0.y, r2.y
					    frc r0.z, r0.y
					    add r0.z, -r0.z, r0.y
					    add r3.y, -r0.z, r0.y
					    texld r3, r3, s0
					    mad r0.y, r0.x, c12.w, c12.x
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c4.z, c4.w
					    sincos r4.y, r0.y
					    add r0.y, r4.y, c0.x
					    mad r0.y, r0.y, c4.x, c4.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c4.z, c4.w
					    sincos r4.y, r0.y
					    mul r0.y, r0.x, c1.w
					    mad r0.y, r2.y, c3.y, r0.y
					    add r0.y, r4.y, r0.y
					    frc r0.z, r0.y
					    add r0.z, -r0.z, r0.y
					    add r0.y, -r0.z, r0.y
					    add r0.yz, r0.y, c9.xzww
					    cmp r1.zw, r0.xyyz, c13.xyxy, c13
					    add r0.z, r1.w, r1.z
					    mul r0.y, r0.z, r0.y
					    mad r0.y, r0.y, -c6.x, c6.y
					    mul r0.y, r0.z, r0.y
					    mad r1.zw, r2.xyxy, c12.xyxy, c12.xyyz
					    mov r1.x, c0.x
					    mad r1.zw, r1.xyxy, c9.xyxy, r1
					    mul r1.xy, r1, c9
					    mad r1.xy, r2, c3.w, r1
					    mad r0.x, r2.y, c6.z, r0.x
					    texld r2, r1, s0
					    mul r0.z, r2.x, r2.x
					    texld r1, r1.zwzw, s0
					    mul r1.x, r1.x, r1.x
					    mad r1.xyz, r0.y, r1.x, r3
					    mad r1.xyz, r0.z, c1.w, r1
					    mul r0.yzw, r0.w, r1.xxyz
					    frc r1.x, r0.x
					    add r1.x, r0.x, -r1.x
					    add r0.x, r0.x, -r1.x
					    add r0.x, r0.x, c6.w
					    mul r0.x, r0.x, c7.x
					    mul oC0.xyz, r0.x, r0.yzww
					    mov oC0.w, c2.z
					
					// approximately 205 instruction slots used (3 texture, 202 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat10;
					vec2 u_xlat11;
					bvec2 u_xlatb11;
					vec2 u_xlat12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = vec4(_TimeX) * vec4(0.25, 4.0, 80.0, 3.0);
					    u_xlat5.xyz = cos(u_xlat0.yzw);
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat0.x = _TimeX * 0.25 + (-u_xlat0.x);
					    u_xlat5.x = u_xlat5.x * 4.0 + _TimeX;
					    u_xlat5.x = sin(u_xlat5.x);
					    u_xlatb5 = u_xlat5.x>=0.300000012;
					    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat11.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.yx * vec2(1.20000005, 1.20000005);
					    u_xlat11.x = dot(u_xlat11.yy, u_xlat11.xx);
					    u_xlat11.x = u_xlat11.x + 0.833333313;
					    u_xlat2.xy = u_xlat1.yx * u_xlat11.xx + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat11.xx * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat11.x = u_xlat2.y * 10.0 + _TimeX;
					    u_xlat11.x = sin(u_xlat11.x);
					    u_xlat11.x = u_xlat11.x * 0.0199999996;
					    u_xlat0.y = u_xlat5.x * u_xlat11.x;
					    u_xlat0.z = u_xlat5.y + 1.0;
					    u_xlat15 = u_xlat5.z * 2.0 + _TimeX;
					    u_xlat15 = sin(u_xlat15);
					    u_xlatb15 = u_xlat15>=0.899999976;
					    u_xlat15 = u_xlatb15 ? 0.400000006 : float(0.0);
					    u_xlat0.x = (-u_xlat0.x) + u_xlat2.y;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x * 20.0 + 1.0;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.y * u_xlat0.x + u_xlat2.x;
					    u_xlat3 = vec4(_TimeX) * vec4(20.0, 200.0, 5.0, 0.5);
					    u_xlat11.xy = sin(u_xlat3.xy);
					    u_xlat10 = u_xlat11.y * 0.100000001;
					    u_xlat3.x = sin(_TimeX);
					    u_xlat4 = cos(_TimeX);
					    u_xlat10 = u_xlat10 * u_xlat4;
					    u_xlat10 = u_xlat3.x * u_xlat11.x + u_xlat10;
					    u_xlat3.y = u_xlat4 * _TimeX;
					    u_xlat10 = u_xlat10 + 0.5;
					    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat2.y;
					    u_xlat15 = floor(u_xlat10);
					    u_xlat0.y = (-u_xlat15) + u_xlat10;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat15 = _TimeX * 0.629999995;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat15 = u_xlat15 + _TimeX;
					    u_xlat15 = sin(u_xlat15);
					    u_xlat11.x = u_xlat2.y * 4.0 + u_xlat3.w;
					    u_xlat16 = cos(u_xlat3.z);
					    u_xlat16 = u_xlat16 * 5.0 + _TimeX;
					    u_xlat16 = sin(u_xlat16);
					    u_xlat16 = u_xlat16 * 0.300000012 + 3.0;
					    u_xlat1.xy = (-u_xlat1.xy) * vec2(u_xlat16) + vec2(1.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat15 = u_xlat15 + u_xlat11.x;
					    u_xlat6.x = floor(u_xlat15);
					    u_xlat15 = u_xlat15 + (-u_xlat6.x);
					    u_xlat6.x = u_xlat15 + -0.5;
					    u_xlatb11.xy = greaterThanEqual(vec4(u_xlat15), vec4(0.5, 0.600000024, 0.5, 0.600000024)).xy;
					    u_xlat15 = u_xlatb11.x ? 1.0 : float(0.0);
					    u_xlat11.x = (u_xlatb11.y) ? -1.0 : -0.0;
					    u_xlat15 = u_xlat15 + u_xlat11.x;
					    u_xlat6.x = u_xlat15 * u_xlat6.x;
					    u_xlat6.x = (-u_xlat6.x) * 9.99999809 + 1.0;
					    u_xlat15 = u_xlat15 * u_xlat6.x;
					    u_xlat6.xy = u_xlat2.xy * vec2(0.5, 1.0) + vec2(1.0, 3.0);
					    u_xlat3.x = _TimeX;
					    u_xlat6.xy = u_xlat3.xy * vec2(8.0, 16.0) + u_xlat6.xy;
					    u_xlat12.xy = u_xlat3.xy * vec2(8.0, 16.0);
					    u_xlat2.xz = u_xlat2.xy * vec2(2.0, 2.0) + u_xlat12.xy;
					    u_xlat16 = u_xlat2.y * 30.0 + _TimeX;
					    u_xlat2 = texture(_MainTex, u_xlat2.xz);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat3 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6.x = u_xlat3.x * u_xlat3.x;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat6.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat2.xxx * vec3(0.5, 0.5, 0.5) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat15 = floor(u_xlat16);
					    u_xlat15 = (-u_xlat15) + u_xlat16;
					    u_xlat15 = u_xlat15 + 12.0;
					    u_xlat15 = u_xlat15 * 0.0769230798;
					    SV_Target0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}