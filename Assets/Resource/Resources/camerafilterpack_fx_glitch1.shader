Shader "CameraFilterPack/FX_Glitch1" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 57841
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 4, 8, 16, 0.0625
					    def c2, 12.9898005, 78.2330017, 0, 43758.5469
					    def c3, 6.28318548, -3.14159274, 5, -0.600000024
					    def c4, 11, 7, 0.0909090936, 0.142857149
					    def c5, 2, -1, 0, 1
					    def c6, 37.5, 0.125, 0.159154937, 0.5
					    def c7, 2.5, 0.100000001, 0.125, 0.99000001
					    def c8, 0.298999995, 0.587000012, 0.114, 3
					    def c9, -0.147129998, -0.288859993, 0.43599999, 0
					    def c10, 0.61500001, -0.514989972, -0.10001, 0
					    def c11, -0.394650012, -0.580600023, 1.13982999, 2.03210998
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.x, c1.z, v0.y
					    frc r0.y, r0.x
					    add r0.x, -r0.y, r0.x
					    mov r1.xy, c1
					    mul r0.yz, r1.xxyw, c0.x
					    frc r1.xy, r0.yzzw
					    add r0.yz, r0, -r1.xxyw
					    mul r0.yz, r0, c6.xxyw
					    mad r0.x, r0.x, c1.w, r0.y
					    dp2add r0.y, r0.z, c2, c2.z
					    mad r0.y, r0.y, c6.z, c6.w
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c3.x, c3.y
					    sincos r1.y, r0.y
					    mul r0.y, r1.y, c2.w
					    frc r0.y, r0.y
					    add r0.y, -r0.y, c7.w
					    dp2add r0.x, r0.x, c2, c2.z
					    mad r0.x, r0.x, c6.z, c6.w
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c3.x, c3.y
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c2.w
					    frc r0.x, r0.x
					    mul r0.x, r0.x, c1.z
					    mul r0.z, r0.x, c0.x
					    rcp r0.x, r0.x
					    frc r0.w, r0.z
					    add r0.z, -r0.w, r0.z
					    mul r0.x, r0.x, r0.z
					    mad r0.x, r0.x, c3.z, v0.y
					    mul r0.xz, r0.x, c4.xyyw
					    frc r1.xy, r0.xzzw
					    add r0.xz, r0, -r1.xyyw
					    mul r0.xz, r0, c4.zyww
					    dp2add r0.z, r0.z, c2, c2.z
					    dp2add r0.x, r0.x, c2, c2.z
					    mad r0.x, r0.x, c6.z, c6.w
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c3.x, c3.y
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c2.w
					    mad r0.z, r0.z, c6.z, c6.w
					    frc r0.xz, r0
					    mad r0.z, r0.z, c3.x, c3.y
					    sincos r1.y, r0.z
					    mul r0.z, r1.y, c2.w
					    frc r0.z, r0.z
					    mul r0.z, r0.z, c6.w
					    mad r0.x, r0.x, c6.w, r0.z
					    mad r0.x, r0.x, c5.x, c5.y
					    cmp r0.z, -r0.x, c5.z, c5.w
					    cmp r0.w, r0.x, -c5.z, -c5.w
					    add r0.x, r0_abs.x, c3.w
					    add r0.z, r0.w, r0.z
					    mul r0.z, r0.z, r0.x
					    mul r0.z, r0.z, c7.x
					    cmp r0.x, r0.x, r0.z, c2.z
					    mul r0.z, r0_abs.x, c8.w
					    add_sat r0.w, -r0.x, c6.w
					    mad r0.z, r0.z, -r0.w, c5.w
					    rcp r0.z, r0.z
					    mul r1.xy, r0.x, c7.yzzw
					    add r0.x, r0.x, -c6.w
					    max r1.w, r0.x, c2.z
					    mov r1.z, c2.z
					    add_sat r2.xy, r1.xzzw, v0
					    add r0.x, -r2.y, c5.w
					    cmp r2.z, r0.y, r2.y, r0.x
					    texld r2, r2.xzzw, s0
					    dp3 r0.x, r2, c9
					    mul r0.x, r0.z, r0.x
					    dp3 r0.z, r2, c10
					    mad r0.y, r1.y, r1.w, r0.z
					    dp3 r0.z, r2, c8
					    mov oC0.w, r2.w
					    dp2add oC0.y, c11, r0, r0.z
					    mad oC0.xz, r0.yyxw, c11.zyww, r0.z
					
					// approximately 111 instruction slots used (1 texture, 110 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					ivec2 u_xlati4;
					float u_xlat8;
					int u_xlati8;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.y * 16.0;
					    u_xlat0.yz = vec2(_TimeX) * vec2(4.0, 8.0);
					    u_xlat0.xyz = floor(u_xlat0.xyz);
					    u_xlat4.xy = u_xlat0.yz * vec2(37.5, 0.125);
					    u_xlat0.x = u_xlat0.x * 0.0625 + u_xlat4.x;
					    u_xlat4.x = dot(u_xlat4.yy, vec2(12.9898005, 78.2330017));
					    u_xlat4.x = sin(u_xlat4.x);
					    u_xlat4.x = u_xlat4.x * 43758.5469;
					    u_xlat0.y = fract(u_xlat4.x);
					    u_xlat0.x = dot(u_xlat0.xx, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 43758.5469;
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat8 = u_xlat0.x * _TimeX;
					    u_xlat8 = floor(u_xlat8);
					    u_xlat0.x = u_xlat8 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 5.0 + vs_TEXCOORD0.y;
					    u_xlat0.xz = u_xlat0.xx * vec2(11.0, 7.0);
					    u_xlat0.xz = floor(u_xlat0.xz);
					    u_xlat0.xz = u_xlat0.xz * vec2(0.0909090936, 0.142857149);
					    u_xlat0.z = dot(u_xlat0.zz, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = dot(u_xlat0.xx, vec2(12.9898005, 78.2330017));
					    u_xlat0.xz = sin(u_xlat0.xz);
					    u_xlat0.xz = u_xlat0.xz * vec2(43758.5469, 43758.5469);
					    u_xlat0.xz = fract(u_xlat0.xz);
					    u_xlat8 = u_xlat0.z * 0.5;
					    u_xlat0.x = u_xlat0.x * 0.5 + u_xlat8;
					    u_xlat0.x = u_xlat0.x * 2.0 + -1.0;
					    u_xlati4.xy = ivec2(uvec2(lessThan(vec4(0.99000001, 0.0, 0.0, 0.0), u_xlat0.yxyy).xy) * 0xFFFFFFFFu);
					    u_xlati12 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlat0.x = abs(u_xlat0.x) + -0.600000024;
					    u_xlat0.x = u_xlat0.x * 2.5;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlati8 = (-u_xlati4.y) + u_xlati12;
					    u_xlat8 = float(u_xlati8);
					    u_xlat12 = (-u_xlat8) * u_xlat0.x + 0.5;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat1.x = u_xlat0.x * u_xlat8;
					    u_xlat0.x = u_xlat8 * u_xlat0.x + -0.5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = abs(u_xlat1.x) * 3.0;
					    u_xlat1.xy = u_xlat1.xx * vec2(0.100000001, 0.125);
					    u_xlat8 = (-u_xlat8) * u_xlat12 + 1.0;
					    u_xlat1.z = 0.0;
					    u_xlat2.xy = u_xlat1.xz + vs_TEXCOORD0.xy;
					    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
					    u_xlat12 = (-u_xlat2.y) + 1.0;
					    u_xlat2.z = (u_xlati4.x != 0) ? u_xlat12 : u_xlat2.y;
					    u_xlat2 = texture(_MainTex, u_xlat2.xz);
					    u_xlat4.x = dot(u_xlat2.xyz, vec3(-0.147129998, -0.288859993, 0.43599999));
					    u_xlat3.x = u_xlat4.x / u_xlat8;
					    u_xlat4.x = dot(u_xlat2.xyz, vec3(0.61500001, -0.514989972, -0.10001));
					    u_xlat3.y = u_xlat1.y * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = dot(vec2(-0.394650012, -0.580600023), u_xlat3.xy);
					    u_xlat4.x = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    SV_Target0.w = u_xlat2.w;
					    SV_Target0.y = u_xlat0.x + u_xlat4.x;
					    SV_Target0.xz = u_xlat3.yx * vec2(1.13982999, 2.03210998) + u_xlat4.xx;
					    return;
					}"
				}
			}
		}
	}
}