Shader "CameraFilterPack/TV_Artefact" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Colorisation ("_Colorisation", Range(1, 10)) = 1
		_Parasite ("_Parasite", Range(1, 10)) = 1
		_Noise ("_Noise", Range(1, 10)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 27528
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Colorisation;
					//   sampler2D _MainTex;
					//   float _Noise;
					//   float _Parasite;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name          Reg   Size
					//   ------------- ----- ----
					//   _TimeX        c0       1
					//   _Colorisation c1       1
					//   _Parasite     c2       1
					//   _Noise        c3       1
					//   _MainTex      s0       1
					//
					
					    ps_3_0
					    def c4, 24, 9, 8, 4
					    def c5, 12, 127.099998, 311.700012, 0
					    def c6, 43758.5469, 1, -2, 17
					    def c7, 31, 1, 0.0799999982, 0.200000003
					    def c8, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c9, 7.23409986, 1, 5, 0.0500000007
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0, c4, v0.xyxy
					    frc r1, r0
					    add r0, r0, -r1
					    mov r1.x, c5.x
					    mul r1.x, r1.x, c0.x
					    frc r1.y, r1.x
					    add r1.x, -r1.y, r1.x
					    mul r0, r0, r1.x
					    dp2add r0.x, r0, c5.yzzw, c5.w
					    dp2add r0.y, r0.zwzw, c5.yzzw, c5.w
					    mad r0.y, r0.y, c8.x, c8.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c8.z, c8.w
					    sincos r2.y, r0.y
					    mul r0.y, r2.y, c6.x
					    mad r0.x, r0.x, c8.x, c8.y
					    frc r0.xy, r0
					    mad r0.x, r0.x, c8.z, c8.w
					    sincos r2.y, r0.x
					    mul r0.x, r2.y, c6.x
					    frc r0.x, r0.x
					    mul r0.xz, r0.xyyw, r0.xyyw
					    mul r0.xy, r0.xzzw, r0
					    mul r0.x, r0.x, r0.x
					    mul r0.x, r0.x, c2.x
					    mul r2, r1.x, c9.xyzy
					    dp2add r0.z, r2, c5.yzzw, c5.w
					    dp2add r0.w, r2.zwzw, c5.yzzw, c5.w
					    mad r0.w, r0.w, c8.x, c8.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c8.z, c8.w
					    sincos r2.y, r0.w
					    mul r0.w, r2.y, c6.x
					    mad r0.z, r0.z, c8.x, c8.y
					    frc r0.zw, r0
					    mad r0.z, r0.z, c8.z, c8.w
					    sincos r2.y, r0.z
					    mul r0.z, r2.y, c6.x
					    frc r0.z, r0.z
					    pow r1.y, r0.z, c6.w
					    add r0.z, r1.y, r1.y
					    mad r0.x, r0.x, r0.y, -r0.z
					    mul r0.x, r0.x, c9.w
					    mul r0.yz, r1.x, c7.xxyw
					    mul r1.xy, r1.x, v0
					    dp2add r1.x, r1, c5.yzzw, c5.w
					    mad r1.x, r1.x, c8.x, c8.y
					    frc r1.x, r1.x
					    mad r1.x, r1.x, c8.z, c8.w
					    sincos r2.y, r1.x
					    mul r1.x, r2.y, c6.x
					    frc r1.x, r1.x
					    dp2add r0.y, r0.yzzw, c5.yzzw, c5.w
					    mad r0.y, r0.y, c8.x, c8.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c8.z, c8.w
					    sincos r2.y, r0.y
					    mul r0.y, r2.y, c6.x
					    frc r0.y, r0.y
					    mul r2.xz, r0.wyyw, r0.x
					    mov r2.yw, c5.w
					    add r0.xy, -r2.zwzw, v0
					    add r0.zw, r2.xyxy, v0.xyxy
					    texld r2, r0.zwzw, s0
					    texld r0, r0, s0
					    mov r2.z, r0.z
					    mov r0.yz, c6
					    mad r1.y, r1.x, -c1.x, r0.y
					    mad r1.z, r1.x, c8.y, c8.y
					    mad r0.xyz, r1, c3.x, r0.z
					    texld r1, v0, s0
					    mov r2.x, r1.x
					    mad oC0.xyz, r0, c7.z, r2
					    mov oC0.w, c7.w
					
					// approximately 124 instruction slots used (3 texture, 121 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Colorisation;
						float _Parasite;
						float _Noise;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(24.0, 9.0, 8.0, 4.0);
					    u_xlat0 = floor(u_xlat0);
					    u_xlat1.x = _TimeX * 12.0;
					    u_xlat1.x = floor(u_xlat1.x);
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(127.099998, 311.700012));
					    u_xlat0.y = dot(u_xlat0.zw, vec2(127.099998, 311.700012));
					    u_xlat0.xy = sin(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(43758.5469, 43758.5469);
					    u_xlat0.xy = fract(u_xlat0.xy);
					    u_xlat0.xz = u_xlat0.xy * u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xz * u_xlat0.xy;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Parasite;
					    u_xlat2 = u_xlat1.xxxx * vec4(7.23409986, 1.0, 5.0, 1.0);
					    u_xlat6.x = dot(u_xlat2.xy, vec2(127.099998, 311.700012));
					    u_xlat6.y = dot(u_xlat2.zw, vec2(127.099998, 311.700012));
					    u_xlat6.xy = sin(u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * vec2(43758.5469, 43758.5469);
					    u_xlat3.yz = fract(u_xlat6.xy);
					    u_xlat6.x = log2(u_xlat3.y);
					    u_xlat6.x = u_xlat6.x * 17.0;
					    u_xlat6.x = exp2(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x + u_xlat6.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.y + (-u_xlat6.x);
					    u_xlat3.xy = u_xlat1.xx * vec2(31.0, 1.0);
					    u_xlat1.xy = u_xlat1.xx * vs_TEXCOORD0.xy;
					    u_xlat1.x = dot(u_xlat1.xy, vec2(127.099998, 311.700012));
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 43758.5469;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat3.x = dot(u_xlat3.xy, vec2(127.099998, 311.700012));
					    u_xlat0.y = sin(u_xlat3.x);
					    u_xlat0.xy = u_xlat0.xy * vec2(0.0500000007, 43758.5469);
					    u_xlat3.x = fract(u_xlat0.y);
					    u_xlat2.xz = u_xlat3.zx * u_xlat0.xx;
					    u_xlat2.y = float(0.0);
					    u_xlat2.w = float(0.0);
					    u_xlat0.xy = (-u_xlat2.zw) + vs_TEXCOORD0.xy;
					    u_xlat6.xy = u_xlat2.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat6.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat2.z = u_xlat0.z;
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2.x = u_xlat0.x;
					    u_xlat1.y = (-u_xlat1.x) * _Colorisation + 1.0;
					    u_xlat1.z = u_xlat1.x * 0.5 + 0.5;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(vec3(_Noise, _Noise, _Noise)) + vec3(-2.0, -2.0, -2.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.0799999982, 0.0799999982, 0.0799999982) + u_xlat2.xyz;
					    SV_Target0.w = 0.200000003;
					    return;
					}"
				}
			}
		}
	}
}