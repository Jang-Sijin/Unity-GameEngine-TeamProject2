Shader "CameraFilterPack/Blur_Dithering2x2" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Level ("_Level", Range(1, 16)) = 4
		_Distance ("_Distance", Vector) = (30,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 13680
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Distance;
					//   float _Level;
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Level            c1       1
					//   _Distance         c2       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c3, 0, 1, 0.5, -1
					    def c4, -0, -1, -3, 0
					    def c5, 0.75, 0.25, 0.5, 0
					    defi i0, 255, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    frc r0.x, c1.x
					    add r0.y, -r0.x, c1.x
					    cmp r0.x, -r0.x, c3.x, c3.y
					    mov r1.x, c3.x
					    cmp r0.x, c1.x, r1.x, r0.x
					    add r0.x, r0.x, r0.y
					    rcp r1.x, c0.x
					    rcp r1.y, c0.y
					    mul r0.yz, r1.xxyw, c2.xxyw
					    mad r1.xy, r0.yzzw, -c3.z, v0
					    mad r0.yz, r0, c3.z, v0.xxyw
					    add r0.yz, -r1.xxyw, r0
					    add r0.w, r0.x, c3.w
					    rcp r0.w, r0.w
					    mul r1.zw, r0.w, r0.xyyz
					    mul r2.xy, c0, v0
					    mul r2.zw, r2.xyxy, c3.z
					    frc r2.zw, r2_abs
					    cmp r2.xy, r2, r2.zwzw, -r2.zwzw
					    add r2.xy, r2, r2
					    frc r2.zw, r2.xyxy
					    add r2.xy, -r2.zwzw, r2
					    add r2.x, r2.y, r2.x
					    add r2.xyz, r2.x, c4
					    add r2.xyz, -r2_abs, c3.z
					    cmp r2.xyz, r2, c5, c5.w
					    add r2.x, r2.y, r2.x
					    add r2.x, r2.z, r2.x
					    mad r1.xy, r2.x, r1.zwzw, r1
					    mov r1.zw, c3.x
					    texldl r2, r1, s0
					    mov r3.zw, c3.x
					    mov r4, r2
					    mov r3.xy, r1
					    mov r1.z, c3.y
					    rep i0
					      mov r1.w, r0.x
					      break_ge r1.z, r1.w
					      mad r3.xy, r0.yzzw, r0.w, r3
					      texldl r5, r3, s0
					      add r4, r4, r5
					      add r1.z, r1.z, c3.y
					    endrep
					    rcp r0.x, r0.x
					    mul oC0, r0.x, r4
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Level;
						vec4 _Distance;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					int u_xlati0;
					vec2 u_xlat1;
					vec4 u_xlat2;
					bvec2 u_xlatb2;
					vec4 u_xlat3;
					int u_xlati4;
					vec4 u_xlat5;
					float u_xlat6;
					bool u_xlatb10;
					vec2 u_xlat12;
					vec2 u_xlat13;
					bvec2 u_xlatb13;
					void main()
					{
					    u_xlati0 = int(_Level);
					    u_xlat6 = trunc(_Level);
					    u_xlat12.xy = _Distance.xy / _ScreenResolution.xy;
					    u_xlat1.xy = (-u_xlat12.xy) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat12.xy = u_xlat12.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat12.xy = (-u_xlat1.xy) + u_xlat12.xy;
					    u_xlat13.x = u_xlat6 + -1.0;
					    u_xlat12.xy = u_xlat12.xy / u_xlat13.xx;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat13.xy = u_xlat13.xy * vec2(0.5, 0.5);
					    u_xlatb2.xy = greaterThanEqual(u_xlat13.xyxx, (-u_xlat13.xyxx)).xy;
					    u_xlat13.xy = fract(abs(u_xlat13.xy));
					    {
					        vec2 hlslcc_movcTemp = u_xlat13;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat13.x : (-u_xlat13.x);
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat13.y : (-u_xlat13.y);
					        u_xlat13 = hlslcc_movcTemp;
					    }
					    u_xlat13.xy = u_xlat13.xy + u_xlat13.xy;
					    u_xlat13.xy = floor(u_xlat13.xy);
					    u_xlat13.x = u_xlat13.y + u_xlat13.x;
					    u_xlat13.xy = u_xlat13.xx + vec2(-0.0, -1.0);
					    u_xlatb13.xy = greaterThanEqual(vec4(0.5, 0.5, 0.5, 0.5), abs(u_xlat13.xyxy)).xy;
					    u_xlat13.x = u_xlatb13.x ? float(0.75) : 0.0;
					    u_xlat13.y = u_xlatb13.y ? float(0.25) : 0.0;
					;
					    u_xlat13.x = u_xlat13.y + u_xlat13.x;
					    u_xlat1.xy = u_xlat13.xx * u_xlat12.xy + u_xlat1.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat3 = u_xlat2;
					    u_xlat13.xy = u_xlat1.xy;
					    for(int u_xlati_loop_1 = 1 ; u_xlati_loop_1<u_xlati0 ; u_xlati_loop_1++)
					    {
					        u_xlat13.xy = u_xlat12.xy + u_xlat13.xy;
					        u_xlat5 = textureLod(_MainTex, u_xlat13.xy, 0.0);
					        u_xlat3 = u_xlat3 + u_xlat5;
					    }
					    SV_Target0 = u_xlat3 / vec4(u_xlat6);
					    return;
					}"
				}
			}
		}
	}
}