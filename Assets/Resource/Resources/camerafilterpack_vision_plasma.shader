Shader "CameraFilterPack/Vision_Plasma" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 4391
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Value       c1       1
					//   _Value2      c2       1
					//   _Value3      c3       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c4, 0.330000013, 0.924000025, 8.79199982, 0.5
					    def c5, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c6, 1.60000002, 0.206901416, 0.5, -0.0500000007
					    def c7, -2, 3, 6.28000021, 0.400000006
					    def c8, 0, 0.891267657, 0.5, 1
					    def c9, 4.61999989, 0.105042264, 0.0892859325, 0.5
					    def c10, 1.13850009, 1.03950012, 0.415800005, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mad r0.yz, r0.x, c9, c9.w
					    frc r0.yz, r0
					    mad r0.yz, r0, c5.z, c5.w
					    sincos r1.x, r0.y
					    sincos r2.y, r0.z
					    mul r2.x, r1.x, c6.x
					    add r0.yz, -r2.xxyw, v0.xxyw
					    dp2add r0.y, r0.yzzw, r0.yzzw, c8.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mad r0.y, r0.y, c6.y, c6.z
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c5.z, c5.w
					    sincos r1.x, r0.y
					    mov r1.z, r1.x
					    mul r0.yz, r0.x, c4.xxyw
					    mad r0.z, v0.x, c4.z, r0.z
					    mad r0.z, r0.z, c5.x, c5.y
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c5.z, c5.w
					    sincos r2.y, r0.z
					    mad r2.x, r2.y, c4.w, c4.w
					    mov r2.y, c4.w
					    add r0.zw, -r2.xyxy, v0.xyxy
					    dp2add r0.z, r0.zwzw, r0.zwzw, c8.x
					    rsq r0.z, r0.z
					    rcp r0.z, r0.z
					    mad r0.z, r0.z, c8.y, c8.z
					    frc r0.z, r0.z
					    mad r0.z, r0.z, c5.z, c5.w
					    sincos r2.x, r0.z
					    add r0.z, r2.x, c8.w
					    mul r1.x, r0.z, c4.w
					    dp2add r0.z, v0, v0, c8.x
					    mad r0.y, r0.z, c9.x, r0.y
					    mad r0.y, r0.y, c5.x, c5.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c5.z, c5.w
					    sincos r2.x, r0.y
					    mov r1.y, r2.x
					    dp3 r0.y, r1, c8.w
					    rcp r0.z, c3.x
					    mul r0.y, r0.z, r0.y
					    mul r0.xzw, r0.x, c10.xyyz
					    mad r0.xyz, r0.y, c7.z, r0.xzww
					    mad r0.xyz, r0, c5.x, c5.y
					    frc r0.xyz, r0
					    mad r0.xyz, r0, c5.z, c5.w
					    sincos r1.y, r0.x
					    add r0.x, r1.y, c8.w
					    mul r1.x, r0.x, c4.w
					    sincos r2.y, r0.y
					    sincos r3.y, r0.z
					    add r0.x, r3.y, c8.w
					    mul r1.z, r0.x, c7.w
					    add r0.x, r2.y, c8.w
					    mul r1.y, r0.x, c4.w
					    texld r0, v0, s0
					    add r1.xyz, -r0, r1
					    add r2.xy, c4.w, -v0
					    dp2add r0.w, r2, r2, c8.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    add r0.w, r0.w, -c1.x
					    mov r1.w, c6.w
					    add r1.w, r1.w, c1.x
					    add r1.w, r1.w, -c2.x
					    add r1.w, r1.w, -c1.x
					    rcp r1.w, r1.w
					    mul_sat r0.w, r0.w, r1.w
					    mad r1.w, r0.w, c7.x, c7.y
					    mul r0.w, r0.w, r0.w
					    mad r0.w, r1.w, -r0.w, c8.w
					    mad oC0.xyz, r0.w, r1, r0
					    mov oC0.w, c8.w
					
					// approximately 143 instruction slots used (1 texture, 142 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						float _Value2;
						float _Value3;
						vec4 unused_0_5;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat6;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = vec4(_TimeX) * vec4(0.330000013, 0.924000025, 0.660000026, 0.561000049);
					    u_xlat6.x = cos(u_xlat0.z);
					    u_xlat1.x = u_xlat6.x * 1.60000002;
					    u_xlat1.y = sin(u_xlat0.w);
					    u_xlat6.xy = (-u_xlat1.xy) + vs_TEXCOORD0.xy;
					    u_xlat6.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat6.x * 1.29999995;
					    u_xlat1.z = cos(u_xlat6.x);
					    u_xlat3.x = vs_TEXCOORD0.x * 8.79199982 + u_xlat0.y;
					    u_xlat3.x = sin(u_xlat3.x);
					    u_xlat2.x = u_xlat3.x * 0.5 + 0.5;
					    u_xlat2.y = 0.5;
					    u_xlat3.xy = (-u_xlat2.xy) + vs_TEXCOORD0.xy;
					    u_xlat3.x = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * 5.5999999;
					    u_xlat3.x = cos(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x + 1.0;
					    u_xlat1.x = u_xlat3.x * 0.5;
					    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat3.x * 4.61999989 + u_xlat0.x;
					    u_xlat1.y = cos(u_xlat0.x);
					    u_xlat0.x = dot(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
					    u_xlat0.x = u_xlat0.x / _Value3;
					    u_xlat3.xyz = vec3(_TimeX) * vec3(1.13850009, 1.03950012, 0.415800005);
					    u_xlat0.xyz = u_xlat0.xxx * vec3(6.28000021, 6.28000021, 6.28000021) + u_xlat3.xyz;
					    u_xlat0.xyz = sin(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.400000006) + (-u_xlat1.xyz);
					    u_xlat2.xy = (-vs_TEXCOORD0.xy) + vec2(0.5, 0.5);
					    u_xlat9 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 + (-_Value);
					    u_xlat10 = _Value + -0.0500000007;
					    u_xlat10 = u_xlat10 + (-_Value2);
					    u_xlat10 = u_xlat10 + (-_Value);
					    u_xlat10 = float(1.0) / u_xlat10;
					    u_xlat9 = u_xlat9 * u_xlat10;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat10 = u_xlat9 * -2.0 + 3.0;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat9 = (-u_xlat10) * u_xlat9 + 1.0;
					    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}