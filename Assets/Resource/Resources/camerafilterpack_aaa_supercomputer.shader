Shader "CameraFilterPack/AAA_Super_Computer" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0.2, 10)) = 8.1
		_BorderSize ("_BorderSize", Range(-0.5, 0.5)) = 0
		_BorderColor ("_BorderColor", Vector) = (0,0.5,1,1)
		_SpotSize ("_SpotSize", Range(0, 1)) = 0.5
		_AlphaHexa ("_AlphaHexa", Range(0.2, 10)) = 0.608
		_PositionX ("_PositionX", Range(-0.5, 0.5)) = 0
		_PositionY ("_PositionY", Range(-0.5, 0.5)) = 0
		_Radius ("_Radius", Range(0, 1)) = 0.5
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 32825
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AlphaHexa;
					//   float4 _BorderColor;
					//   float _BorderSize;
					//   sampler2D _MainTex;
					//   float _PositionX;
					//   float _PositionY;
					//   float _Radius;
					//   float _SpotSize;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Value       c1       1
					//   _Value2      c2       1
					//   _BorderSize  c3       1
					//   _BorderColor c4       1
					//   _AlphaHexa   c5       1
					//   _PositionX   c6       1
					//   _PositionY   c7       1
					//   _Radius      c8       1
					//   _SpotSize    c9       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c10, -0.5, 1.29999995, 3048.65601, -0.159154937
					    def c11, 5.5, 0.100000001, 2345.12012, -0.865617037
					    def c12, 6.28318548, -3.14159274, 43758.5469, 1
					    def c13, 0.800000012, 0.400000006, 0, 0
					    def c14, 0, 0.600000024, 1, 5
					    def c15, 8, 591.320007, 154.076996, 50
					    def c16, 391.320007, 49.0769997, 10, 12.5
					    def c17, -2, 3, 1.5, 3.33333325
					    def c18, 0.699999988, 3, 1.20000005, 2.5
					    def c19, 0.150000006, 0, 0, 0
					    defi i0, 3, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    add r1.xy, c10.x, v0
					    add r1.zw, r1.xyxy, r1.xyxy
					    mov r2.xyz, c10
					    mul r2.yz, r2, c0.x
					    frc r2.zw, r2.xyyz
					    add r0.w, -r2.z, r2.y
					    mad r2.y, r0.w, -c10.w, -c10.x
					    frc r2.y, r2.y
					    mad r2.y, r2.y, c12.x, c12.y
					    sincos r3.y, r2.y
					    mul r2.y, r3.y, c12.z
					    frc r2.y, r2.y
					    add r0.w, r0.w, c12.w
					    mad r0.w, r0.w, -c10.w, -c10.x
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c12.x, c12.y
					    sincos r3.y, r0.w
					    mul r0.w, r3.y, c12.z
					    frc r0.w, r0.w
					    lrp r3.x, r2.w, r0.w, r2.y
					    mad r0.w, r3.x, c13.x, c13.y
					    mov r2.yzw, c14.xxyz
					    mov r3.x, c13.w
					    rep i0
					      mul r3.yz, r1.xzww, r2.w
					      mad r4.xy, r1.zwzw, r2.w, c14.w
					      frc r4.zw, r3.xyyz
					      add r4.xy, -r4.zwzw, r4
					      mov r5.xy, c15.x
					      mov r6.y, -c12.w
					      rep i0
					        mov r5.zw, r5.xyxy
					        mov r6.x, -c12.w
					        rep i0
					          add r6.zw, -r4, r6.xyxy
					          add r7.xy, r4, r6
					          mov r8.x, c0.x
					          dp2add r3.w, r7, c15.yzzw, r8.x
					          mad r3.w, r3.w, -c10.w, -c10.x
					          frc r3.w, r3.w
					          mad r3.w, r3.w, c12.x, c12.y
					          sincos r9.y, r3.w
					          dp2add r3.w, r7, c16, r8.x
					          mad r3.w, r3.w, -c10.w, -c10.x
					          frc r3.w, r3.w
					          mad r3.w, r3.w, c12.x, c12.y
					          sincos r7.x, r3.w
					          frc r8.x, r9.y
					          frc r8.y, r7.x
					          mad r6.zw, r8.xyxy, c3.x, r6
					          max r7.x, r6_abs.z, r6_abs.w
					          add r6.zw, -r5, r7.x
					          cmp r7.y, r6.w, r5.w, r7.x
					          mov r7.z, r5.z
					          cmp r5.zw, r6.z, r7.xyzy, r7.xyxz
					          add r6.x, r6.x, c12.w
					        endrep
					        mov r5.xy, r5.zwzw
					        add r6.y, r6.y, c12.w
					      endrep
					      mad r3.w, r5.x, -c2.x, r5.y
					      if_lt -r3.x, c13.w
					        mad r3.yz, r3, -r2.x, c0.x
					        add r4.xy, r3.yzzw, c15.w
					        frc r3.yz, r3
					        add r4.xy, -r3.yzzw, r4
					        mov r4.zw, c15.x
					        mov r6.y, -c12.w
					        rep i0
					          mov r6.zw, r4
					          mov r6.x, -c12.w
					          rep i0
					            add r7.xy, -r3.yzzw, r6
					            add r7.zw, r4.xyxy, r6.xyxy
					            mov r8.x, c0.x
					            dp2add r8.y, r7.zwzw, c15.yzzw, r8.x
					            mad r8.y, r8.y, -c10.w, -c10.x
					            frc r8.y, r8.y
					            mad r8.y, r8.y, c12.x, c12.y
					            sincos r9.y, r8.y
					            dp2add r7.z, r7.zwzw, c16, r8.x
					            mad r7.z, r7.z, -c10.w, -c10.x
					            frc r7.z, r7.z
					            mad r7.z, r7.z, c12.x, c12.y
					            sincos r8.x, r7.z
					            frc r9.x, r9.y
					            frc r9.y, r8.x
					            mad r7.xy, r9, c3.x, r7
					            max r8.x, r7_abs.x, r7_abs.y
					            add r7.xy, -r6.zwzw, r8.x
					            cmp r8.y, r7.y, r6.w, r8.x
					            mov r8.z, r6.z
					            cmp r6.zw, r7.x, r8.xyzy, r8.xyxz
					            add r6.x, r6.x, c12.w
					          endrep
					          mov r4.zw, r6
					          add r6.y, r6.y, c12.w
					        endrep
					        mad r3.y, r4.z, -c2.x, r4.w
					        mul_sat r3.z, r3.w, c16.z
					        mad r4.x, r3.z, c17.x, c17.y
					        mul r3.z, r3.z, r3.z
					        mad r3.z, r4.x, -r3.z, c12.w
					        mul_sat r3.y, r3.y, c16.w
					        mad r4.x, r3.y, c17.x, c17.y
					        mul r3.y, r3.y, r3.y
					        mad r3.y, r4.x, -r3.y, c17.z
					        mul r3.y, r3.y, r3.z
					        mul r3.y, r3.y, r3.y
					        mad r2.y, r2.z, r3.y, r2.y
					      endif
					      mul_sat r3.y, r3.w, c17.w
					      mad r3.z, r3.y, c17.x, c17.y
					      mul r3.y, r3.y, r3.y
					      mad r3.y, r3.z, -r3.y, c12.w
					      mad r3.y, r3.y, c11.x, c11.y
					      frc r3.z, r3.y
					      add r3.z, -r3.z, r3.y
					      mul r3.y, r3.y, c11.z
					      mad r3.w, r3.z, -c10.w, -c10.x
					      frc r3.yw, r3
					      mad r3.w, r3.w, c12.x, c12.y
					      sincos r7.y, r3.w
					      mul r3.w, r7.y, c12.z
					      add r3.z, r3.z, c12.w
					      mad r3.z, r3.z, -c10.w, -c10.x
					      frc r3.zw, r3
					      mad r3.z, r3.z, c12.x, c12.y
					      sincos r7.y, r3.z
					      mul r3.z, r7.y, c12.z
					      frc r3.z, r3.z
					      lrp r4.x, r3.y, r3.z, r3.w
					      mul r3.y, r2.z, r4.x
					      mad r3.y, r3.y, r0.w, r2.y
					      mad r3.z, r2.z, r4.x, r2.y
					      cmp r2.y, -r3.x, r3.y, r3.z
					      mul r2.zw, r2, c18.xyxy
					      add r3.x, r3.x, c12.w
					    endrep
					    dp2add r0.w, r1.zwzw, r1.zwzw, c13.w
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c11.w
					    exp r0.w, r0.w
					    mul r0.w, r2.y, r0.w
					    mul r0.w, r0.w, c18.z
					    pow r1.z, r0.w, c18.w
					    mul r0.w, r1.z, c1.x
					    mov r2.x, c9.x
					    mul r1.z, r2.x, c19.x
					    mov r2.x, c17.x
					    mad r3.x, r1.x, r2.x, c6.x
					    mad r3.y, r1.y, r2.x, c7.x
					    dp2add r1.x, r3, r3, c13.w
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.x, r1.x, -c8.x
					    rcp r1.y, r1.z
					    mul_sat r1.x, r1.y, r1.x
					    mad r1.y, r1.x, c17.x, c17.y
					    mul r1.x, r1.x, r1.x
					    mad r1.x, r1.y, -r1.x, c12.w
					    mad r1.yzw, r0.w, c4.xxyz, r0.xxyz
					    lrp r2.xyz, r1.x, r0, r1.yzww
					    mov r0.w, c12.w
					    add r0.w, r0.w, -c5.x
					    add r0.xyz, r0, -r2
					    mad oC0.xyz, r0.w, r0, r2
					    mov oC0.w, c12.w
					
					// approximately 251 instruction slots used (1 texture, 250 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						vec4 unused_0_2;
						float _Value;
						float _Value2;
						float _BorderSize;
						vec4 _BorderColor;
						float _AlphaHexa;
						float _PositionX;
						float _PositionY;
						float _Radius;
						float _SpotSize;
						vec4 unused_0_12;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					vec4 u_xlat5;
					int u_xlati5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					vec3 u_xlat7;
					int u_xlati7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat11;
					float u_xlat12;
					vec2 u_xlat14;
					bool u_xlatb14;
					vec2 u_xlat16;
					bvec2 u_xlatb16;
					vec2 u_xlat19;
					vec2 u_xlat21;
					vec2 u_xlat22;
					vec2 u_xlat24;
					bool u_xlatb24;
					float u_xlat27;
					int u_xlati29;
					float u_xlat30;
					int u_xlati30;
					bool u_xlatb30;
					int u_xlati32;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat19.xy = u_xlat1.xy + u_xlat1.xy;
					    u_xlat2.xy = vec2(_TimeX) * vec2(1.29999995, 3048.65601);
					    u_xlat27 = floor(u_xlat2.x);
					    u_xlat2.x = fract(u_xlat2.y);
					    u_xlat11.x = sin(u_xlat27);
					    u_xlat11.x = u_xlat11.x * 43758.5469;
					    u_xlat11.x = fract(u_xlat11.x);
					    u_xlat27 = u_xlat27 + 1.0;
					    u_xlat27 = sin(u_xlat27);
					    u_xlat27 = u_xlat27 * 43758.5469;
					    u_xlat27 = fract(u_xlat27);
					    u_xlat27 = (-u_xlat11.x) + u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + u_xlat11.x;
					    u_xlat27 = u_xlat27 * 0.800000012 + 0.400000006;
					    u_xlat2.x = float(0.0);
					    u_xlat11.x = float(0.600000024);
					    u_xlat11.y = float(1.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<3 ; u_xlati_loop_1++)
					    {
					        u_xlat3.xy = u_xlat19.xy * u_xlat11.yy;
					        u_xlat21.xy = u_xlat19.xy * u_xlat11.yy + vec2(5.0, 5.0);
					        u_xlat21.xy = floor(u_xlat21.xy);
					        u_xlat4.xy = fract(u_xlat3.xy);
					        u_xlat22.x = float(8.0);
					        u_xlat22.y = float(8.0);
					        for(int u_xlati_loop_2 = int(0xFFFFFFFFu) ; u_xlati_loop_2<=1 ; u_xlati_loop_2++)
					        {
					            u_xlat6.y = float(u_xlati_loop_2);
					            u_xlat14.xy = u_xlat22.xy;
					            for(int u_xlati_loop_3 = int(0xFFFFFFFFu) ; u_xlati_loop_3<=1 ; u_xlati_loop_3++)
					            {
					                u_xlat6.x = float(u_xlati_loop_3);
					                u_xlat24.xy = (-u_xlat4.xy) + u_xlat6.xy;
					                u_xlat7.xy = u_xlat21.xy + u_xlat6.xy;
					                u_xlat6.x = dot(u_xlat7.xy, vec2(591.320007, 154.076996));
					                u_xlat6.x = u_xlat6.x + _TimeX;
					                u_xlat6.x = sin(u_xlat6.x);
					                u_xlat7.x = dot(u_xlat7.xy, vec2(391.320007, 49.0769997));
					                u_xlat7.x = u_xlat7.x + _TimeX;
					                u_xlat7.x = cos(u_xlat7.x);
					                u_xlat8.x = fract(u_xlat6.x);
					                u_xlat8.y = fract(u_xlat7.x);
					                u_xlat6.xz = u_xlat8.xy * vec2(vec2(_BorderSize, _BorderSize)) + u_xlat24.xy;
					                u_xlat7.x = max(abs(u_xlat6.z), abs(u_xlat6.x));
					                u_xlatb6.xz = lessThan(u_xlat7.xxxx, u_xlat14.xxyx).xz;
					                u_xlat7.z = (u_xlatb6.z) ? u_xlat7.x : u_xlat14.y;
					                u_xlat7.y = u_xlat14.x;
					                u_xlat14.xy = (u_xlatb6.x) ? u_xlat7.xy : u_xlat7.yz;
					            }
					            u_xlat22.xy = u_xlat14.xy;
					        }
					        u_xlat21.x = (-u_xlat22.x) * _Value2 + u_xlat22.y;
					        u_xlatb30 = 0<u_xlati_loop_1;
					        if(u_xlatb30){
					            u_xlat3.xy = u_xlat3.xy * vec2(0.5, 0.5) + vec2(_TimeX);
					            u_xlat4.xy = u_xlat3.xy + vec2(50.0, 50.0);
					            u_xlat4.xy = floor(u_xlat4.xy);
					            u_xlat3.xy = fract(u_xlat3.xy);
					            u_xlat5.x = float(8.0);
					            u_xlat5.w = float(8.0);
					            for(int u_xlati_loop_4 = int(0xFFFFFFFFu) ; u_xlati_loop_4<=1 ; u_xlati_loop_4++)
					            {
					                u_xlat6.y = float(u_xlati_loop_4);
					                u_xlat24.xy = u_xlat5.xw;
					                for(int u_xlati_loop_5 = int(0xFFFFFFFFu) ; u_xlati_loop_5<=1 ; u_xlati_loop_5++)
					                {
					                    u_xlat6.x = float(u_xlati_loop_5);
					                    u_xlat16.xy = (-u_xlat3.xy) + u_xlat6.xy;
					                    u_xlat8.xy = u_xlat4.xy + u_xlat6.xy;
					                    u_xlat6.x = dot(u_xlat8.xy, vec2(591.320007, 154.076996));
					                    u_xlat6.x = u_xlat6.x + _TimeX;
					                    u_xlat6.x = sin(u_xlat6.x);
					                    u_xlat34 = dot(u_xlat8.xy, vec2(391.320007, 49.0769997));
					                    u_xlat34 = u_xlat34 + _TimeX;
					                    u_xlat34 = cos(u_xlat34);
					                    u_xlat8.x = fract(u_xlat6.x);
					                    u_xlat8.y = fract(u_xlat34);
					                    u_xlat16.xy = u_xlat8.xy * vec2(vec2(_BorderSize, _BorderSize)) + u_xlat16.xy;
					                    u_xlat8.x = max(abs(u_xlat16.y), abs(u_xlat16.x));
					                    u_xlatb16.xy = lessThan(u_xlat8.xxxx, u_xlat24.xyxx).xy;
					                    u_xlat8.z = (u_xlatb16.y) ? u_xlat8.x : u_xlat24.y;
					                    u_xlat8.y = u_xlat24.x;
					                    u_xlat24.xy = (u_xlatb16.x) ? u_xlat8.xy : u_xlat8.yz;
					                }
					                u_xlat5.xw = u_xlat24.xy;
					            }
					            u_xlat3.x = (-u_xlat5.x) * _Value2 + u_xlat5.w;
					            u_xlat12 = u_xlat21.x * 10.0;
					            u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					            u_xlat30 = u_xlat12 * -2.0 + 3.0;
					            u_xlat12 = u_xlat12 * u_xlat12;
					            u_xlat12 = (-u_xlat30) * u_xlat12 + 1.0;
					            u_xlat3.x = u_xlat3.x * 12.5;
					            u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					            u_xlat30 = u_xlat3.x * -2.0 + 3.0;
					            u_xlat3.x = u_xlat3.x * u_xlat3.x;
					            u_xlat3.x = (-u_xlat30) * u_xlat3.x + 1.5;
					            u_xlat3.x = u_xlat3.x * u_xlat12;
					            u_xlat3.x = u_xlat3.x * u_xlat3.x;
					            u_xlat2.x = u_xlat11.x * u_xlat3.x + u_xlat2.x;
					        }
					        u_xlat3.x = u_xlat21.x * 3.33333325;
					        u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					        u_xlat12 = u_xlat3.x * -2.0 + 3.0;
					        u_xlat3.x = u_xlat3.x * u_xlat3.x;
					        u_xlat3.x = (-u_xlat12) * u_xlat3.x + 1.0;
					        u_xlat3.x = u_xlat3.x * 5.5 + 0.100000001;
					        u_xlat12 = floor(u_xlat3.x);
					        u_xlat3.x = u_xlat3.x * 2345.12012;
					        u_xlat21.x = sin(u_xlat12);
					        u_xlat3.z = u_xlat21.x * 43758.5469;
					        u_xlat12 = u_xlat12 + 1.0;
					        u_xlat12 = sin(u_xlat12);
					        u_xlat3.y = u_xlat12 * 43758.5469;
					        u_xlat3.xyz = fract(u_xlat3.xyz);
					        u_xlat12 = (-u_xlat3.z) + u_xlat3.y;
					        u_xlat3.x = u_xlat3.x * u_xlat12 + u_xlat3.z;
					        u_xlat12 = u_xlat11.x * u_xlat3.x;
					        u_xlat12 = u_xlat12 * u_xlat27 + u_xlat2.x;
					        u_xlat3.x = u_xlat11.x * u_xlat3.x + u_xlat2.x;
					        u_xlat2.x = (u_xlati_loop_1 != 0) ? u_xlat3.x : u_xlat12;
					        u_xlat11.xy = u_xlat11.xy * vec2(0.699999988, 3.0);
					    }
					    u_xlat27 = dot(u_xlat19.xy, u_xlat19.xy);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * -0.865617037;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat2.x * u_xlat27;
					    u_xlat27 = u_xlat27 * 1.20000005;
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * 2.5;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat27 = u_xlat27 * _Value;
					    u_xlat19.x = _SpotSize * 0.150000006;
					    u_xlat1.xy = (-u_xlat1.xy) * vec2(2.0, 2.0) + vec2(_PositionX, _PositionY);
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_Radius);
					    u_xlat10.x = float(1.0) / u_xlat19.x;
					    u_xlat1.x = u_xlat10.x * u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
					    u_xlat10.xyz = vec3(u_xlat27) * _BorderColor.xyz + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat2.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_AlphaHexa) + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}