Shader "CameraFilterPack/Drawing_Manga_FlashWhite" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 16899
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//   float _Value;
					//   float _Value2;
					//   float _Value3;
					//   float _Value4;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Value       c1       1
					//   _Value2      c2       1
					//   _Value3      c3       1
					//   _Value4      c4       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c5, 43758.5469, 0.699999988, 0.300000012, 1.41421354
					    def c6, 6.28318548, 0, 0.0208350997, -0.0851330012
					    def c7, 0.180141002, -0.330299497, 0.999866009, 3.14159274
					    def c8, 0, 1, -2, 1.57079637
					    def c9, -0, -3.14159274, 0.100000001, 700
					    def c10, 0.00142857141, 12.9898005, 78.2330017, 0
					    def c11, 0.159154937, 0.5, 6.28318548, -3.14159274
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.x, -c3.x
					    mov r0.y, -c4.x
					    add r0.xy, r0, v0
					    add r0.zw, -r0_abs.xyxy, r0_abs.xyyx
					    cmp r1.xy, r0.z, r0_abs, r0_abs.yxzw
					    cmp r0.z, r0.w, c8.x, c8.y
					    rcp r0.w, r1.y
					    mul r0.w, r0.w, r1.x
					    mul r1.x, r0.w, r0.w
					    mad r1.y, r1.x, c6.z, c6.w
					    mad r1.y, r1.x, r1.y, c7.x
					    mad r1.y, r1.x, r1.y, c7.y
					    mad r1.x, r1.x, r1.y, c7.z
					    mul r0.w, r0.w, r1.x
					    mad r1.x, r0.w, c8.z, c8.w
					    mad r0.z, r1.x, r0.z, r0.w
					    cmp r0.w, r0.x, c9.x, c9.y
					    add r0.z, r0.w, r0.z
					    add r0.w, r0.z, r0.z
					    add r1.x, -r0.x, r0.y
					    cmp r1.xy, r1.x, r0, r0.yxzw
					    dp2add r0.x, r0, r0, c6.y
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    cmp r0.y, r1.y, c8.y, c8.x
					    cmp r0.y, r1.x, c6.y, r0.y
					    mad r0.y, r0.y, -r0.w, r0.z
					    mov r0.w, c7.w
					    mad r0.y, c1.x, r0.w, r0.y
					    mov r1.x, c6.x
					    mul r0.z, r1.x, c1.x
					    rcp r0.z, r0.z
					    mul r0.y, r0.z, r0.y
					    mul r0.y, r0.y, c9.w
					    frc r0.z, r0.y
					    add r0.y, -r0.z, r0.y
					    mov r1.x, c2.x
					    mul r0.z, r1.x, c0.x
					    frc r0.w, r0.z
					    add r0.z, -r0.w, r0.z
					    rcp r0.w, c2.x
					    mul r0.z, r0.w, r0.z
					    max r1.x, r0.z, c9.z
					    mul r0.y, r0.y, r1.x
					    mul r0.y, r0.y, c10.x
					    dp2add r0.y, r0.y, c10.yzzw, c10.w
					    mad r0.y, r0.y, c11.x, c11.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c11.z, c11.w
					    sincos r1.y, r0.y
					    mul r0.y, r1.y, c5.x
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c5.y, c5.z
					    mad r0.z, r0.x, -c5.w, r0.y
					    mad r0.x, r0.x, c5.w, -r0.y
					    cmp r0.x, r0.z, c6.y, r0_abs.x
					    texld r1, v0, s0
					    add oC0, r0.x, r1
					
					// approximately 67 instruction slots used (1 texture, 66 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						float _Value2;
						float _Value3;
						float _Value4;
						vec4 unused_0_6;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					bool u_xlatb3;
					float u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0.y = (-_Value3);
					    u_xlat0.x = (-_Value4);
					    u_xlat0.xy = u_xlat0.xy + vs_TEXCOORD0.yx;
					    u_xlat4 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat6 = min(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat4 = u_xlat4 * u_xlat6;
					    u_xlat6 = u_xlat4 * u_xlat4;
					    u_xlat1.x = u_xlat6 * 0.0208350997 + -0.0851330012;
					    u_xlat1.x = u_xlat6 * u_xlat1.x + 0.180141002;
					    u_xlat1.x = u_xlat6 * u_xlat1.x + -0.330299497;
					    u_xlat6 = u_xlat6 * u_xlat1.x + 0.999866009;
					    u_xlat1.x = u_xlat6 * u_xlat4;
					    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;
					    u_xlatb3 = abs(u_xlat0.y)<abs(u_xlat0.x);
					    u_xlat1.x = u_xlatb3 ? u_xlat1.x : float(0.0);
					    u_xlat4 = u_xlat4 * u_xlat6 + u_xlat1.x;
					    u_xlatb6 = u_xlat0.y<(-u_xlat0.y);
					    u_xlat6 = u_xlatb6 ? -3.14159274 : float(0.0);
					    u_xlat4 = u_xlat6 + u_xlat4;
					    u_xlat6 = min(u_xlat0.y, u_xlat0.x);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlatb2 = u_xlat1.x>=(-u_xlat1.x);
					    u_xlatb2 = u_xlatb2 && u_xlatb6;
					    u_xlat2.x = (u_xlatb2) ? (-u_xlat4) : u_xlat4;
					    u_xlat2.x = _Value * 3.14159274 + u_xlat2.x;
					    u_xlat4 = _Value * 6.28318548;
					    u_xlat2.x = u_xlat2.x / u_xlat4;
					    u_xlat2.x = u_xlat2.x * 700.0;
					    u_xlat2.y = _Value2 * _TimeX;
					    u_xlat2.xy = floor(u_xlat2.xy);
					    u_xlat4 = u_xlat2.y / _Value2;
					    u_xlat4 = max(u_xlat4, 0.100000001);
					    u_xlat0.y = u_xlat4 * u_xlat2.x;
					    u_xlat2.xy = u_xlat0.yx * vec2(0.00142857141, 1.41421354);
					    u_xlat2.x = dot(u_xlat2.xx, vec2(12.9898005, 78.2330017));
					    u_xlat2.x = sin(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * 43758.5469;
					    u_xlat2.x = fract(u_xlat2.x);
					    u_xlat2.x = u_xlat2.x * 0.699999988 + 0.300000012;
					    u_xlat0.x = u_xlat0.x * 1.41421354 + (-u_xlat2.x);
					    u_xlatb2 = u_xlat2.x<u_xlat2.y;
					    u_xlat0.x = abs(u_xlat0.x);
					    u_xlat0.x = u_xlatb2 ? u_xlat0.x : float(0.0);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0 = u_xlat0.xxxx + u_xlat1;
					    return;
					}"
				}
			}
		}
	}
}