Shader "CameraFilterPack/Distortion_Dissipation" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 39780
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Value       c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 0.333333343, 6, -1, 0
					    def c2, 0, 0.5, 0.00100000005, -0.5
					    def c3, 0.00999999978, 0.00300000003, 0.100000001, 0
					    defi i0, 9, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c1.x
					    mul r0.x, r0.x, c0.x
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c1.y, -v0.x
					    add r0.x, r0.x, v0.y
					    add r0.x, r0.x, c1.z
					    max r1.x, r0.x, c1.w
					    mul r0.x, r1.x, r1.x
					    mov r0.yzw, c1.w
					    mov r1.xy, v0
					    mov r1.w, -c1.z
					    rep i0
					      add r2.xy, r1, c2.y
					      mov r2.zw, c1.w
					      mov r3.x, c1.w
					      rep i1
					        exp r3.y, r3.x
					        mul r3.zw, r2.xyxy, r3.y
					        mul r3.zw, r3, c2.z
					        texld r4, r3.zwzw, s0
					        add r3.zw, r4.xyxy, c2.w
					        rcp r3.y, r3.y
					        mad r2.zw, r3, r3.y, r2
					        add r3.x, r3.x, -c1.z
					      endrep
					      mul r2.xy, r0.x, r2.zwzw
					      mul r2.xy, r2, c3.x
					      rcp r3.x, r1.w
					      mad r1.xz, r2.xyyw, r3.x, r1.xyyw
					      mad r1.y, r0.x, -c3.y, r1.z
					      texld r3, r1, s0
					      add r0.yzw, r0, r3.xxyz
					      add r1.w, r1.w, -c1.z
					    endrep
					    mul oC0.xyz, r0.yzww, c3.z
					    mov oC0.w, -c1.z
					
					// approximately 42 instruction slots used (2 texture, 40 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Value;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					int u_xlati3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					bool u_xlatb8;
					vec2 u_xlat12;
					vec2 u_xlat13;
					int u_xlati16;
					void main()
					{
					    u_xlat0 = _Value * 0.333333343;
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = u_xlat0 * 6.0 + (-vs_TEXCOORD0.x);
					    u_xlat0 = u_xlat0 + -1.0;
					    u_xlat0 = u_xlat0 + vs_TEXCOORD0.y;
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy;
					    for(int u_xlati_loop_1 = 1 ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat2.xy = u_xlat1.xy + vec2(0.5, 0.5);
					        u_xlat12.x = float(0.0);
					        u_xlat12.y = float(0.0);
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat8.x = float(u_xlati_loop_2);
					            u_xlat8.x = exp2(u_xlat8.x);
					            u_xlat13.xy = u_xlat2.xy * u_xlat8.xx;
					            u_xlat13.xy = u_xlat13.xy * vec2(0.00100000005, 0.00100000005);
					            u_xlat4 = texture(_MainTex, u_xlat13.xy);
					            u_xlat13.xy = u_xlat4.xy + vec2(-0.5, -0.5);
					            u_xlat8.xy = u_xlat13.xy / u_xlat8.xx;
					            u_xlat12.xy = u_xlat12.xy + u_xlat8.xy;
					        }
					        u_xlat2.xy = vec2(u_xlat0) * u_xlat12.xy;
					        u_xlat2.xy = u_xlat2.xy * vec2(0.00999999978, 0.00999999978);
					        u_xlat3.x = float(u_xlati_loop_1);
					        u_xlat2.xy = u_xlat2.xy / u_xlat3.xx;
					        u_xlat1.xz = u_xlat1.xy + u_xlat2.xy;
					        u_xlat1.y = (-u_xlat0) * 0.00300000003 + u_xlat1.z;
					        u_xlat3 = texture(_MainTex, u_xlat1.xy);
					        u_xlat5.xyz = u_xlat5.xyz + u_xlat3.xyz;
					    }
					    SV_Target0.xyz = u_xlat5.xyz * vec3(0.100000001, 0.100000001, 0.100000001);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}