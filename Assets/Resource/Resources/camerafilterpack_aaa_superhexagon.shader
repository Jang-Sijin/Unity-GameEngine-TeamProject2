Shader "CameraFilterPack/AAA_Super_Hexagon" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0.2, 10)) = 1
		_HexaColor ("_HexaColor", Vector) = (1,1,1,1)
		_BorderSize ("_BorderSize", Range(-0.5, 0.5)) = 0
		_BorderColor ("_BorderColor", Vector) = (1,1,1,1)
		_SpotSize ("_SpotSize", Range(0, 1)) = 0.5
		_AlphaHexa ("_AlphaHexa", Range(0.2, 10)) = 1
		_PositionX ("_PositionX", Range(-0.5, 0.5)) = 0
		_PositionY ("_PositionY", Range(-0.5, 0.5)) = 0
		_Radius ("_Radius", Range(0, 1)) = 0.5
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 8614
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AlphaHexa;
					//   float4 _BorderColor;
					//   float _BorderSize;
					//   float4 _HexaColor;
					//   sampler2D _MainTex;
					//   float _PositionX;
					//   float _PositionY;
					//   float _Radius;
					//   float4 _ScreenResolution;
					//   float _SpotSize;
					//   float _TimeX;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _TimeX            c0       1
					//   _ScreenResolution c1       1
					//   _Value            c2       1
					//   _BorderSize       c3       1
					//   _BorderColor      c4       1
					//   _HexaColor        c5       1
					//   _AlphaHexa        c6       1
					//   _PositionX        c7       1
					//   _PositionY        c8       1
					//   _Radius           c9       1
					//   _SpotSize         c10      1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c11, 0.00625000009, 0.00312500005, 0.00541265868, 0.0108253174
					    def c12, 0.00937500037, 0.0108253174, 0.5, -1
					    def c13, -1, 0, 1.20000005, 0.833333313
					    def c14, 6.28318548, -3.14159274, 1.80437076, 1
					    def c15, 12, 0.0769230798, 0.150000006, 1.15470052
					    def c16, 0.0530516505, 0.0318309888, 0.5, 10
					    def c17, -2, 3, 0.25, 0
					    def c18, 0.5, 0.866025388, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xy, c1, v0
					    mov r1.x, c1.x
					    mul r0.z, r1.x, c2.x
					    mul r0.w, r0.z, c12.x
					    rcp r1.xz, r0.w
					    mul r2, r0.z, c11
					    rcp r1.y, r2.w
					    mul r1.xyz, r0.yxyw, r1
					    frc r0.xy, r1_abs.yzzw
					    cmp r0.xy, r1.yzzw, r0, -r0
					    mul r3.xy, r0.z, c12.yxzw
					    mul r0.x, r0.x, r3.x
					    rcp r1.w, r2.z
					    mul r1.w, r1.w, r2.y
					    mul r2.w, r0.x, r1.w
					    mad r1.w, r0.x, r1.w, -r2.y
					    mad r0.x, r0.z, c11.z, -r0.x
					    mad r1.w, r0.y, r3.y, -r1.w
					    mad r2.y, r0.y, r3.y, -r2.w
					    mad r3.xz, r0.z, c11.yyxw, -r2.w
					    mad r3.xy, r0.y, r3.y, -r3.xzzw
					    frc r4.xyz, r1.zyzw
					    add r4.xyz, r1, -r4
					    add r1.xy, r4.yzzw, c13
					    add r5.xy, r4.yzzw, c13.yxzw
					    cmp r1.xy, r2.y, r1, r5
					    add r2.yw, r4.xyzz, c12.w
					    cmp r5.z, r3.y, r4.z, r2.w
					    cmp r0.xy, r0.x, r1, r5.xzzw
					    cmp r4.w, r1.w, r4.z, r2.w
					    cmp r1.xy, r3.x, r4.ywzw, r2.ywzw
					    mul r1.z, r4.x, c12.z
					    frc r1.z, r1_abs.z
					    cmp r1.z, r4.x, r1.z, -r1.z
					    cmp r0.xy, -r1.z, r0, r1
					    mul r1.x, r0.y, c12.z
					    frc r1.x, r1_abs.x
					    cmp r1.x, r0.y, r1.x, -r1.x
					    dp2add r1.x, r1.x, r2.z, c13.y
					    dp2add r1.x, r0.x, r2.z, -r1.x
					    mul r1.y, r0.w, r0.y
					    mad r0.xy, r0.z, c11.wxzw, r1
					    mad r0.zw, v0.xyxy, -c1.xyxy, r0.xyxy
					    dp2add r0.w, r0_abs.zwzw, c18, c18.z
					    max r1.x, r0.w, r0_abs.z
					    mov r0.w, c12.w
					    mad r0.z, r2.x, c3.x, r0.w
					    mad r1.y, r2.x, c3.x, -r0.z
					    mad r0.z, r1.x, c15.w, -r0.z
					    rcp r1.x, r1.y
					    mul_sat r0.z, r0.z, r1.x
					    mad r1.x, r0.z, c17.x, c17.y
					    mul r0.z, r0.z, r0.z
					    mad r0.z, r1.x, -r0.z, -c12.w
					    rcp r1.x, c1.x
					    rcp r1.y, c1.y
					    mul r0.xy, r0, r1
					    texld r1, r0, s0
					    lrp r2.xyz, r0.z, r1, c4
					    add r0.xy, -c12.z, v0
					    mul r1.xy, r0, r0
					    mul r0.xy, r0.yxzw, c13.z
					    dp2add r0.z, r1.y, r1.x, c13.w
					    mad r1.xy, r0.yxzw, r0.z, c12.z
					    mul r0.xy, r0.z, r0
					    mul r0.xy, r0, r0
					    mad r0.xy, r0, -c14.z, c14.w
					    dp2add r0.x, r0.x, r0.y, c13.y
					    rcp r0.x, r0.x
					    mov r0.z, c17.z
					    mad r0.y, c0.x, r0.z, r1.x
					    add r0.y, r0.y, c12.z
					    frc r0.z, r0_abs.y
					    cmp r0.y, r0.y, r0.z, -r0.z
					    add_sat r0.y, r0.y, r0.y
					    mad r0.z, r0.y, c17.x, c17.y
					    mul r0.y, r0.y, r0.y
					    mul r0.y, r0.y, r0.z
					    mad r0.y, r0.y, -c12_abs.z, c12_abs.w
					    add r2.xyz, r0.y, r2
					    mul r2.xyz, r2, c5
					    mov r3, c16
					    mad r0.yz, c0.x, r3.xxyw, r3.z
					    frc r0.yz, r0
					    mad r0.yz, r0, c14.x, c14.y
					    sincos r4.y, r0.y
					    sincos r5.y, r0.z
					    mul r3.y, r5.y, c12.z
					    mul r3.x, r4.y, c12.z
					    add r0.yz, r1.y, r3.xxyw
					    texld r4, r0.yzzw, s0
					    mad r0.y, r1.y, r3.w, c0.x
					    frc r0.z, r0_abs.y
					    cmp r0.y, r0.y, r0.z, -r0.z
					    add r0.y, r0.y, c15.x
					    mad r3.xyz, r0.y, c15.y, r4
					    mul r3.xyz, r3, c12.z
					    rcp r4.x, r3.x
					    rcp r4.y, r3.y
					    rcp r4.z, r3.z
					    mul r2.xyz, r2, r4
					    mul r3.xyz, r0.x, r2
					    texld r4, v0, s0
					    mad r0.xyz, r2, -r0.x, r4
					    add r2.x, -r1.x, c7.x
					    add r2.y, -r1.y, c8.x
					    dp2add r1.x, r2, r2, c13.y
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    add r1.x, r1.x, -c9.x
					    mov r1.z, c15.z
					    mul r1.y, r1.z, c10.x
					    rcp r1.y, r1.y
					    mul_sat r1.x, r1.y, r1.x
					    mad r1.y, r1.x, c17.x, c17.y
					    mul r1.x, r1.x, r1.x
					    mad r1.x, r1.y, -r1.x, -c12.w
					    mad r0.xyz, r1.x, r0, r3
					    add r1.xyz, -r0, r4
					    add r0.w, -r0.w, -c6.x
					    mad oC0.xyz, r0.w, r1, r0
					    mov oC0.w, -c12.w
					
					// approximately 142 instruction slots used (3 texture, 139 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						vec4 _ScreenResolution;
						float _Value;
						float _BorderSize;
						vec4 _BorderColor;
						vec4 _HexaColor;
						float _AlphaHexa;
						float _PositionX;
						float _PositionY;
						float _Radius;
						float _SpotSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					bvec4 u_xlatb1;
					vec4 u_xlat2;
					bvec2 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat12.x = _ScreenResolution.x * _Value;
					    u_xlat1.xyz = u_xlat12.xxx * vec3(0.0108253174, 0.00937500037, 0.0108253174);
					    u_xlat0.xyw = u_xlat0.yxy / u_xlat1.yxy;
					    u_xlatb1.xw = greaterThanEqual(u_xlat0.yyyw, (-u_xlat0.yyyw)).xw;
					    u_xlat2.xy = fract(abs(u_xlat0.yw));
					    u_xlat3.xyz = floor(u_xlat0.xyw);
					    u_xlat0.x = (u_xlatb1.x) ? u_xlat2.x : (-u_xlat2.x);
					    u_xlat0.y = (u_xlatb1.w) ? u_xlat2.y : (-u_xlat2.y);
					    u_xlat0.xy = u_xlat1.zy * u_xlat0.xy;
					    u_xlat1.xyz = u_xlat12.xxx * vec3(0.00625000009, 0.00312500005, 0.00541265868);
					    u_xlat18 = u_xlat1.y / u_xlat1.z;
					    u_xlat19 = u_xlat18 * u_xlat0.x;
					    u_xlat18 = u_xlat0.x * u_xlat18 + (-u_xlat1.y);
					    u_xlatb18 = u_xlat0.y<u_xlat18;
					    u_xlat2.xy = u_xlat12.xx * vec2(0.00312500005, 0.00625000009) + (-vec2(u_xlat19));
					    u_xlatb7 = u_xlat0.y<u_xlat19;
					    u_xlatb2.xy = lessThan(u_xlat0.yyyy, u_xlat2.xyxx).xy;
					    u_xlatb0 = u_xlat1.z<u_xlat0.x;
					    u_xlat4 = u_xlat3.yzyz + vec4(-1.0, -1.0, -1.0, 0.0);
					    u_xlat5.z = (u_xlatb2.y) ? u_xlat4.y : u_xlat3.z;
					    u_xlat5.xy = u_xlat3.yz + vec2(0.0, -1.0);
					    u_xlat7.xz = (bool(u_xlatb7)) ? u_xlat5.xy : u_xlat4.zw;
					    u_xlat0.xy = (bool(u_xlatb0)) ? u_xlat5.xz : u_xlat7.xz;
					    u_xlat3.w = (u_xlatb18) ? u_xlat4.y : u_xlat3.z;
					    u_xlat7.xz = (u_xlatb2.x) ? u_xlat4.xy : u_xlat3.yw;
					    u_xlat18 = u_xlat3.x * 0.5;
					    u_xlatb2.x = u_xlat18>=(-u_xlat18);
					    u_xlat18 = fract(abs(u_xlat18));
					    u_xlat18 = (u_xlatb2.x) ? u_xlat18 : (-u_xlat18);
					    u_xlatb18 = 0.0<u_xlat18;
					    u_xlat0.xy = (bool(u_xlatb18)) ? u_xlat7.xz : u_xlat0.xy;
					    u_xlat18 = u_xlat0.y * 0.5;
					    u_xlatb7 = u_xlat18>=(-u_xlat18);
					    u_xlat18 = fract(abs(u_xlat18));
					    u_xlat18 = (u_xlatb7) ? u_xlat18 : (-u_xlat18);
					    u_xlat18 = dot(vec2(u_xlat18), u_xlat1.zz);
					    u_xlat0.x = dot(u_xlat0.xx, u_xlat1.zz);
					    u_xlat2.x = (-u_xlat18) + u_xlat0.x;
					    u_xlat0.x = u_xlat12.x * 0.00937500037;
					    u_xlat2.y = u_xlat0.x * u_xlat0.y;
					    u_xlat0.xy = u_xlat12.xx * vec2(0.0108253174, 0.00625000009) + u_xlat2.xy;
					    u_xlat12.xy = (-vs_TEXCOORD0.xy) * _ScreenResolution.xy + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / _ScreenResolution.xy;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat7.xyz = u_xlat2.xyz + (-_BorderColor.xyz);
					    u_xlat0.x = dot(abs(u_xlat12.xy), vec2(0.5, 0.866025388));
					    u_xlat0.x = max(abs(u_xlat12.x), u_xlat0.x);
					    u_xlat6 = u_xlat1.x * _BorderSize + -1.0;
					    u_xlat12.x = u_xlat1.x * _BorderSize + (-u_xlat6);
					    u_xlat0.x = u_xlat0.x * 1.15470052 + (-u_xlat6);
					    u_xlat6 = float(1.0) / u_xlat12.x;
					    u_xlat0.x = u_xlat6 * u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = (-u_xlat6) * u_xlat0.x + 1.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + _BorderColor.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat13.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.yx * vec2(1.20000005, 1.20000005);
					    u_xlat18 = dot(u_xlat13.yy, u_xlat13.xx);
					    u_xlat18 = u_xlat18 + 0.833333313;
					    u_xlat13.xy = u_xlat1.yx * vec2(u_xlat18) + vec2(0.5, 0.5);
					    u_xlat1.xy = vec2(u_xlat18) * u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
					    u_xlat1.xy = (-u_xlat1.xy) * vec2(1.80437076, 1.80437076) + vec2(1.0, 1.0);
					    u_xlat18 = dot(u_xlat1.xx, u_xlat1.yy);
					    u_xlat1.x = _TimeX * 0.25 + u_xlat13.x;
					    u_xlat1.x = u_xlat1.x + 0.5;
					    u_xlatb7 = u_xlat1.x>=(-u_xlat1.x);
					    u_xlat1.x = fract(abs(u_xlat1.x));
					    u_xlat1.x = (u_xlatb7) ? u_xlat1.x : (-u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat1.x * -2.0 + 3.0;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = (-u_xlat1.x) * 0.5 + 1.0;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _HexaColor.xyz;
					    u_xlat1.x = u_xlat13.y * 10.0 + _TimeX;
					    u_xlatb7 = u_xlat1.x>=(-u_xlat1.x);
					    u_xlat1.x = fract(abs(u_xlat1.x));
					    u_xlat1.x = (u_xlatb7) ? u_xlat1.x : (-u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + 12.0;
					    u_xlat2.xy = vec2(_TimeX) * vec2(0.333333343, 0.200000003);
					    u_xlat2.xy = sin(u_xlat2.xy);
					    u_xlat2.xy = u_xlat2.xy * vec2(0.5, 0.5) + u_xlat13.yy;
					    u_xlat7.xy = (-u_xlat13.xy) + vec2(_PositionX, _PositionY);
					    u_xlat7.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = u_xlat7.x + (-_Radius);
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat1.xzw = u_xlat1.xxx * vec3(0.0769230798, 0.0769230798, 0.0769230798) + u_xlat2.xyz;
					    u_xlat1.xzw = u_xlat1.xzw * vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xzw;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xzw = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat18 = _SpotSize * 0.150000006;
					    u_xlat18 = float(1.0) / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xzw + u_xlat0.xyz;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat18 = (-_AlphaHexa) + 1.0;
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}