Shader "CameraFilterPack/Pixelisation_OilPaintHQ" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0, 5)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 23391
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Value            c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, 0.0399999991, -100, 0, 100
					    def c3, 1, 0, -2, -3
					    def c4, 2, 0, -1, -4
					    def c5, -4, -3, 3, 0
					    def c6, 4, 0, -4, -3
					    def c7, 2, 1, -1, -3
					    def c8, 3, 1, 0, -3
					    def c9, 4, 1, -4, -2
					    def c10, 0, 2, -3, -2
					    def c11, 1, 2, -1, -2
					    def c12, 3, 2, 0, -2
					    def c13, 0, 3, -3, -1
					    def c14, 0, -1, 4, 3
					    def c15, -3, 0, 1, 4
					    def c16, -2, 0, 2, 4
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    mul r1.xyz, r0, r0
					    rcp r0.w, c0.x
					    mul r2.x, r0.w, c1.x
					    rcp r0.w, c0.y
					    mul r2.y, r0.w, c1.x
					    mad r3, r2.xyxy, c3.xyzz, v0.xyxy
					    texld r4, r3, s0
					    texld r3, r3.zwzw, s0
					    mad r1.xyz, r4, r4, r1
					    add r4.xyz, r0, r4
					    mad r5, r2.xyxy, c4, v0.xyxy
					    texld r6, r5, s0
					    texld r5, r5.zwzw, s0
					    mad r1.xyz, r6, r6, r1
					    add r4.xyz, r4, r6
					    mad r6, r2.xyxy, c5.zwwx, v0.xyxy
					    texld r7, r6, s0
					    texld r6, r6.zwzw, s0
					    mad r1.xyz, r7, r7, r1
					    add r4.xyz, r4, r7
					    mad r7, r2.xyxy, c6, v0.xyxy
					    texld r8, r7, s0
					    texld r7, r7.zwzw, s0
					    mad r1.xyz, r8, r8, r1
					    add r4.xyz, r4, r8
					    mad r8, r2.xyxy, c3.yxzw, v0.xyxy
					    texld r9, r8, s0
					    texld r8, r8.zwzw, s0
					    mad r1.xyz, r9, r9, r1
					    add r4.xyz, r4, r9
					    add r2.zw, r2.xyxy, v0.xyxy
					    texld r9, r2.zwzw, s0
					    mad r1.xyz, r9, r9, r1
					    add r4.xyz, r4, r9
					    mad r9, r2.xyxy, c7, v0.xyxy
					    texld r10, r9, s0
					    texld r9, r9.zwzw, s0
					    mad r1.xyz, r10, r10, r1
					    add r4.xyz, r4, r10
					    mad r10, r2.xyxy, c8, v0.xyxy
					    texld r11, r10, s0
					    texld r10, r10.zwzw, s0
					    mad r1.xyz, r11, r11, r1
					    add r4.xyz, r4, r11
					    mad r11, r2.xyxy, c9, v0.xyxy
					    texld r12, r11, s0
					    texld r11, r11.zwzw, s0
					    mad r1.xyz, r12, r12, r1
					    add r4.xyz, r4, r12
					    mad r12, r2.xyxy, c10, v0.xyxy
					    texld r13, r12, s0
					    texld r12, r12.zwzw, s0
					    mad r1.xyz, r13, r13, r1
					    add r4.xyz, r4, r13
					    mad r13, r2.xyxy, c11, v0.xyxy
					    texld r14, r13, s0
					    texld r13, r13.zwzw, s0
					    mad r1.xyz, r14, r14, r1
					    add r4.xyz, r4, r14
					    mad r2.zw, r2.xyxy, -c3.z, v0.xyxy
					    texld r14, r2.zwzw, s0
					    mad r1.xyz, r14, r14, r1
					    add r4.xyz, r4, r14
					    mad r14, r2.xyxy, c12, v0.xyxy
					    texld r15, r14, s0
					    texld r14, r14.zwzw, s0
					    mad r1.xyz, r15, r15, r1
					    add r4.xyz, r4, r15
					    mad r15, r2.xyxy, -c9.zwxy, v0.xyxy
					    texld r16, r15, s0
					    texld r15, r15.zwzw, s0
					    mad r1.xyz, r16, r16, r1
					    add r4.xyz, r4, r16
					    mad r16, r2.xyxy, c13, v0.xyxy
					    texld r17, r16, s0
					    texld r16, r16.zwzw, s0
					    mad r1.xyz, r17, r17, r1
					    add r4.xyz, r4, r17
					    mad r17, r2.xyxy, -c7.zwxy, v0.xyxy
					    texld r18, r17, s0
					    texld r17, r17.zwzw, s0
					    mad r1.xyz, r18, r18, r1
					    add r4.xyz, r4, r18
					    mad r18, r2.xyxy, -c3.zwww, v0.xyxy
					    texld r19, r18, s0
					    texld r18, r18.zwzw, s0
					    mad r1.xyz, r19, r19, r1
					    add r4.xyz, r4, r19
					    add r4.xyz, r18, r4
					    mad r1.xyz, r18, r18, r1
					    mad r18, r2.xyxy, c14, v0.xyxy
					    texld r19, r18.zwzw, s0
					    texld r18, r18, s0
					    mad r1.xyz, r19, r19, r1
					    add r4.xyz, r4, r19
					    mad r19, r2.xyxy, c6.zyyx, v0.xyxy
					    texld r20, r19.zwzw, s0
					    texld r19, r19, s0
					    mad r1.xyz, r20, r20, r1
					    add r4.xyz, r4, r20
					    mad r20, r2.xyxy, c15, v0.xyxy
					    texld r21, r20.zwzw, s0
					    texld r20, r20, s0
					    mad r1.xyz, r21, r21, r1
					    add r4.xyz, r4, r21
					    mad r21, r2.xyxy, c16, v0.xyxy
					    texld r22, r21.zwzw, s0
					    texld r21, r21, s0
					    mad r1.xyz, r22, r22, r1
					    add r4.xyz, r4, r22
					    mad r22, r2.xyxy, c14.yxwz, v0.xyxy
					    texld r23, r22.zwzw, s0
					    texld r22, r22, s0
					    mad r1.xyz, r23, r23, r1
					    add r4.xyz, r4, r23
					    mad r2.zw, r2.xyxy, -c5.x, v0.xyxy
					    texld r23, r2.zwzw, s0
					    mad r1.xyz, r23, r23, r1
					    add r4.xyz, r4, r23
					    mul r4.xyz, r4, c2.x
					    mul r23.xyz, r4, r4
					    mad r1.xyz, r1, c2.x, -r23
					    add r0.w, r1_abs.y, r1_abs.x
					    add r0.w, r1_abs.z, r0.w
					    mad r1, r2.xyxy, c5.xxyy, v0.xyxy
					    add r2.xy, -r2, v0
					    texld r2, r2, s0
					    texld r23, r1, s0
					    texld r1, r1.zwzw, s0
					    mul r24.xyz, r1, r1
					    mad r24.xyz, r23, r23, r24
					    add r23.xyz, r1, r23
					    add r23.xyz, r3, r23
					    mad r3.xyz, r3, r3, r24
					    mad r3.xyz, r5, r5, r3
					    add r5.xyz, r5, r23
					    add r5.xyz, r6, r5
					    mad r3.xyz, r6, r6, r3
					    mad r3.xyz, r7, r7, r3
					    add r5.xyz, r7, r5
					    add r5.xyz, r1, r5
					    mad r1.xyz, r1, r1, r3
					    mad r1.xyz, r8, r8, r1
					    mad r1.xyz, r9, r9, r1
					    mad r1.xyz, r10, r10, r1
					    mad r1.xyz, r11, r11, r1
					    mad r1.xyz, r12, r12, r1
					    mad r1.xyz, r8, r8, r1
					    mad r1.xyz, r13, r13, r1
					    mad r1.xyz, r14, r14, r1
					    mad r1.xyz, r15, r15, r1
					    mad r1.xyz, r16, r16, r1
					    mad r1.xyz, r17, r17, r1
					    mad r1.xyz, r2, r2, r1
					    mad r1.xyz, r18, r18, r1
					    mad r1.xyz, r19, r19, r1
					    mad r1.xyz, r20, r20, r1
					    mad r1.xyz, r21, r21, r1
					    mad r1.xyz, r22, r22, r1
					    mad r1.xyz, r0, r0, r1
					    add r3.xyz, r8, r5
					    add r3.xyz, r9, r3
					    add r3.xyz, r10, r3
					    add r3.xyz, r11, r3
					    add r3.xyz, r12, r3
					    add r3.xyz, r8, r3
					    add r3.xyz, r13, r3
					    add r3.xyz, r14, r3
					    add r3.xyz, r15, r3
					    add r3.xyz, r16, r3
					    add r3.xyz, r17, r3
					    add r2.xyz, r2, r3
					    add r2.xyz, r18, r2
					    add r2.xyz, r19, r2
					    add r2.xyz, r20, r2
					    add r2.xyz, r21, r2
					    add r2.xyz, r22, r2
					    add r0.xyz, r0, r2
					    mul r2.xyz, r0, c2.x
					    mul r0.xyz, r2, r2
					    mad r0.xyz, r1, c2.x, -r0
					    add r0.x, r0_abs.y, r0_abs.x
					    add r2.w, r0_abs.z, r0.x
					    add r0.x, r2.w, c2.y
					    cmp r1, r0.x, c2.zzzw, r2
					    cmp r2.w, r0.x, c3.y, c3.x
					    add r0.x, r0.w, -r1.w
					    mov r2.xyz, r1
					    mov r4.w, c3.x
					    cmp oC0, r0.x, r2, r4
					
					// approximately 191 instruction slots used (47 texture, 144 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Value;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec4 u_xlat14;
					vec4 u_xlat15;
					vec4 u_xlat16;
					vec4 u_xlat17;
					vec4 u_xlat18;
					vec4 u_xlat19;
					vec4 u_xlat20;
					vec4 u_xlat21;
					vec4 u_xlat22;
					vec4 u_xlat23;
					vec3 u_xlat24;
					float u_xlat25;
					bool u_xlatb25;
					vec2 u_xlat52;
					float u_xlat75;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
					    u_xlat2.xy = vec2(_Value) / _ScreenResolution.xy;
					    u_xlat3 = u_xlat2.xyxy * vec4(1.0, 0.0, -2.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat5 = u_xlat2.xyxy * vec4(2.0, 0.0, -1.0, -4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat6.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat6 = u_xlat2.xyxy * vec4(3.0, 0.0, 0.0, -4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat7.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
					    u_xlat7 = u_xlat2.xyxy * vec4(4.0, 0.0, -4.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat8 = texture(_MainTex, u_xlat7.xy);
					    u_xlat7 = texture(_MainTex, u_xlat7.zw);
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat8.xyz;
					    u_xlat8 = u_xlat2.xyxy * vec4(0.0, 1.0, -2.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat9 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat52.xy = u_xlat2.xy + vs_TEXCOORD0.xy;
					    u_xlat9 = texture(_MainTex, u_xlat52.xy);
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat9 = u_xlat2.xyxy * vec4(2.0, 1.0, -1.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat10 = texture(_MainTex, u_xlat9.xy);
					    u_xlat9 = texture(_MainTex, u_xlat9.zw);
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat10.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat10.xyz;
					    u_xlat10 = u_xlat2.xyxy * vec4(3.0, 1.0, 0.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat11 = texture(_MainTex, u_xlat10.xy);
					    u_xlat10 = texture(_MainTex, u_xlat10.zw);
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11 = u_xlat2.xyxy * vec4(4.0, 1.0, -4.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat12 = texture(_MainTex, u_xlat11.xy);
					    u_xlat11 = texture(_MainTex, u_xlat11.zw);
					    u_xlat1.xyz = u_xlat12.xyz * u_xlat12.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat12.xyz;
					    u_xlat12 = u_xlat2.xyxy * vec4(0.0, 2.0, -3.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat13 = texture(_MainTex, u_xlat12.xy);
					    u_xlat12 = texture(_MainTex, u_xlat12.zw);
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat13.xyz;
					    u_xlat13 = u_xlat2.xyxy * vec4(1.0, 2.0, -1.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat14 = texture(_MainTex, u_xlat13.xy);
					    u_xlat13 = texture(_MainTex, u_xlat13.zw);
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat14.xyz;
					    u_xlat52.xy = u_xlat2.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat14 = texture(_MainTex, u_xlat52.xy);
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat14.xyz;
					    u_xlat14 = u_xlat2.xyxy * vec4(3.0, 2.0, 0.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat15 = texture(_MainTex, u_xlat14.xy);
					    u_xlat14 = texture(_MainTex, u_xlat14.zw);
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat15.xyz;
					    u_xlat15 = u_xlat2.xyxy * vec4(4.0, 2.0, -4.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat16 = texture(_MainTex, u_xlat15.xy);
					    u_xlat15 = texture(_MainTex, u_xlat15.zw);
					    u_xlat1.xyz = u_xlat16.xyz * u_xlat16.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat16.xyz;
					    u_xlat16 = u_xlat2.xyxy * vec4(0.0, 3.0, -3.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat17 = texture(_MainTex, u_xlat16.xy);
					    u_xlat16 = texture(_MainTex, u_xlat16.zw);
					    u_xlat1.xyz = u_xlat17.xyz * u_xlat17.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat17.xyz;
					    u_xlat17 = u_xlat2.xyxy * vec4(1.0, 3.0, -2.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat18 = texture(_MainTex, u_xlat17.xy);
					    u_xlat17 = texture(_MainTex, u_xlat17.zw);
					    u_xlat1.xyz = u_xlat18.xyz * u_xlat18.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat18.xyz;
					    u_xlat18 = u_xlat2.xyxy * vec4(2.0, 3.0, 3.0, 3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat19 = texture(_MainTex, u_xlat18.xy);
					    u_xlat18 = texture(_MainTex, u_xlat18.zw);
					    u_xlat1.xyz = u_xlat19.xyz * u_xlat19.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat19.xyz;
					    u_xlat4.xyz = u_xlat18.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat18.xyz * u_xlat18.xyz + u_xlat1.xyz;
					    u_xlat18 = u_xlat2.xyxy * vec4(0.0, -1.0, 4.0, 3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat19 = texture(_MainTex, u_xlat18.zw);
					    u_xlat18 = texture(_MainTex, u_xlat18.xy);
					    u_xlat1.xyz = u_xlat19.xyz * u_xlat19.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat19.xyz;
					    u_xlat19 = u_xlat2.xyxy * vec4(-4.0, 0.0, 0.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat20 = texture(_MainTex, u_xlat19.zw);
					    u_xlat19 = texture(_MainTex, u_xlat19.xy);
					    u_xlat1.xyz = u_xlat20.xyz * u_xlat20.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat20.xyz;
					    u_xlat20 = u_xlat2.xyxy * vec4(-3.0, 0.0, 1.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat21 = texture(_MainTex, u_xlat20.zw);
					    u_xlat20 = texture(_MainTex, u_xlat20.xy);
					    u_xlat1.xyz = u_xlat21.xyz * u_xlat21.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat21.xyz;
					    u_xlat21 = u_xlat2.xyxy * vec4(-2.0, 0.0, 2.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat22 = texture(_MainTex, u_xlat21.zw);
					    u_xlat21 = texture(_MainTex, u_xlat21.xy);
					    u_xlat1.xyz = u_xlat22.xyz * u_xlat22.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat22.xyz;
					    u_xlat22 = u_xlat2.xyxy * vec4(-1.0, 0.0, 3.0, 4.0) + vs_TEXCOORD0.xyxy;
					    u_xlat23 = texture(_MainTex, u_xlat22.zw);
					    u_xlat22 = texture(_MainTex, u_xlat22.xy);
					    u_xlat1.xyz = u_xlat23.xyz * u_xlat23.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat23.xyz;
					    u_xlat52.xy = u_xlat2.xy * vec2(4.0, 4.0) + vs_TEXCOORD0.xy;
					    u_xlat23 = texture(_MainTex, u_xlat52.xy);
					    u_xlat1.xyz = u_xlat23.xyz * u_xlat23.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat23.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat23.xyz = u_xlat4.xyz * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.0399999991, 0.0399999991, 0.0399999991) + (-u_xlat23.xyz);
					    u_xlat75 = abs(u_xlat1.y) + abs(u_xlat1.x);
					    u_xlat75 = abs(u_xlat1.z) + u_xlat75;
					    u_xlat1 = u_xlat2.xyxy * vec4(-4.0, -4.0, -3.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2.xy = (-u_xlat2.xy) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat23 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat24.xyz = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat24.xyz = u_xlat23.xyz * u_xlat23.xyz + u_xlat24.xyz;
					    u_xlat23.xyz = u_xlat1.xyz + u_xlat23.xyz;
					    u_xlat23.xyz = u_xlat3.xyz + u_xlat23.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat3.xyz + u_xlat24.xyz;
					    u_xlat3.xyz = u_xlat5.xyz * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + u_xlat23.xyz;
					    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat6.xyz * u_xlat6.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat7.xyz * u_xlat7.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = u_xlat7.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat9.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat10.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat11.xyz * u_xlat11.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat12.xyz * u_xlat12.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat13.xyz * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat14.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat15.xyz * u_xlat15.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat16.xyz * u_xlat16.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat17.xyz * u_xlat17.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat18.xyz * u_xlat18.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat19.xyz * u_xlat19.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat20.xyz * u_xlat20.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat21.xyz * u_xlat21.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat22.xyz * u_xlat22.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat8.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat9.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat10.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat11.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat12.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat8.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat13.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat14.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat15.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat16.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat17.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat18.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat19.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat20.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat21.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat22.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.0399999991, 0.0399999991, 0.0399999991);
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0399999991, 0.0399999991, 0.0399999991) + (-u_xlat0.xyz);
					    u_xlat0.x = abs(u_xlat0.y) + abs(u_xlat0.x);
					    u_xlat0.x = abs(u_xlat0.z) + u_xlat0.x;
					    u_xlat25 = min(u_xlat0.x, 100.0);
					    u_xlatb0 = u_xlat0.x<100.0;
					    u_xlatb25 = u_xlat75<u_xlat25;
					    u_xlat2.w = 1.0;
					    u_xlat1 = bool(u_xlatb0) ? u_xlat2 : vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat4.w = 1.0;
					    SV_Target0 = (bool(u_xlatb25)) ? u_xlat4 : u_xlat1;
					    return;
					}"
				}
			}
		}
	}
}