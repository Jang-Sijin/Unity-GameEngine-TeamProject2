Shader "CameraFilterPack/Colors_HSV" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_HueShift ("HueShift", Range(0, 360)) = 0
		_Sat ("Saturation", Float) = 1
		_Val ("Value", Float) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 26585
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _HueShift;
					//   sampler2D _MainTex;
					//   float _Sat;
					//   float _Val;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _HueShift    c0       1
					//   _Sat         c1       1
					//   _Val         c2       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c3, 0.00277777785, 0.5, 6.28318548, -3.14159274
					    def c4, 1.04999995, 0.202999994, 1, 0
					    def c5, 0.291999996, 0.588, 0.885999978, 1.25
					    def c6, 0.497000009, 0.328000009, 0.412999988, 0.300000012
					    def c7, 0.330000013, 0.114, 0.298999995, 0.0350000001
					    def c8, 0.700999975, 0.587000012, 0.298999995, 0.167999998
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c3
					    mad r0.x, c0.x, r0.x, r0.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c3.z, c3.w
					    sincos r1.xy, r0.x
					    mov r0.x, c2.x
					    mul r0.y, r0.x, c1.x
					    mul r1, r1.yxyx, r0.y
					    mul r0.yz, r1.w, c8.xxyw
					    mad r0.y, r0.x, c8.z, r0.y
					    mad r0.z, r0.x, c8.y, -r0.z
					    mad r0.z, r1.z, c7.x, r0.z
					    mad r0.y, r1.z, c8.w, r0.y
					    texld r2, v0, s0
					    mul r0.z, r0.z, r2.y
					    mad r0.y, r0.y, r2.x, r0.z
					    mul r0.zw, r1.w, c7.xyyz
					    mad r0.zw, r0.x, c7.xyyz, -r0
					    mad r3.xy, r1.z, -c6, r0.zwzw
					    mad r0.z, r1.z, c5.x, r0.z
					    mad oC0.x, r3.x, r2.z, r0.y
					    mul r0.y, r2.x, r3.y
					    mul r3.xy, r1.w, c6.zwzw
					    mad r0.w, r0.x, c8.y, r3.x
					    mad r2.w, r0.x, c8.z, -r3.y
					    mad r1.x, r1.x, c5.w, r2.w
					    mad r0.w, r1.z, c7.w, r0.w
					    mad r0.y, r0.w, r2.y, r0.y
					    mad oC0.y, r0.z, r2.z, r0.y
					    mul r0.yz, r1.xyww, c5
					    mad r0.y, r0.x, c8.y, -r0.y
					    mad r0.x, r0.x, c7.y, r0.z
					    mad r0.x, r1.z, -c4.y, r0.x
					    mad r0.y, r1.z, -c4.x, r0.y
					    mul r0.y, r2.y, r0.y
					    mad r0.y, r1.x, r2.x, r0.y
					    mad oC0.z, r0.x, r2.z, r0.y
					    mov oC0.w, c4.z
					
					// approximately 45 instruction slots used (1 texture, 44 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _HueShift;
						float _Sat;
						float _Val;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    SV_Target0.w = 1.0;
					    u_xlat0 = _HueShift * 0.0174532942;
					    u_xlat1.x = cos(u_xlat0);
					    u_xlat0 = sin(u_xlat0);
					    u_xlat4.x = _Sat * _Val;
					    u_xlat8 = u_xlat1.x * u_xlat4.x;
					    u_xlat0 = u_xlat0 * u_xlat4.x;
					    u_xlat1 = vec4(u_xlat8) * vec4(0.412999988, 0.300000012, 0.588, 0.885999978);
					    u_xlat2 = vec4(u_xlat8) * vec4(0.700999975, 0.587000012, 0.114, 0.298999995);
					    u_xlat4.xy = vec2(vec2(_Val, _Val)) * vec2(0.587000012, 0.114) + u_xlat1.xw;
					    u_xlat1.xy = vec2(vec2(_Val, _Val)) * vec2(0.298999995, 0.587000012) + (-u_xlat1.yz);
					    u_xlat8 = (-u_xlat0) * 0.202999994 + u_xlat4.y;
					    u_xlat4.x = u_xlat0 * 0.0350000001 + u_xlat4.x;
					    u_xlat12 = u_xlat0 * 1.25 + u_xlat1.x;
					    u_xlat1.x = (-u_xlat0) * 1.04999995 + u_xlat1.y;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat12 = u_xlat12 * u_xlat3.x + u_xlat1.x;
					    SV_Target0.z = u_xlat8 * u_xlat3.z + u_xlat12;
					    u_xlat8 = _Val * 0.298999995 + u_xlat2.x;
					    u_xlat1.xyz = vec3(vec3(_Val, _Val, _Val)) * vec3(0.587000012, 0.114, 0.298999995) + (-u_xlat2.yzw);
					    u_xlat8 = u_xlat0 * 0.167999998 + u_xlat8;
					    u_xlat12 = u_xlat0 * 0.330000013 + u_xlat1.x;
					    u_xlat12 = u_xlat3.y * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat3.x + u_xlat12;
					    u_xlat1.xz = (-vec2(u_xlat0)) * vec2(0.497000009, 0.328000009) + u_xlat1.yz;
					    u_xlat0 = u_xlat0 * 0.291999996 + u_xlat1.y;
					    SV_Target0.x = u_xlat1.x * u_xlat3.z + u_xlat8;
					    u_xlat8 = u_xlat3.x * u_xlat1.z;
					    u_xlat4.x = u_xlat4.x * u_xlat3.y + u_xlat8;
					    SV_Target0.y = u_xlat0 * u_xlat3.z + u_xlat4.x;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _HueShift;
						float _Sat;
						float _Val;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    SV_Target0.w = 1.0;
					    u_xlat0 = _HueShift * 0.0174532942;
					    u_xlat1.x = cos(u_xlat0);
					    u_xlat0 = sin(u_xlat0);
					    u_xlat4.x = _Sat * _Val;
					    u_xlat8 = u_xlat1.x * u_xlat4.x;
					    u_xlat0 = u_xlat0 * u_xlat4.x;
					    u_xlat1 = vec4(u_xlat8) * vec4(0.412999988, 0.300000012, 0.588, 0.885999978);
					    u_xlat2 = vec4(u_xlat8) * vec4(0.700999975, 0.587000012, 0.114, 0.298999995);
					    u_xlat4.xy = vec2(vec2(_Val, _Val)) * vec2(0.587000012, 0.114) + u_xlat1.xw;
					    u_xlat1.xy = vec2(vec2(_Val, _Val)) * vec2(0.298999995, 0.587000012) + (-u_xlat1.yz);
					    u_xlat8 = (-u_xlat0) * 0.202999994 + u_xlat4.y;
					    u_xlat4.x = u_xlat0 * 0.0350000001 + u_xlat4.x;
					    u_xlat12 = u_xlat0 * 1.25 + u_xlat1.x;
					    u_xlat1.x = (-u_xlat0) * 1.04999995 + u_xlat1.y;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.x = u_xlat1.x * u_xlat3.y;
					    u_xlat12 = u_xlat12 * u_xlat3.x + u_xlat1.x;
					    SV_Target0.z = u_xlat8 * u_xlat3.z + u_xlat12;
					    u_xlat8 = _Val * 0.298999995 + u_xlat2.x;
					    u_xlat1.xyz = vec3(vec3(_Val, _Val, _Val)) * vec3(0.587000012, 0.114, 0.298999995) + (-u_xlat2.yzw);
					    u_xlat8 = u_xlat0 * 0.167999998 + u_xlat8;
					    u_xlat12 = u_xlat0 * 0.330000013 + u_xlat1.x;
					    u_xlat12 = u_xlat3.y * u_xlat12;
					    u_xlat8 = u_xlat8 * u_xlat3.x + u_xlat12;
					    u_xlat1.xz = (-vec2(u_xlat0)) * vec2(0.497000009, 0.328000009) + u_xlat1.yz;
					    u_xlat0 = u_xlat0 * 0.291999996 + u_xlat1.y;
					    SV_Target0.x = u_xlat1.x * u_xlat3.z + u_xlat8;
					    u_xlat8 = u_xlat3.x * u_xlat1.z;
					    u_xlat4.x = u_xlat4.x * u_xlat3.y + u_xlat8;
					    SV_Target0.y = u_xlat0 * u_xlat3.z + u_xlat4.x;
					    return;
					}"
				}
			}
		}
	}
}