Shader "CameraFilterPack/Retro_Loading" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 52529
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float _TimeX;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Value       c1       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c2, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c3, -1, 0, 1, 10000
					    def c4, 0.00066666666, 12.9898005, 78.2330017, 0
					    def c5, 50, 30, 10, 0.5
					    def c6, 43758.5469, 4, -2, 3
					    def c7, 0.100000001, 0, -0.100000001, -0
					    def c8, -0.25, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mul r0.y, r0.x, c1.x
					    mul r1.xyw, r0.xyzx, c5.z
					    frc r0.zw, r1.xyyx
					    add r0.zw, -r0, r1.xyyw
					    mul r0.zw, r0, c3.xyxy
					    mul r1.xy, c5, v0
					    frc r1.zw, r1.xyxy
					    add r2.xy, -r1.zwzw, r1
					    add r1.z, r1.w, c7.z
					    mul r1.w, r2.y, c5.w
					    frc r1.w, r1_abs.w
					    cmp r1.w, r2.y, r1.w, -r1.w
					    add r1.w, r1.w, -c5.w
					    cmp r1.zw, r1, c3.z, c3.xyyx
					    mul r0.zw, r0, r1.w
					    mad r1.w, r2.y, c2.x, c2.y
					    frc r1.w, r1.w
					    mad r1.w, r1.w, c2.z, c2.w
					    sincos r3.y, r1.w
					    mul r1.w, r3.y, c3.w
					    frc r1.w, r1.w
					    mad r0.zw, r0, r1.w, r1.xyxy
					    frc r1.xy, r0.zwzw
					    add r1.yw, r0.xzzw, -r1.xxzy
					    add r3, r0.zwzw, c7
					    add r0.z, r1.x, c7.z
					    cmp r0.z, r0.z, r1.z, c3.y
					    dp2add r0.w, r1.ywzw, c4.yzzw, c4.w
					    mad r0.w, r0.w, c2.x, c2.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c2.z, c2.w
					    sincos r1.y, r0.w
					    mul r0.w, r1.y, c6.x
					    frc r0.w, r0.w
					    add r0.x, r0.x, c3.z
					    frc r1.x, c0.x
					    add r0.x, r0.x, -r1.x
					    mad r0.x, r0.y, c5.x, r0.x
					    mul r0.y, r0.x, c4.x
					    frc r0.y, r0_abs.y
					    cmp r0.x, r0.x, r0.y, -r0.y
					    mul r0.y, r0.x, c5.y
					    frc r1.x, r0_abs.y
					    cmp r0.x, r0.x, r1.x, -r1.x
					    mad r0.x, r0.x, -c5.x, r2.x
					    frc r1.x, r0.y
					    add r0.y, r0.y, -r1.x
					    add r0.y, -r0.y, c5.y
					    add r0.y, -r0.y, r2.y
					    add r1.x, r0.y, c3.z
					    cmp r0.y, r0.y, c3.z, c3.y
					    cmp r1.x, r1.x, c3.z, c3.y
					    cmp r0.x, r0.x, c3.y, r1.x
					    add_sat r0.x, r0.x, r0.y
					    mul r1.y, r0.w, r0.x
					    frc r2, r3
					    add r2, -r2, r3
					    dp2add r0.y, r2, c4.yzzw, c4.w
					    dp2add r0.w, r2.zwzw, c4.yzzw, c4.w
					    mad r0.w, r0.w, c2.x, c2.y
					    frc r0.w, r0.w
					    mad r0.w, r0.w, c2.z, c2.w
					    sincos r2.y, r0.w
					    mul r0.w, r2.y, c6.x
					    frc r0.w, r0.w
					    mad r0.y, r0.y, c2.x, c2.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c2.z, c2.w
					    sincos r2.y, r0.y
					    mul r0.y, r2.y, c6.x
					    frc r0.y, r0.y
					    mul r1.xz, r0.yyww, r0.x
					    mul r0.xyw, r1.xyzz, r1.xyzz
					    mul_sat r0.xyw, r0, c6.y
					    mad r1.xyz, r0.xyww, c6.z, c6.w
					    mul r0.xyw, r0, r0
					    mad r0.xyw, r1.xyzz, r0, c8.x
					    cmp r0.xyz, r0.xyww, r0.z, c3.y
					    texld r1, v0, s0
					    add oC0.xyz, r0, r1
					    mov oC0.w, c3.z
					
					// approximately 113 instruction slots used (1 texture, 112 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Value;
						vec4 unused_0_3[2];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					bvec3 u_xlatb3;
					vec2 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					float u_xlat9;
					bool u_xlatb10;
					void main()
					{
					    u_xlat0.x = _TimeX + 1.0;
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat0.y = _Value * _TimeX;
					    u_xlat0.x = u_xlat0.y * 50.0 + u_xlat0.x;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.00066666666, 10.0);
					    u_xlat1.x = floor(u_xlat0.y);
					    u_xlatb3.x = u_xlat0.x>=(-u_xlat0.x);
					    u_xlat0.x = fract(abs(u_xlat0.x));
					    u_xlat0.x = (u_xlatb3.x) ? u_xlat0.x : (-u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 30.0;
					    u_xlatb3.x = u_xlat0.x>=(-u_xlat0.x);
					    u_xlat6.x = fract(abs(u_xlat0.x));
					    u_xlat0.x = floor(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 30.0;
					    u_xlat3.x = (u_xlatb3.x) ? u_xlat6.x : (-u_xlat6.x);
					    u_xlat3.x = u_xlat3.x * 50.0;
					    u_xlat6.xy = vs_TEXCOORD0.xy * vec2(50.0, 30.0);
					    u_xlat7.xy = floor(u_xlat6.xy);
					    u_xlatb3.x = u_xlat7.x>=u_xlat3.x;
					    u_xlat7.x = u_xlat7.y + 1.0;
					    u_xlatb7 = u_xlat7.x>=u_xlat0.x;
					    u_xlatb0.x = u_xlat7.y>=u_xlat0.x;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat3.x = (u_xlatb3.x) ? 0.0 : u_xlat7.x;
					    u_xlat0.x = u_xlat3.x + u_xlat0.x;
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat3.x = _TimeX * 10.0;
					    u_xlat1.y = floor(u_xlat3.x);
					    u_xlat3.x = u_xlat7.y * 0.5;
					    u_xlat1.z = sin(u_xlat7.y);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(-1.0, 0.0, 10000.0);
					    u_xlat7.x = fract(u_xlat1.z);
					    u_xlatb10 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb10) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3.x = u_xlat3.x>=0.5;
					    u_xlat3.x = (u_xlatb3.x) ? 1.0 : -1.0;
					    u_xlat1.xy = u_xlat3.xx * u_xlat1.xy;
					    u_xlat3.xy = u_xlat1.xy * u_xlat7.xx + u_xlat6.xy;
					    u_xlat9 = fract(u_xlat6.y);
					    u_xlatb3.z = u_xlat9>=0.100000001;
					    u_xlat1.xy = floor(u_xlat3.xy);
					    u_xlat1.x = dot(u_xlat1.xy, vec2(12.9898005, 78.2330017));
					    u_xlat1.x = sin(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 43758.5469;
					    u_xlat1.x = fract(u_xlat1.x);
					    u_xlat1.y = u_xlat0.x * u_xlat1.x;
					    u_xlat2 = u_xlat3.xyxy + vec4(0.100000001, 0.0, -0.100000001, -0.0);
					    u_xlat3.x = fract(u_xlat3.x);
					    u_xlatb3.x = u_xlat3.x>=0.100000001;
					    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					;
					    u_xlat3.x = u_xlat3.z * u_xlat3.x;
					    u_xlat2 = floor(u_xlat2);
					    u_xlat6.x = dot(u_xlat2.xy, vec2(12.9898005, 78.2330017));
					    u_xlat6.y = dot(u_xlat2.zw, vec2(12.9898005, 78.2330017));
					    u_xlat6.xy = sin(u_xlat6.xy);
					    u_xlat6.xy = u_xlat6.xy * vec2(43758.5469, 43758.5469);
					    u_xlat6.xy = fract(u_xlat6.xy);
					    u_xlat1.xz = u_xlat6.xy * u_xlat0.xx;
					    u_xlat0.xzw = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * vec3(4.0, 4.0, 4.0);
					    u_xlat0.xzw = min(u_xlat0.xzw, vec3(1.0, 1.0, 1.0));
					    u_xlat1.xyz = u_xlat0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat1.xyz;
					    u_xlatb0.xzw = greaterThanEqual(u_xlat0.xxzw, vec4(0.25, 0.0, 0.25, 0.25)).xzw;
					    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
					    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
					    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
					;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat0.xzw * u_xlat3.xxx + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}