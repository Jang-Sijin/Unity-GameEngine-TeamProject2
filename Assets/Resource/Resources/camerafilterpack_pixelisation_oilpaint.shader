Shader "CameraFilterPack/Pixelisation_OilPaint" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_Value ("_Value", Range(0, 5)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 31889
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScreenResolution;
					//   float _Value;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _Value            c1       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c2, 0.111111112, -100, 0, 100
					    def c3, 1, 0, -2, -3
					    def c4, -4, -3, 2, 0
					    def c5, 2, 1, -4, -2
					    def c6, 0, 2, -3, -2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    texld r0, v0, s0
					    rcp r0.w, c0.x
					    mul r1.x, r0.w, c1.x
					    rcp r0.w, c0.y
					    mul r1.y, r0.w, c1.x
					    mad r2, r1.xyxy, c3.xyzz, v0.xyxy
					    texld r3, r2, s0
					    texld r2, r2.zwzw, s0
					    mul r4.xyz, r3, r3
					    add r3.xyz, r0, r3
					    mad r0.xyz, r0, r0, r4
					    mad r4, r1.xyxy, c4.zwxy, v0.xyxy
					    texld r5, r4, s0
					    texld r4, r4.zwzw, s0
					    mad r0.xyz, r5, r5, r0
					    add r3.xyz, r3, r5
					    mad r5, r1.xyxy, c3.yxzw, v0.xyxy
					    texld r6, r5, s0
					    texld r5, r5.zwzw, s0
					    mad r0.xyz, r6, r6, r0
					    add r3.xyz, r3, r6
					    add r1.zw, r1.xyxy, v0.xyxy
					    texld r6, r1.zwzw, s0
					    mad r0.xyz, r6, r6, r0
					    add r3.xyz, r3, r6
					    mad r6, r1.xyxy, c5, v0.xyxy
					    texld r7, r6, s0
					    texld r6, r6.zwzw, s0
					    mad r0.xyz, r7, r7, r0
					    add r3.xyz, r3, r7
					    mad r7, r1.xyxy, c6, v0.xyxy
					    texld r8, r7, s0
					    texld r7, r7.zwzw, s0
					    mad r0.xyz, r8, r8, r0
					    add r3.xyz, r3, r8
					    mad r1.zw, r1.xyxy, c3_abs.xyxz, v0.xyxy
					    texld r8, r1.zwzw, s0
					    mad r0.xyz, r8, r8, r0
					    add r3.xyz, r3, r8
					    mad r1.zw, r1.xyxy, c4.z, v0.xyxy
					    mad r8, r1.xyxy, c4.xxyy, v0.xyxy
					    texld r1, r1.zwzw, s0
					    mad r0.xyz, r1, r1, r0
					    add r1.xyz, r1, r3
					    mul r1.xyz, r1, c2.x
					    mul r3.xyz, r1, r1
					    mad r0.xyz, r0, c2.x, -r3
					    add r0.x, r0_abs.y, r0_abs.x
					    add r0.x, r0_abs.z, r0.x
					    texld r3, r8, s0
					    texld r8, r8.zwzw, s0
					    mul r0.yzw, r8.xxyz, r8.xxyz
					    mad r0.yzw, r3.xxyz, r3.xxyz, r0
					    add r3.xyz, r3, r8
					    add r3.xyz, r2, r3
					    mad r0.yzw, r2.xxyz, r2.xxyz, r0
					    mad r0.yzw, r4.xxyz, r4.xxyz, r0
					    add r2.xyz, r4, r3
					    add r2.xyz, r8, r2
					    mad r0.yzw, r8.xxyz, r8.xxyz, r0
					    mad r0.yzw, r5.xxyz, r5.xxyz, r0
					    mad r0.yzw, r6.xxyz, r6.xxyz, r0
					    mad r0.yzw, r7.xxyz, r7.xxyz, r0
					    mad r0.yzw, r5.xxyz, r5.xxyz, r0
					    add r2.xyz, r5, r2
					    add r2.xyz, r6, r2
					    add r2.xyz, r7, r2
					    add r2.xyz, r5, r2
					    mul r2.xyz, r2, c2.x
					    mul r3.xyz, r2, r2
					    mad r0.yzw, r0, c2.x, -r3.xxyz
					    add r0.y, r0_abs.z, r0_abs.y
					    add r2.w, r0_abs.w, r0.y
					    add r0.y, r2.w, c2.y
					    cmp r2, r0.y, c2.zzzw, r2
					    cmp r3.w, r0.y, c3.y, c3.x
					    add r0.x, r0.x, -r2.w
					    mov r3.xyz, r2
					    mov r1.w, c3.x
					    cmp oC0, r0.x, r3, r1
					
					// approximately 80 instruction slots used (16 texture, 64 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _Value;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					float u_xlat18;
					vec2 u_xlat19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xy = vec2(_Value) / _ScreenResolution.xy;
					    u_xlat2 = u_xlat1.xyxy * vec4(1.0, 0.0, -2.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4 = u_xlat1.xyxy * vec4(2.0, 0.0, -4.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat0.xyz = u_xlat5.xyz * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat5 = u_xlat1.xyxy * vec4(0.0, 1.0, -2.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy);
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat6.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat19.xy = u_xlat1.xy + vs_TEXCOORD0.xy;
					    u_xlat6 = texture(_MainTex, u_xlat19.xy);
					    u_xlat0.xyz = u_xlat6.xyz * u_xlat6.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat6 = u_xlat1.xyxy * vec4(2.0, 1.0, -4.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat0.xyz = u_xlat7.xyz * u_xlat7.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7 = u_xlat1.xyxy * vec4(0.0, 2.0, -3.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat8 = texture(_MainTex, u_xlat7.xy);
					    u_xlat7 = texture(_MainTex, u_xlat7.zw);
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat8.xyz;
					    u_xlat19.xy = u_xlat1.xy * vec2(1.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat8 = texture(_MainTex, u_xlat19.xy);
					    u_xlat0.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat8.xyz;
					    u_xlat19.xy = u_xlat1.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat8 = u_xlat1.xyxy * vec4(-4.0, -4.0, -3.0, -3.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat19.xy);
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.111111112, 0.111111112, 0.111111112);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.111111112, 0.111111112, 0.111111112) + (-u_xlat3.xyz);
					    u_xlat0.x = abs(u_xlat0.y) + abs(u_xlat0.x);
					    u_xlat0.x = abs(u_xlat0.z) + u_xlat0.x;
					    u_xlat3 = texture(_MainTex, u_xlat8.xy);
					    u_xlat8 = texture(_MainTex, u_xlat8.zw);
					    u_xlat9.xyz = u_xlat8.xyz * u_xlat8.xyz;
					    u_xlat9.xyz = u_xlat3.xyz * u_xlat3.xyz + u_xlat9.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat8.xyz;
					    u_xlat3.xyz = u_xlat2.xyz + u_xlat3.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * u_xlat2.xyz + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat4.xyz * u_xlat4.xyz + u_xlat9.xyz;
					    u_xlat2.xyz = u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat8.xyz + u_xlat2.xyz;
					    u_xlat9.xyz = u_xlat8.xyz * u_xlat8.xyz + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat5.xyz * u_xlat5.xyz + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat6.xyz * u_xlat6.xyz + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat7.xyz * u_xlat7.xyz + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat5.xyz * u_xlat5.xyz + u_xlat9.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat6.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat7.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.111111112, 0.111111112, 0.111111112);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat2.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(0.111111112, 0.111111112, 0.111111112) + (-u_xlat3.xyz);
					    u_xlat9.x = abs(u_xlat9.y) + abs(u_xlat9.x);
					    u_xlat9.x = abs(u_xlat9.z) + u_xlat9.x;
					    u_xlat18 = min(u_xlat9.x, 100.0);
					    u_xlatb9 = u_xlat9.x<100.0;
					    u_xlatb0 = u_xlat0.x<u_xlat18;
					    u_xlat2.w = 1.0;
					    u_xlat2 = bool(u_xlatb9) ? u_xlat2 : vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat1.w = 1.0;
					    SV_Target0 = (bool(u_xlatb0)) ? u_xlat1 : u_xlat2;
					    return;
					}"
				}
			}
		}
	}
}