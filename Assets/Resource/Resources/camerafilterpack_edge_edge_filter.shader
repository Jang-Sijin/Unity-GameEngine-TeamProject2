Shader "CameraFilterPack/Edge_Edge_filter" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(0, 1)) = 0.3
		_ScreenResolution ("_ScreenResolution", Vector) = (0,0,0,0)
		_RedAmplifier ("_RedAmplifier", Range(0, 10)) = 0
		_GreenAmplifier ("_GreenAmplifier", Range(0, 10)) = 2
		_BlueAmplifier ("_BlueAmplifier", Range(0, 10)) = 0
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 42338
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _BlueAmplifier;
					//   float _GreenAmplifier;
					//   sampler2D _MainTex;
					//   float _RedAmplifier;
					//   float4 _ScreenResolution;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _ScreenResolution c0       1
					//   _RedAmplifier     c1       1
					//   _GreenAmplifier   c2       1
					//   _BlueAmplifier    c3       1
					//   _MainTex          s0       1
					//
					
					    ps_3_0
					    def c4, 0, 1, -1, 0.5
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c0
					    mad r1, v0.xyxy, r0.xyxy, c4.xyxz
					    rcp r2.x, c0.x
					    rcp r2.y, c0.y
					    mul r1, r1, r2.xyxy
					    texld r3, r1, s0
					    texld r1, r1.zwzw, s0
					    add r1, -r1, r3
					    mad r0, v0.xyxy, r0.xyxy, c4.yxzx
					    mul r0, r2.xyxy, r0
					    texld r3, r0, s0
					    texld r0, r0.zwzw, s0
					    add r0, -r0, r3
					    add_pp r0, r0_abs, r1_abs
					    mul_pp r0, r0, c4.w
					    dp4_pp r0.x, r0, r0
					    rsq_pp r0.x, r0.x
					    rcp r0.x, r0.x
					    mul r0.yz, c0.xxyw, v0.xxyw
					    mul r0.yz, r2.xxyw, r0
					    texld_pp r1, r0.yzzw, s0
					    mad_pp oC0.x, r0.x, c1.x, r1.x
					    mad_pp oC0.y, r0.x, c2.x, r1.y
					    mad_pp oC0.z, r0.x, c3.x, r1.z
					    mov_pp oC0.w, r1.w
					
					// approximately 25 instruction slots used (5 texture, 20 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScreenResolution;
						float _RedAmplifier;
						float _GreenAmplifier;
						float _BlueAmplifier;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(0.0, 1.0, 0.0, -1.0);
					    u_xlat0 = u_xlat0 / _ScreenResolution.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat0 = (-u_xlat0) + u_xlat1;
					    u_xlat1 = vs_TEXCOORD0.xyxy * _ScreenResolution.xyxy + vec4(1.0, 0.0, -1.0, 0.0);
					    u_xlat1 = u_xlat1 / _ScreenResolution.xyxy;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat1 = (-u_xlat1) + u_xlat2;
					    u_xlat0 = abs(u_xlat0) + abs(u_xlat1);
					    u_xlat0 = u_xlat0 * vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0.x = dot(u_xlat0, u_xlat0);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat3.xy = vs_TEXCOORD0.xy * _ScreenResolution.xy;
					    u_xlat3.xy = u_xlat3.xy / _ScreenResolution.xy;
					    u_xlat1 = texture(_MainTex, u_xlat3.xy);
					    SV_Target0.xyz = u_xlat0.xxx * vec3(_RedAmplifier, _GreenAmplifier, _BlueAmplifier) + u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
				}
			}
		}
	}
}