Shader "CameraFilterPack/TV_Distorted" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_TimeX ("Time", Range(0, 1)) = 1
		_Distortion ("_Distortion", Range(1, 10)) = 1
		_RGB ("_RGB", Range(1, 10)) = 1
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			GpuProgramID 65205
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dcl_texcoord o0.xy
					    dcl_position o1
					    dcl_color o2
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o0.xy, v2
					    mov o2, v1
					    mad o1.xy, r0.w, c255, r0
					    mov o1.zw, r0
					
					// approximately 8 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					void main()
					{
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Distortion;
					//   sampler2D _MainTex;
					//   float _RGB;
					//   float _TimeX;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _TimeX       c0       1
					//   _Distortion  c1       1
					//   _RGB         c2       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c3, 12.9898005, 78.2330017, 0, 0.00400000019
					    def c4, 80, 25, 15, 43758.5469
					    def c5, 0.159154937, 0.5, 6.28318548, -3.14159274
					    def c6, 0.00454728398, 0.5, 0.00300000003, 127.323952
					    def c7, 0.0399999991, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c0.x
					    mul r0.y, c4.y, v0.y
					    dp2add r0.x, r0, c3, c3.z
					    mad r0.x, r0.x, c5.x, c5.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c5.z, c5.w
					    sincos r1.y, r0.x
					    mul r0.x, r1.y, c4.w
					    mul r0.yz, c4.xxyw, v0.y
					    mul r0.yz, r0, c0.x
					    mad r0.yz, r0, c6.x, c6.y
					    frc r0.xyz, r0
					    mad r0.yz, r0, c5.z, c5.w
					    sincos r1.y, r0.z
					    sincos r2.y, r0.y
					    mul r0.x, r0.x, r1.y
					    mul r0.x, r0.x, c1.x
					    mul r0.x, r0.x, c3.w
					    mov r0.z, c4.z
					    mul r1.x, r0.z, c0.x
					    mul r1.y, c4.x, v0.y
					    dp2add r0.y, r1, c3, c3.z
					    mad r0.y, r0.y, c5.x, c5.y
					    frc r0.y, r0.y
					    mad r0.y, r0.y, c5.z, c5.w
					    sincos r1.y, r0.y
					    mul r0.y, r1.y, c4.w
					    frc r0.y, r0.y
					    mul r0.y, r0.y, r2.y
					    mul r0.y, r0.y, c1.x
					    mad r0.x, r0.y, c6.z, r0.x
					    add r0.z, r0.x, v0.x
					    add r1.x, r0.z, c2.x
					    mov r1.y, v0.y
					    texld r1, r1, s0
					    add r0.x, r0.z, -c2.x
					    mov r0.yw, v0.y
					    texld r2, r0, s0
					    texld r0, r0.zwzw, s0
					    mov r1.y, r0.y
					    mov r1.x, r2.x
					    mad r0.x, v0.y, c6.w, c6.y
					    frc r0.x, r0.x
					    mad r0.x, r0.x, c5.z, c5.w
					    sincos r2.y, r0.x
					    mad oC0.xyz, r2.y, -c7.x, r1
					    mov oC0.w, c7.y
					
					// approximately 84 instruction slots used (3 texture, 81 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _TimeX;
						float _Distortion;
						float _RGB;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.z = _TimeX;
					    u_xlat0.yw = vs_TEXCOORD0.yy * vec2(80.0, 25.0);
					    u_xlat8 = dot(u_xlat0.zw, vec2(12.9898005, 78.2330017));
					    u_xlat8 = sin(u_xlat8);
					    u_xlat8 = u_xlat8 * 43758.5469;
					    u_xlat8 = fract(u_xlat8);
					    u_xlat1.xyz = vs_TEXCOORD0.yyy * vec3(80.0, 25.0, 800.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(_TimeX);
					    u_xlat12 = sin(u_xlat1.z);
					    u_xlat1.xy = u_xlat1.xy * vec2(0.0285714287, 0.0285714287);
					    u_xlat1.xy = sin(u_xlat1.xy);
					    u_xlat8 = u_xlat8 * u_xlat1.y;
					    u_xlat0.z = u_xlat8 * _Distortion;
					    u_xlat0.x = _TimeX * 15.0;
					    u_xlat0.x = dot(u_xlat0.xy, vec2(12.9898005, 78.2330017));
					    u_xlat0.x = sin(u_xlat0.x);
					    u_xlat0.xz = u_xlat0.xz * vec2(43758.5469, 0.00400000019);
					    u_xlat0.x = fract(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _Distortion;
					    u_xlat0.x = u_xlat0.x * 0.00300000003 + u_xlat0.z;
					    u_xlat1.z = u_xlat0.x + vs_TEXCOORD0.x;
					    u_xlat0.x = u_xlat1.z + _RGB;
					    u_xlat0.y = vs_TEXCOORD0.y;
					    u_xlat2 = texture(_MainTex, u_xlat0.xy);
					    u_xlat1.x = u_xlat1.z + (-_RGB);
					    u_xlat1.yw = vs_TEXCOORD0.yy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat2.y = u_xlat1.y;
					    u_xlat2.x = u_xlat3.x;
					    SV_Target0.xyz = (-vec3(u_xlat12)) * vec3(0.0399999991, 0.0399999991, 0.0399999991) + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}