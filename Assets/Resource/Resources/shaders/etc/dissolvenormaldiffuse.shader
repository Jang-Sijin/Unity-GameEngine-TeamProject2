Shader "Custom/Dissolve/DissolveNormalDiffuse" {
	Properties {
		_Color ("Color", Vector) = (1,1,1,1)
		_DissolvePower ("Dissolve Power", Range(0.65, 0)) = 0
		_DissolveEmissionThickness ("Dissolve Emission Thickness", Range(-0.02, -0.05)) = -0.03
		_DissolveEmissionColor ("Dissolve Emission Color", Vector) = (1,1,1,1)
		_MainTex ("Main Texture", 2D) = "white" {}
		_NormalMap ("Normal Map", 2D) = "bump" {}
		_DissolveTex ("Dissolve Texture", 2D) = "white" {}
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "RenderType" = "TransparentCutout" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "ForwardBase" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ColorMask RGB -1
			ZClip Off
			Cull Off
			GpuProgramID 21827
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _NormalMap_ST              c16      1
					//   _DissolveTex_ST            c17      1
					//
					
					    vs_3_0
					    def c18, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord8 o7
					    mad r0, v0.xyzx, c18.xxxy, c18.yyyx
					    dp4 r4.x, c0, r0
					    dp4 r4.y, c1, r0
					    dp4 r4.z, c2, r0
					    dp4 r4.w, c3, r0
					    mad o1.xy, v3, c15, c15.zwzw
					    mad o1.zw, v3.xyxy, c16.xyxy, c16
					    mad o2.xy, v3, c17, c17.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r0, c8.xyzz, v2.y
					    mad r0, v2.x, c7.xyzz, r0
					    mad r0, v2.z, c9.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o6.xyz, c13, r1.x, r3
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.z, r1, r1
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r1
					    mov o3.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r0.z, c14.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r0.x
					    mov o4.x, r1.x
					    mov o5.x, r1.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r0.y
					    mov o5.z, r0.w
					    mov o7, c18.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _NormalMap_ST              c17      1
					//   _DissolveTex_ST            c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8
					    mad o1.xy, v3, c16, c16.zwzw
					    mad o1.zw, v3.xyxy, c17.xyxy, c17
					    mad o2.xy, v3, c18, c18.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r0, c8.xyzz, v2.y
					    mad r0, v2.x, c7.xyzz, r0
					    mad r0, v2.z, c9.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c11, r2
					    dp4 r3.y, c12, r2
					    dp4 r3.z, c13, r2
					    mad o6.xyz, c14, r1.x, r3
					    mad r1, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r2.y, c1, r1
					    mul r0.z, r2.y, c10.x
					    mul r3.w, r0.z, c19.z
					    dp4 r2.x, c0, r1
					    dp4 r2.w, c3, r1
					    dp4 r2.z, c2, r1
					    mul r3.xz, r2.xyww, c19.z
					    mov r4, r2
					    mov o7.zw, r2
					    add o7.xy, r3.z, r3.xwzw
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.z, r1, r1
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r1
					    mov o3.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r0.z, c15.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r0.x
					    mov o4.x, r1.x
					    mov o5.x, r1.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r0.y
					    mov o5.z, r0.w
					    mov o8, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 52 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat1.x = u_xlat3.y * u_xlat3.y;
					    u_xlat1.x = u_xlat3.x * u_xlat3.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   unity_4LightPosX0          c14      1
					//   unity_4LightPosY0          c15      1
					//   unity_4LightPosZ0          c16      1
					//   unity_4LightAtten0         c17      1
					//   unity_SHBr                 c18      1
					//   unity_SHBg                 c19      1
					//   unity_SHBb                 c20      1
					//   unity_SHC                  c21      1
					//   unity_WorldTransformParams c22      1
					//   _MainTex_ST                c23      1
					//   _NormalMap_ST              c24      1
					//   _DissolveTex_ST            c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 9.99999997e-007, 0.0125228781
					    def c27, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord8 o7
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r7.x, c4, r0
					    dp4 r7.y, c5, r0
					    dp4 r7.z, c6, r0
					    dp4 r7.w, c7, r0
					    mad o1.xy, v3, c23, c23.zwzw
					    mad o1.zw, v3.xyxy, c24.xyxy, c24
					    mad o2.xy, v3, c25, c25.zwzw
					    dp4 r0.x, c9, v0
					    add r1, -r0.x, c15
					    mov o4.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c8, v0
					    add r3, -r2.x, c14
					    mov o3.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c10, v0
					    add r4, -r2.x, c16
					    mov o5.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c26.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c26.x
					    mad r0, r0, c17, r5.x
					    mul r5, c12.xyzz, v2.y
					    mad r5, v2.x, c11.xyzz, r5
					    mad r5, v2.z, c13.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c26.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c27.x, c27.y
					    mad r1.xyz, r0, r1, c26.w
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c18, r2
					    dp4 r3.y, c19, r2
					    dp4 r3.z, c20, r2
					    mad r2.xyz, c21, r0.w, r3
					    mad o6.xyz, r0, r1, r2
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c22.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o3.y, r1.x
					    mov o3.z, r5.x
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r1.y
					    mov o5.y, r1.z
					    mov o4.z, r5.y
					    mov o5.z, r5.w
					    mov o7, c26.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 79 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.x = u_xlat0.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1 = vec4(u_xlat16) * u_xlat1.xyzz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.wxy;
					    u_xlat2.xyz = u_xlat1.ywx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD2.w = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat0.y;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD3.w = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat1.w;
					    u_xlat0 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat4;
					    u_xlat0 = u_xlat3 * u_xlat1.wwzw + u_xlat0;
					    u_xlat2 = u_xlat3 * u_xlat3 + u_xlat2;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _ProjectionParams          c14      1
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHBr                 c19      1
					//   unity_SHBg                 c20      1
					//   unity_SHBb                 c21      1
					//   unity_SHC                  c22      1
					//   unity_WorldTransformParams c23      1
					//   _MainTex_ST                c24      1
					//   _NormalMap_ST              c25      1
					//   _DissolveTex_ST            c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0.0125228781
					    def c28, 0.305306017, 0.682171106, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7
					    dcl_texcoord8 o8
					    mad o1.xy, v3, c24, c24.zwzw
					    mad o1.zw, v3.xyxy, c25.xyxy, c25
					    mad o2.xy, v3, c26, c26.zwzw
					    dp4 r0.x, c9, v0
					    add r1, -r0.x, c16
					    mov o4.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c8, v0
					    add r3, -r2.x, c15
					    mov o3.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c10, v0
					    add r4, -r2.x, c17
					    mov o5.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c27.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c27.x
					    mad r0, r0, c18, r5.x
					    mul r5, c12.xyzz, v2.y
					    mad r5, v2.x, c11.xyzz, r5
					    mad r5, v2.z, c13.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c27.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c28.x, c28.y
					    mad r1.xyz, r0, r1, c27.w
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c19, r2
					    dp4 r3.y, c20, r2
					    dp4 r3.z, c21, r2
					    mad r2.xyz, c22, r0.w, r3
					    mad o6.xyz, r0, r1, r2
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c28.z
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c28.z
					    mov r7, r1
					    mov o7.zw, r1
					    add o7.xy, r2.z, r2.xwzw
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c23.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o3.y, r1.x
					    mov o3.z, r5.x
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r1.y
					    mov o5.y, r1.z
					    mov o4.z, r5.y
					    mov o5.z, r5.w
					    mov o8, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 85 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat19;
					float u_xlat20;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat19 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat1.xyz = vec3(u_xlat19) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat19 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2 = vec4(u_xlat20) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD2.w = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat4 + u_xlat3;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat19 = u_xlat2.y * u_xlat2.y;
					    u_xlat19 = u_xlat2.x * u_xlat2.x + (-u_xlat19);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat19) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _NormalMap_ST              c16      1
					//   _DissolveTex_ST            c17      1
					//
					
					    vs_3_0
					    def c18, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8
					    mad r0, v0.xyzx, c18.xxxy, c18.yyyx
					    dp4 r4.x, c0, r0
					    dp4 r4.y, c1, r0
					    dp4 r4.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c15, c15.zwzw
					    mad o1.zw, v3.xyxy, c16.xyxy, c16
					    mad o2.xy, v3, c17, c17.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r1, c8.xyzz, v2.y
					    mad r1, v2.x, c7.xyzz, r1
					    mad r1, v2.z, c9.xyzz, r1
					    dp3 r0.y, r1.xyww, r1.xyww
					    rsq r0.y, r0.y
					    mul r1, r0.y, r1
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.ywzx, r1
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o6.xyz, c13, r0.y, r3
					    mov r4.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r2.xyz, r0, r1.wxyw
					    mad r2.xyz, r1.ywxw, r0.yzxw, -r2
					    mul r0.z, c14.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.x
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.y
					    mov o5.z, r1.w
					    mov o8, c18.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _ProjectionParams          c10      1
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _MainTex_ST                c16      1
					//   _NormalMap_ST              c17      1
					//   _DissolveTex_ST            c18      1
					//
					
					    vs_3_0
					    def c19, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9
					    mad o1.xy, v3, c16, c16.zwzw
					    mad o1.zw, v3.xyxy, c17.xyxy, c17
					    mad o2.xy, v3, c18, c18.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r0, c8.xyzz, v2.y
					    mad r0, v2.x, c7.xyzz, r0
					    mad r0, v2.z, c9.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c11, r2
					    dp4 r3.y, c12, r2
					    dp4 r3.z, c13, r2
					    mad o6.xyz, c14, r1.x, r3
					    mad r1, v0.xyzx, c19.xxxy, c19.yyyx
					    dp4 r2.y, c1, r1
					    mul r0.z, r2.y, c10.x
					    mul r3.w, r0.z, c19.z
					    dp4 r2.x, c0, r1
					    dp4 r2.w, c3, r1
					    dp4 r2.z, c2, r1
					    mul r3.xz, r2.xyww, c19.z
					    mov r4, r2
					    mov o7.zw, r2
					    mov o8.x, r2.z
					    add o7.xy, r3.z, r3.xwzw
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.z, r1, r1
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r1
					    mov o3.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r0.z, c15.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r0.x
					    mov o4.x, r1.x
					    mov o5.x, r1.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r0.y
					    mov o5.z, r0.w
					    mov o9, c19.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 53 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD2.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    vs_TEXCOORD2.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat10 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat4.xyz;
					    vs_TEXCOORD2.y = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat1.z;
					    vs_TEXCOORD3.y = u_xlat4.y;
					    vs_TEXCOORD4.y = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat3.w;
					    u_xlat10 = u_xlat3.y * u_xlat3.y;
					    u_xlat10 = u_xlat3.x * u_xlat3.x + (-u_xlat10);
					    u_xlat1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat2.xyz;
					    u_xlat5 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat5 * 0.5;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   unity_4LightPosX0          c14      1
					//   unity_4LightPosY0          c15      1
					//   unity_4LightPosZ0          c16      1
					//   unity_4LightAtten0         c17      1
					//   unity_SHBr                 c18      1
					//   unity_SHBg                 c19      1
					//   unity_SHBb                 c20      1
					//   unity_SHC                  c21      1
					//   unity_WorldTransformParams c22      1
					//   _MainTex_ST                c23      1
					//   _NormalMap_ST              c24      1
					//   _DissolveTex_ST            c25      1
					//
					
					    vs_3_0
					    def c26, 1, 0, 9.99999997e-007, 0.0125228781
					    def c27, 0.305306017, 0.682171106, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    dcl_texcoord8 o8
					    mad r0, v0.xyzx, c26.xxxy, c26.yyyx
					    dp4 r7.x, c4, r0
					    dp4 r7.y, c5, r0
					    dp4 r7.w, c7, r0
					    dp4 r0.x, c6, r0
					    mad o1.xy, v3, c23, c23.zwzw
					    mad o1.zw, v3.xyxy, c24.xyxy, c24
					    mad o2.xy, v3, c25, c25.zwzw
					    dp4 r0.y, c9, v0
					    add r1, -r0.y, c15
					    mov o4.w, r0.y
					    mul r2, r1, r1
					    dp4 r0.y, c8, v0
					    add r3, -r0.y, c14
					    mov o3.w, r0.y
					    mad r2, r3, r3, r2
					    dp4 r0.y, c10, v0
					    add r4, -r0.y, c16
					    mov o5.w, r0.y
					    mad r2, r4, r4, r2
					    max r2, r2, c26.z
					    rsq r5.x, r2.x
					    rsq r5.y, r2.y
					    rsq r5.z, r2.z
					    rsq r5.w, r2.w
					    mov r6.x, c26.x
					    mad r2, r2, c17, r6.x
					    mul r6, c12.xyzz, v2.y
					    mad r6, v2.x, c11.xyzz, r6
					    mad r6, v2.z, c13.xyzz, r6
					    dp3 r0.y, r6.xyww, r6.xyww
					    rsq r0.y, r0.y
					    mul r6, r0.y, r6
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.wwzw, r1
					    mul r1, r5, r1
					    max r1, r1, c26.y
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c27.x, c27.y
					    mad r1.xyz, r0.yzww, r1, c26.w
					    mul r1.w, r6.y, r6.y
					    mad r1.w, r6.x, r6.x, -r1.w
					    mul r2, r6.ywzx, r6
					    dp4 r3.x, c18, r2
					    dp4 r3.y, c19, r2
					    dp4 r3.z, c20, r2
					    mad r2.xyz, c21, r1.w, r3
					    mad o6.xyz, r0.yzww, r1, r2
					    mov r7.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, r0, r6.wxyw
					    mad r1.xyz, r6.ywxw, r0.yzxw, -r1
					    mul r0.z, c22.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o3.y, r1.x
					    mov o3.z, r6.x
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r1.y
					    mov o5.y, r1.z
					    mov o4.z, r6.y
					    mov o5.z, r6.w
					    mov o8, c26.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 81 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    vs_TEXCOORD2.x = u_xlat0.z;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1 = vec4(u_xlat16) * u_xlat1.xyzz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.wxy;
					    u_xlat2.xyz = u_xlat1.ywx * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD2.w = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat0.x;
					    vs_TEXCOORD4.x = u_xlat0.y;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    vs_TEXCOORD3.w = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat1.w;
					    u_xlat0 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat2 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat2 = u_xlat0 * u_xlat0 + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx + u_xlat4;
					    u_xlat0 = u_xlat3 * u_xlat1.wwzw + u_xlat0;
					    u_xlat2 = u_xlat3 * u_xlat3 + u_xlat2;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat2 * u_xlat0;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat1.y * u_xlat1.y;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + (-u_xlat15);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat3.x = dot(unity_SHBr, u_xlat1);
					    u_xlat3.y = dot(unity_SHBg, u_xlat1);
					    u_xlat3.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _ProjectionParams          c14      1
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHBr                 c19      1
					//   unity_SHBg                 c20      1
					//   unity_SHBb                 c21      1
					//   unity_SHC                  c22      1
					//   unity_WorldTransformParams c23      1
					//   _MainTex_ST                c24      1
					//   _NormalMap_ST              c25      1
					//   _DissolveTex_ST            c26      1
					//
					
					    vs_3_0
					    def c27, 1, 0, 9.99999997e-007, 0.0125228781
					    def c28, 0.305306017, 0.682171106, 0.5, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.x
					    dcl_texcoord8 o9
					    mad o1.xy, v3, c24, c24.zwzw
					    mad o1.zw, v3.xyxy, c25.xyxy, c25
					    mad o2.xy, v3, c26, c26.zwzw
					    dp4 r0.x, c9, v0
					    add r1, -r0.x, c16
					    mov o4.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c8, v0
					    add r3, -r2.x, c15
					    mov o3.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c10, v0
					    add r4, -r2.x, c17
					    mov o5.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c27.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.x, c27.x
					    mad r0, r0, c18, r5.x
					    mul r5, c12.xyzz, v2.y
					    mad r5, v2.x, c11.xyzz, r5
					    mad r5, v2.z, c13.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c27.y
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c28.x, c28.y
					    mad r1.xyz, r0, r1, c27.w
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c19, r2
					    dp4 r3.y, c20, r2
					    dp4 r3.z, c21, r2
					    mad r2.xyz, c22, r0.w, r3
					    mad o6.xyz, r0, r1, r2
					    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
					    dp4 r1.y, c5, r0
					    mul r2.x, r1.y, c14.x
					    mul r2.w, r2.x, c28.z
					    dp4 r1.x, c4, r0
					    dp4 r1.w, c7, r0
					    dp4 r1.z, c6, r0
					    mul r2.xz, r1.xyww, c28.z
					    mov r7, r1
					    mov o7.zw, r1
					    mov o8.x, r1.z
					    add o7.xy, r2.z, r2.xwzw
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c23.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o3.y, r1.x
					    mov o3.z, r5.x
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r1.y
					    mov o5.y, r1.z
					    mov o4.z, r5.y
					    mov o5.z, r5.w
					    mov o9, c27.y
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 86 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					float u_xlat12;
					float u_xlat19;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD6.zw = u_xlat0.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2 = vec4(u_xlat19) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    u_xlat4.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD2.w = u_xlat4.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat4 + u_xlat3;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat12 = u_xlat2.y * u_xlat2.y;
					    u_xlat12 = u_xlat2.x * u_xlat2.x + (-u_xlat12);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat4.x = dot(unity_SHBr, u_xlat2);
					    u_xlat4.y = dot(unity_SHBg, u_xlat2);
					    u_xlat4.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat12) + u_xlat4.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat6 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat6 * 0.5;
					    vs_TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   unity_SHAr                 c1       1
					//   unity_SHAg                 c2       1
					//   unity_SHAb                 c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _DissolveEmissionColor     c6       1
					//   _DissolvePower             c7       1
					//   _DissolveEmissionThickness c8       1
					//   Zero                       c9       1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c10, 0.333333343, 0.5, 0.416666657, 0
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    def c12, 2, -1, 0, 1
					    def c13, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c5
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c7.x
					    mov r1.xy, c10
					    mad r1.z, c8.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    cmp r1.z, r0.w, c12.z, r1.z
					    mov r2.zw, c12
					    mad r2, c6.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c8.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    mad r1.x, c8.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c12.z, r1.z
					    mov r2.xyz, c6
					    mad r2, r2.xyzx, c13.xxxy, c13.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c8.x
					    cmp r1.x, r1.x, -c12.z, -c12.w
					    mad r1.y, c8.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c12.z, r1.x
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c9.x
					    texkill r1
					    mul_pp r1.xyz, r0, c4
					    texld_pp r2, v0.zwzw, s1
					    mad_pp r2.xy, r2.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r2, r2, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    dp3_pp r3.x, v2, r2
					    dp3_pp r3.y, v3, r2
					    dp3_pp r3.z, v4, r2
					    mov r3.w, c12.w
					    dp4_pp r2.x, c1, r3
					    dp4_pp r2.y, c2, r3
					    dp4_pp r2.z, c3, r3
					    dp3_pp r1.w, r3, c0
					    max_pp r2.w, r1.w, c12.z
					    add_pp r2.xyz, r2, v5
					    max_pp r3.xyz, r2, c12.z
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c10.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c11.x, c11.y
					    max_pp r3.xyz, r2, c12.z
					    mul_pp r0.xyz, r0, r3
					    mov_pp oC0.w, r0.w
					    mad_pp oC0.xyz, r1, r2.w, r0
					
					// approximately 56 instruction slots used (3 texture, 53 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat8;
					bool u_xlatb12;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlatb16 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb12 = u_xlat2.x<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb12;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb16)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat16 = u_xlat0.w + (-Zero);
					    u_xlatb16 = u_xlat16<0.0;
					    if(((int(u_xlatb16) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb1){
					        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : u_xlat8.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat1.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat1.x = min(u_xlat8.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat1, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   unity_SHAr                 c1       1
					//   unity_SHAg                 c2       1
					//   unity_SHAb                 c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _DissolveEmissionColor     c6       1
					//   _DissolvePower             c7       1
					//   _DissolveEmissionThickness c8       1
					//   Zero                       c9       1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c10, 0.333333343, 0.5, 0.416666657, 0
					    def c11, 1.05499995, -0.0549999997, 0, 0
					    def c12, 2, -1, 0, 1
					    def c13, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c5
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c7.x
					    mov r1.xy, c10
					    mad r1.z, c8.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    cmp r1.z, r0.w, c12.z, r1.z
					    mov r2.zw, c12
					    mad r2, c6.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c8.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    mad r1.x, c8.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c12.z, r1.z
					    mov r2.xyz, c6
					    mad r2, r2.xyzx, c13.xxxy, c13.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c8.x
					    cmp r1.x, r1.x, -c12.z, -c12.w
					    mad r1.y, c8.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c12.z, r1.x
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c9.x
					    texkill r1
					    texldp_pp r1, v6, s0
					    mul_pp r1.xyz, r1.x, c4
					    mul_pp r1.xyz, r0, r1
					    texld_pp r2, v0.zwzw, s2
					    mad_pp r2.xy, r2.wyzw, c12.x, c12.y
					    dp2add_sat_pp r1.w, r2, r2, c12.z
					    add_pp r1.w, -r1.w, c12.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    dp3_pp r3.x, v2, r2
					    dp3_pp r3.y, v3, r2
					    dp3_pp r3.z, v4, r2
					    mov r3.w, c12.w
					    dp4_pp r2.x, c1, r3
					    dp4_pp r2.y, c2, r3
					    dp4_pp r2.z, c3, r3
					    dp3_pp r1.w, r3, c0
					    max_pp r2.w, r1.w, c12.z
					    add_pp r2.xyz, r2, v5
					    max_pp r3.xyz, r2, c12.z
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c10.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c11.x, c11.y
					    max_pp r3.xyz, r2, c12.z
					    mul_pp r0.xyz, r0, r3
					    mov_pp oC0.w, r0.w
					    mad_pp oC0.xyz, r1, r2.w, r0
					
					// approximately 58 instruction slots used (4 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					vec3 u_xlat10;
					bool u_xlatb14;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlatb19 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat2.x<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb14;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat0;
					    u_xlatb19 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat0;
					    u_xlatb19 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb19)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat19 = u_xlat0.w + (-Zero);
					    u_xlatb19 = u_xlat19<0.0;
					    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat2.y * 0.25;
					        u_xlat8 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat4.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat19 = max(u_xlat19, u_xlat8);
					        u_xlat2.x = min(u_xlat4.x, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   unity_SHAr                 c1       1
					//   unity_SHAg                 c2       1
					//   unity_SHAb                 c3       1
					//   unity_FogColor             c4       1
					//   unity_FogParams            c5       1
					//   _LightColor0               c6       1
					//   _Color                     c7       1
					//   _DissolveEmissionColor     c8       1
					//   _DissolvePower             c9       1
					//   _DissolveEmissionThickness c10      1
					//   Zero                       c11      1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c12, 0.333333343, 0.5, 0.416666657, 0
					    def c13, 1.05499995, -0.0549999997, 0, 0
					    def c14, 2, -1, 0, 1
					    def c15, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c7
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c9.x
					    mov r1.xy, c12
					    mad r1.z, c10.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c14.z, -c14.w
					    cmp r1.z, r0.w, c14.z, r1.z
					    mov r2.zw, c14
					    mad r2, c8.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c10.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c14.z, -c14.w
					    mad r1.x, c10.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c14.z, r1.z
					    mov r2.xyz, c8
					    mad r2, r2.xyzx, c15.xxxy, c15.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c10.x
					    cmp r1.x, r1.x, -c14.z, -c14.w
					    mad r1.y, c10.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c14.z, r1.x
					    cmp_pp r0, r1.x, r0, c14.zzzw
					    add_pp r1, r0.w, -c11.x
					    texkill r1
					    mul_pp r1.xyz, r0, c6
					    texld_pp r2, v0.zwzw, s1
					    mad_pp r2.xy, r2.wyzw, c14.x, c14.y
					    dp2add_sat_pp r1.w, r2, r2, c14.z
					    add_pp r1.w, -r1.w, c14.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    dp3_pp r3.x, v2, r2
					    dp3_pp r3.y, v3, r2
					    dp3_pp r3.z, v4, r2
					    mov r3.w, c14.w
					    dp4_pp r2.x, c1, r3
					    dp4_pp r2.y, c2, r3
					    dp4_pp r2.z, c3, r3
					    dp3_pp r1.w, r3, c0
					    max_pp r2.w, r1.w, c14.z
					    add_pp r2.xyz, r2, v5
					    max_pp r3.xyz, r2, c14.z
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c12.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c13.x, c13.y
					    max_pp r3.xyz, r2, c14.z
					    mul_pp r0.xyz, r0, r3
					    mov_pp oC0.w, r0.w
					    mad_pp r0.xyz, r1, r2.w, r0
					    add r0.xyz, r0, -c4
					    mad_sat r0.w, v6.x, c5.z, c5.w
					    mad_pp oC0.xyz, r0.w, r0, c4
					
					// approximately 59 instruction slots used (3 texture, 56 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					vec3 u_xlat8;
					bool u_xlatb12;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlatb16 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb12 = u_xlat2.x<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb12;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb16)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat16 = u_xlat0.w + (-Zero);
					    u_xlatb16 = u_xlat16<0.0;
					    if(((int(u_xlatb16) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb1){
					        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : u_xlat8.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat1.y * 0.25;
					        u_xlat3.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat8.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat3.x);
					        u_xlat1.x = min(u_xlat8.x, u_xlat6.x);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat1, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD5.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   sampler2D _ShadowMapTexture;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   unity_SHAr                 c1       1
					//   unity_SHAg                 c2       1
					//   unity_SHAb                 c3       1
					//   unity_FogColor             c4       1
					//   unity_FogParams            c5       1
					//   _LightColor0               c6       1
					//   _Color                     c7       1
					//   _DissolveEmissionColor     c8       1
					//   _DissolvePower             c9       1
					//   _DissolveEmissionThickness c10      1
					//   Zero                       c11      1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c12, 0.333333343, 0.5, 0.416666657, 0
					    def c13, 2, -1, 0, 1
					    def c14, 1.05499995, -0.0549999997, 0, 0
					    def c15, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c7
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c9.x
					    mov r1.xy, c12
					    mad r1.z, c10.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c13.z, -c13.w
					    cmp r1.z, r0.w, c13.z, r1.z
					    mov r2.zw, c13
					    mad r2, c8.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c10.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c13.z, -c13.w
					    mad r1.x, c10.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c13.z, r1.z
					    mov r2.xyz, c8
					    mad r2, r2.xyzx, c15.xxxy, c15.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c10.x
					    cmp r1.x, r1.x, -c13.z, -c13.w
					    mad r1.y, c10.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c13.z, r1.x
					    cmp_pp r0, r1.x, r0, c13.zzzw
					    add_pp r1, r0.w, -c11.x
					    texkill r1
					    texldp_pp r1, v6, s0
					    mul_pp r1.xyz, r1.x, c6
					    mul_pp r1.xyz, r0, r1
					    texld_pp r2, v0.zwzw, s2
					    mad_pp r2.xy, r2.wyzw, c13.x, c13.y
					    dp2add_sat_pp r1.w, r2, r2, c13.z
					    add_pp r1.w, -r1.w, c13.w
					    rsq_pp r1.w, r1.w
					    rcp_pp r2.z, r1.w
					    dp3_pp r3.x, v2, r2
					    dp3_pp r3.y, v3, r2
					    dp3_pp r3.z, v4, r2
					    mov_pp r3.w, c13.w
					    dp4_pp r2.x, c1, r3
					    dp4_pp r2.y, c2, r3
					    dp4_pp r2.z, c3, r3
					    dp3_pp r1.w, r3, c0
					    max_pp r2.w, r1.w, c13.z
					    add_pp r2.xyz, r2, v5
					    max_pp r3.xyz, r2, c13.z
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c12.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c14.x, c14.y
					    max_pp r3.xyz, r2, c13.z
					    mul_pp r0.xyz, r0, r3
					    mov_pp oC0.w, r0.w
					    mad_pp r0.xyz, r1, r2.w, r0
					    add r0.xyz, r0, -c4
					    mad_sat r0.w, v7.x, c5.z, c5.w
					    mad_pp oC0.xyz, r0.w, r0, c4
					
					// approximately 61 instruction slots used (4 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat8;
					vec3 u_xlat10;
					bool u_xlatb14;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlatb19 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat2.x<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb14;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat0;
					    u_xlatb19 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb19)) ? u_xlat3 : u_xlat0;
					    u_xlatb19 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb19 = u_xlatb19 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb19)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat19 = u_xlat0.w + (-Zero);
					    u_xlatb19 = u_xlat19<0.0;
					    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
					    u_xlat2 = texture(_ShadowMapTexture, u_xlat2.xy);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlatb19 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb19){
					        u_xlatb19 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat2.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat2.xyz;
					        u_xlat2.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat2.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat10.x = vs_TEXCOORD2.w;
					        u_xlat10.y = vs_TEXCOORD3.w;
					        u_xlat10.z = vs_TEXCOORD4.w;
					        u_xlat2.xyz = (bool(u_xlatb19)) ? u_xlat2.xyz : u_xlat10.xyz;
					        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat19 = u_xlat2.y * 0.25;
					        u_xlat8 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat4.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat19 = max(u_xlat19, u_xlat8);
					        u_xlat2.x = min(u_xlat4.x, u_xlat19);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat5.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xyz);
					        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(u_xlat4, u_xlat3);
					        u_xlat4.y = dot(u_xlat5, u_xlat3);
					        u_xlat4.z = dot(u_xlat2, u_xlat3);
					    } else {
					        u_xlat3.w = 1.0;
					        u_xlat4.x = dot(unity_SHAr, u_xlat3);
					        u_xlat4.y = dot(unity_SHAg, u_xlat3);
					        u_xlat4.z = dot(unity_SHAb, u_xlat3);
					    }
					    u_xlat2.xyz = u_xlat4.xyz + vs_TEXCOORD5.xyz;
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat19 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = max(u_xlat19, 0.0);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat19) + u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "ForwardAdd" "RenderType" = "TransparentCutout" }
			Blend One One, One One
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 89986
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 38 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 38 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 38 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 38 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 38 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 40 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 40 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 40 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 40 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _MainTex_ST                c11      1
					//   _NormalMap_ST              c12      1
					//   _DissolveTex_ST            c13      1
					//
					
					    vs_3_0
					    def c14, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord7 o7.x
					    mad r0, v0.xyzx, c14.xxxy, c14.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.w, c3, r0
					    dp4 r0.x, c2, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    mad o2.xy, v3, c13, c13.zwzw
					    dp4 o6.x, c4, v0
					    dp4 o6.y, c5, v0
					    dp4 o6.z, c6, v0
					    mov r3.z, r0.x
					    mov o7.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o3.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r1.y
					    mov o4.x, r0.x
					    mov o5.x, r0.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r1.z
					    mov o5.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 40 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD2.y = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat0.y;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat0.z;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD3.y = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat2.z;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       3
					//   _WorldSpaceLightPos0       c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _DissolveEmissionColor     c6       1
					//   _DissolvePower             c7       1
					//   _DissolveEmissionThickness c8       1
					//   Zero                       c9       1
					//   _LightTexture0             s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c10, 0.333333343, 0.5, 0, 0
					    def c11, 2, -1, 0, 1
					    def c12, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c5
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c7.x
					    mov r1.x, c8.x
					    mad r1.y, r1.x, c10.x, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    cmp r1.y, r0.w, c11.z, r1.y
					    mov r1.zw, c11
					    mad r2, c6.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c10.y, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.z, r1.x, -c10.x, r0.w
					    cmp r1.y, r1.z, c11.z, r1.y
					    mov r2.xyz, c6
					    mad r2, r2.xyzx, c12.xxxy, c12.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c8.x
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.x, r1.x, -c10.y, r0.w
					    cmp r1.x, r1.x, c11.z, r1.y
					    cmp_pp r0, r1.x, r0, c11.zzzw
					    add_pp r1, r0.w, -c9.x
					    texkill r1
					    mad r1, v5.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s0
					    mul_pp r1.xyz, r1.x, c4
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c3, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s2
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r0.w, r1, r1, c11.z
					    add_pp r0.w, -r0.w, c11.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c11.z
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 51 instruction slots used (4 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   _LightColor0               c1       1
					//   _Color                     c2       1
					//   _DissolveEmissionColor     c3       1
					//   _DissolvePower             c4       1
					//   _DissolveEmissionThickness c5       1
					//   Zero                       c6       1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c7, 0.333333343, 0.5, 0, 0
					    def c8, 2, -1, 0, 1
					    def c9, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c2
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c4.x
					    mov r1.x, c5.x
					    mad r1.y, r1.x, c7.x, -r0.w
					    cmp r1.y, r1.y, -c8.z, -c8.w
					    cmp r1.y, r0.w, c8.z, r1.y
					    mov r1.zw, c8
					    mad r2, c3.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c7.y, -r0.w
					    cmp r1.y, r1.y, -c8.z, -c8.w
					    mad r1.z, r1.x, -c7.x, r0.w
					    cmp r1.y, r1.z, c8.z, r1.y
					    mov r2.xyz, c3
					    mad r2, r2.xyzx, c9.xxxy, c9.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c5.x
					    cmp r1.y, r1.y, -c8.z, -c8.w
					    mad r1.x, r1.x, -c7.y, r0.w
					    cmp r1.x, r1.x, c8.z, r1.y
					    cmp_pp r0, r1.x, r0, c8.zzzw
					    add_pp r1, r0.w, -c6.x
					    texkill r1
					    mul_pp r0.xyz, r0, c1
					    mov_pp oC0.w, r0.w
					    texld_pp r1, v0.zwzw, s1
					    mad_pp r1.xy, r1.wyzw, c8.x, c8.y
					    dp2add_sat_pp r0.w, r1, r1, c8.z
					    add_pp r0.w, -r0.w, c8.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    dp3_pp r0.w, r2, c0
					    max_pp r1.x, r0.w, c8.z
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 40 instruction slots used (3 texture, 37 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       4
					//   _WorldSpaceLightPos0       c4       1
					//   _LightColor0               c5       1
					//   _Color                     c6       1
					//   _DissolveEmissionColor     c7       1
					//   _DissolvePower             c8       1
					//   _DissolveEmissionThickness c9       1
					//   Zero                       c10      1
					//   _LightTexture0             s0       1
					//   _LightTextureB0            s1       1
					//   _MainTex                   s2       1
					//   _NormalMap                 s3       1
					//   _DissolveTex               s4       1
					//
					
					    ps_3_0
					    def c11, 0.333333343, 0.5, 0, 0
					    def c12, 2, -1, 0, 1
					    def c13, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s2
					    mul_pp r0.xyz, r0, c6
					    texld_pp r1, v1, s4
					    add_pp r0.w, -r1.x, c8.x
					    mov r1.xy, c11
					    mad r1.z, c9.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    cmp r1.z, r0.w, c12.z, r1.z
					    mov r2.zw, c12
					    mad r2, c7.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c9.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    mad r1.x, c9.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c12.z, r1.z
					    mov r2.xyz, c7
					    mad r2, r2.xyzx, c13.xxxy, c13.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c9.x
					    cmp r1.x, r1.x, -c12.z, -c12.w
					    mad r1.y, c9.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c12.z, r1.x
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c10.x
					    texkill r1
					    mad r1, v5.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c11.y
					    dp3 r1.z, r3, r3
					    texld_pp r2, r1.z, s1
					    texld_pp r1, r1, s0
					    mul r1.x, r2.x, r1.w
					    mul_pp r1.xyz, r1.x, c5
					    cmp_pp r1.xyz, -r3.z, c12.z, r1
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c4, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s3
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.w, r1, r1, c12.z
					    add_pp r0.w, -r0.w, c12.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c12.z
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 57 instruction slots used (5 texture, 52 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb13;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       3
					//   _WorldSpaceLightPos0       c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _DissolveEmissionColor     c6       1
					//   _DissolvePower             c7       1
					//   _DissolveEmissionThickness c8       1
					//   Zero                       c9       1
					//   _LightTexture0             s0       1
					//   _LightTextureB0            s1       1
					//   _MainTex                   s2       1
					//   _NormalMap                 s3       1
					//   _DissolveTex               s4       1
					//
					
					    ps_3_0
					    def c10, 0.333333343, 0.5, 0, 0
					    def c11, 2, -1, 0, 1
					    def c12, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s2
					    mul_pp r0.xyz, r0, c5
					    texld_pp r1, v1, s4
					    add_pp r0.w, -r1.x, c7.x
					    mov r1.x, c8.x
					    mad r1.y, r1.x, c10.x, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    cmp r1.y, r0.w, c11.z, r1.y
					    mov r1.zw, c11
					    mad r2, c6.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c10.y, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.z, r1.x, -c10.x, r0.w
					    cmp r1.y, r1.z, c11.z, r1.y
					    mov r2.xyz, c6
					    mad r2, r2.xyzx, c12.xxxy, c12.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c8.x
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.x, r1.x, -c10.y, r0.w
					    cmp r1.x, r1.x, c11.z, r1.y
					    cmp_pp r0, r1.x, r0, c11.zzzw
					    add_pp r1, r0.w, -c9.x
					    texkill r1
					    mad r1, v5.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld r2, r2, s0
					    texld r1, r1.x, s1
					    mul_pp r1.x, r2.w, r1.x
					    mul_pp r1.xyz, r1.x, c4
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c3, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s3
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r0.w, r1, r1, c11.z
					    add_pp r0.w, -r0.w, c11.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c11.z
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 53 instruction slots used (5 texture, 48 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       2
					//   _WorldSpaceLightPos0       c2       1
					//   _LightColor0               c3       1
					//   _Color                     c4       1
					//   _DissolveEmissionColor     c5       1
					//   _DissolvePower             c6       1
					//   _DissolveEmissionThickness c7       1
					//   Zero                       c8       1
					//   _LightTexture0             s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c9, 0.333333343, 0.5, 0, 0
					    def c10, 2, -1, 0, 1
					    def c11, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c4
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c6.x
					    mov r1.x, c7.x
					    mad r1.y, r1.x, c9.x, -r0.w
					    cmp r1.y, r1.y, -c10.z, -c10.w
					    cmp r1.y, r0.w, c10.z, r1.y
					    mov r1.zw, c10
					    mad r2, c5.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c9.y, -r0.w
					    cmp r1.y, r1.y, -c10.z, -c10.w
					    mad r1.z, r1.x, -c9.x, r0.w
					    cmp r1.y, r1.z, c10.z, r1.y
					    mov r2.xyz, c5
					    mad r2, r2.xyzx, c11.xxxy, c11.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c7.x
					    cmp r1.y, r1.y, -c10.z, -c10.w
					    mad r1.x, r1.x, -c9.y, r0.w
					    cmp r1.x, r1.x, c10.z, r1.y
					    cmp_pp r0, r1.x, r0, c10.zzzw
					    add_pp r1, r0.w, -c8.x
					    texkill r1
					    mad r1, v5.xyzx, c10.wwwz, c10.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp r1.xyz, r1.w, c3
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    texld_pp r1, v0.zwzw, s2
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r0.w, r1, r1, c10.z
					    add_pp r0.w, -r0.w, c10.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    dp3_pp r0.w, r2, c2
					    max_pp r1.x, r0.w, c10.z
					    mul_pp oC0.xyz, r0, r1.x
					
					// approximately 45 instruction slots used (4 texture, 41 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       3
					//   _WorldSpaceLightPos0       c3       1
					//   unity_FogParams            c4       1
					//   _LightColor0               c5       1
					//   _Color                     c6       1
					//   _DissolveEmissionColor     c7       1
					//   _DissolvePower             c8       1
					//   _DissolveEmissionThickness c9       1
					//   Zero                       c10      1
					//   _LightTexture0             s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c11, 0.333333343, 0.5, 0, 0
					    def c12, 2, -1, 0, 1
					    def c13, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c6
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c8.x
					    mov r1.x, c9.x
					    mad r1.y, r1.x, c11.x, -r0.w
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    cmp r1.y, r0.w, c12.z, r1.y
					    mov r1.zw, c12
					    mad r2, c7.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c11.y, -r0.w
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    mad r1.z, r1.x, -c11.x, r0.w
					    cmp r1.y, r1.z, c12.z, r1.y
					    mov r2.xyz, c7
					    mad r2, r2.xyzx, c13.xxxy, c13.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c9.x
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    mad r1.x, r1.x, -c11.y, r0.w
					    cmp r1.x, r1.x, c12.z, r1.y
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c10.x
					    texkill r1
					    mad r1, v5.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld_pp r1, r1.x, s0
					    mul_pp r1.xyz, r1.x, c5
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c3, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s2
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.w, r1, r1, c12.z
					    add_pp r0.w, -r0.w, c12.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c12.z
					    mul_pp r0.xyz, r0, r1.x
					    mad_sat r0.w, v6.x, c4.z, c4.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 53 instruction slots used (4 texture, 49 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xx);
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceLightPos0       c0       1
					//   unity_FogParams            c1       1
					//   _LightColor0               c2       1
					//   _Color                     c3       1
					//   _DissolveEmissionColor     c4       1
					//   _DissolvePower             c5       1
					//   _DissolveEmissionThickness c6       1
					//   Zero                       c7       1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c8, 0.333333343, 0.5, 0, 0
					    def c9, 2, -1, 0, 1
					    def c10, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord7 v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c3
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c5.x
					    mov r1.x, c6.x
					    mad r1.y, r1.x, c8.x, -r0.w
					    cmp r1.y, r1.y, -c9.z, -c9.w
					    cmp r1.y, r0.w, c9.z, r1.y
					    mov r1.zw, c9
					    mad r2, c4.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c8.y, -r0.w
					    cmp r1.y, r1.y, -c9.z, -c9.w
					    mad r1.z, r1.x, -c8.x, r0.w
					    cmp r1.y, r1.z, c9.z, r1.y
					    mov r2.xyz, c4
					    mad r2, r2.xyzx, c10.xxxy, c10.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c6.x
					    cmp r1.y, r1.y, -c9.z, -c9.w
					    mad r1.x, r1.x, -c8.y, r0.w
					    cmp r1.x, r1.x, c9.z, r1.y
					    cmp_pp r0, r1.x, r0, c9.zzzw
					    add_pp r1, r0.w, -c7.x
					    texkill r1
					    mul_pp r0.xyz, r0, c2
					    mov_pp oC0.w, r0.w
					    texld_pp r1, v0.zwzw, s1
					    mad_pp r1.xy, r1.wyzw, c9.x, c9.y
					    dp2add_sat_pp r0.w, r1, r1, c9.z
					    add_pp r0.w, -r0.w, c9.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    dp3_pp r0.w, r2, c0
					    max_pp r1.x, r0.w, c9.z
					    mul_pp r0.xyz, r0, r1.x
					    mad_sat r0.w, v5.x, c1.z, c1.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 42 instruction slots used (3 texture, 39 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_7[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       4
					//   _WorldSpaceLightPos0       c4       1
					//   unity_FogParams            c5       1
					//   _LightColor0               c6       1
					//   _Color                     c7       1
					//   _DissolveEmissionColor     c8       1
					//   _DissolvePower             c9       1
					//   _DissolveEmissionThickness c10      1
					//   Zero                       c11      1
					//   _LightTexture0             s0       1
					//   _LightTextureB0            s1       1
					//   _MainTex                   s2       1
					//   _NormalMap                 s3       1
					//   _DissolveTex               s4       1
					//
					
					    ps_3_0
					    def c12, 2, -1, 0, 1
					    def c13, 0.333333343, 0.5, 0, 0
					    def c14, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s2
					    mul_pp r0.xyz, r0, c7
					    texld_pp r1, v1, s4
					    add_pp r0.w, -r1.x, c9.x
					    mov r1.xy, c13
					    mad r1.z, c10.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    cmp r1.z, r0.w, c12.z, r1.z
					    mov r2.zw, c12
					    mad r2, c8.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c10.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c12.z, -c12.w
					    mad r1.x, c10.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c12.z, r1.z
					    mov r2.xyz, c8
					    mad r2, r2.xyzx, c14.xxxy, c14.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c10.x
					    cmp r1.x, r1.x, -c12.z, -c12.w
					    mad r1.y, c10.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c12.z, r1.x
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c11.x
					    texkill r1
					    mad r1, v5.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c13.y
					    dp3 r1.z, r3, r3
					    texld_pp r2, r1.z, s1
					    texld_pp r1, r1, s0
					    mul r1.x, r2.x, r1.w
					    mul_pp r1.xyz, r1.x, c6
					    cmp_pp r1.xyz, -r3.z, c12.z, r1
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c4, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s3
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.w, r1, r1, c12.z
					    add_pp r0.w, -r0.w, c12.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c12.z
					    mul_pp r0.xyz, r0, r1.x
					    mad_sat r0.w, v6.x, c5.z, c5.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 59 instruction slots used (5 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb13;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1 = vs_TEXCOORD5.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD5.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD5.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb13 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat3 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat1.x = u_xlatb13 ? 1.0 : float(0.0);
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.x = u_xlat3.x * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       3
					//   _WorldSpaceLightPos0       c3       1
					//   unity_FogParams            c4       1
					//   _LightColor0               c5       1
					//   _Color                     c6       1
					//   _DissolveEmissionColor     c7       1
					//   _DissolvePower             c8       1
					//   _DissolveEmissionThickness c9       1
					//   Zero                       c10      1
					//   _LightTexture0             s0       1
					//   _LightTextureB0            s1       1
					//   _MainTex                   s2       1
					//   _NormalMap                 s3       1
					//   _DissolveTex               s4       1
					//
					
					    ps_3_0
					    def c11, 0.333333343, 0.5, 0, 0
					    def c12, 2, -1, 0, 1
					    def c13, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s2
					    mul_pp r0.xyz, r0, c6
					    texld_pp r1, v1, s4
					    add_pp r0.w, -r1.x, c8.x
					    mov r1.x, c9.x
					    mad r1.y, r1.x, c11.x, -r0.w
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    cmp r1.y, r0.w, c12.z, r1.y
					    mov r1.zw, c12
					    mad r2, c7.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c11.y, -r0.w
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    mad r1.z, r1.x, -c11.x, r0.w
					    cmp r1.y, r1.z, c12.z, r1.y
					    mov r2.xyz, c7
					    mad r2, r2.xyzx, c13.xxxy, c13.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c9.x
					    cmp r1.y, r1.y, -c12.z, -c12.w
					    mad r1.x, r1.x, -c11.y, r0.w
					    cmp r1.x, r1.x, c12.z, r1.y
					    cmp_pp r0, r1.x, r0, c12.zzzw
					    add_pp r1, r0.w, -c10.x
					    texkill r1
					    mad r1, v5.xyzx, c12.wwwz, c12.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp3 r1.x, r2, r2
					    texld r2, r2, s0
					    texld r1, r1.x, s1
					    mul_pp r1.x, r2.w, r1.x
					    mul_pp r1.xyz, r1.x, c5
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    add r1.xyz, c3, -v5
					    nrm_pp r2.xyz, r1
					    texld_pp r1, v0.zwzw, s3
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.w, r1, r1, c12.z
					    add_pp r0.w, -r0.w, c12.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r3.x, v2, r1
					    dp3_pp r3.y, v3, r1
					    dp3_pp r3.z, v4, r1
					    dp3_pp r0.w, r3, r2
					    max_pp r1.x, r0.w, c12.z
					    mul_pp r0.xyz, r0, r1.x
					    mad_sat r0.w, v6.x, c4.z, c4.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 55 instruction slots used (5 texture, 50 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xyz = vs_TEXCOORD5.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat13));
					    u_xlat1.x = u_xlat2.w * u_xlat1.x;
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat2.z = sqrt(u_xlat12);
					    u_xlat3.x = dot(vs_TEXCOORD2.xyz, u_xlat2.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_WorldToLight         c0       2
					//   _WorldSpaceLightPos0       c2       1
					//   unity_FogParams            c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _DissolveEmissionColor     c6       1
					//   _DissolvePower             c7       1
					//   _DissolveEmissionThickness c8       1
					//   Zero                       c9       1
					//   _LightTexture0             s0       1
					//   _MainTex                   s1       1
					//   _NormalMap                 s2       1
					//   _DissolveTex               s3       1
					//
					
					    ps_3_0
					    def c10, 0.333333343, 0.5, 0, 0
					    def c11, 2, -1, 0, 1
					    def c12, 1.5, 0, 1, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord7 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    texld_pp r0, v0, s1
					    mul_pp r0.xyz, r0, c5
					    texld_pp r1, v1, s3
					    add_pp r0.w, -r1.x, c7.x
					    mov r1.x, c8.x
					    mad r1.y, r1.x, c10.x, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    cmp r1.y, r0.w, c11.z, r1.y
					    mov r1.zw, c11
					    mad r2, c6.xyzx, r1.wwwz, r1.zzzw
					    cmp_pp r0, r1.y, r0, r2
					    mad r1.y, r1.x, c10.y, -r0.w
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.z, r1.x, -c10.x, r0.w
					    cmp r1.y, r1.z, c11.z, r1.y
					    mov r2.xyz, c6
					    mad r2, r2.xyzx, c12.xxxy, c12.yyyz
					    cmp_pp r0, r1.y, r0, r2
					    add r1.y, -r0.w, c8.x
					    cmp r1.y, r1.y, -c11.z, -c11.w
					    mad r1.x, r1.x, -c10.y, r0.w
					    cmp r1.x, r1.x, c11.z, r1.y
					    cmp_pp r0, r1.x, r0, c11.zzzw
					    add_pp r1, r0.w, -c9.x
					    texkill r1
					    mad r1, v5.xyzx, c11.wwwz, c11.zzzw
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    texld_pp r1, r2, s0
					    mul_pp r1.xyz, r1.w, c4
					    mul_pp r0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					    texld_pp r1, v0.zwzw, s2
					    mad_pp r1.xy, r1.wyzw, c11.x, c11.y
					    dp2add_sat_pp r0.w, r1, r1, c11.z
					    add_pp r0.w, -r0.w, c11.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    dp3_pp r0.w, r2, c2
					    max_pp r1.x, r0.w, c11.z
					    mul_pp r0.xyz, r0, r1.x
					    mad_sat r0.w, v6.x, c3.z, c3.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 47 instruction slots used (4 texture, 43 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						mat4x4 unity_WorldToLight;
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_8[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD5.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD5.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD5.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat1.z = sqrt(u_xlat12);
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PrePassBase" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 150879
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   _NormalMap_ST              c11      1
					//   _DissolveTex_ST            c12      1
					//
					
					    vs_3_0
					    def c13, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    mad r0, v0.xyzx, c13.xxxy, c13.yyyx
					    dp4 r3.x, c0, r0
					    dp4 r3.y, c1, r0
					    dp4 r3.z, c2, r0
					    dp4 r3.w, c3, r0
					    mad o1.xy, v3, c11, c11.zwzw
					    mad o1.zw, v3.xyxy, c12.xyxy, c12
					    dp4 o2.w, c4, v0
					    dp4 o3.w, c5, v0
					    dp4 o4.w, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o2.y, r2.x
					    mov o2.z, r1.y
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r1.z
					    mov o4.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 37 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _NormalMap;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _DissolvePower             c0       1
					//   _DissolveEmissionThickness c1       1
					//   Zero                       c2       1
					//   _NormalMap                 s0       1
					//   _DissolveTex               s1       1
					//
					
					    ps_3_0
					    def c3, 0.333333343, 0.5, 0, 0
					    def c4, 2, -1, 0, 1
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0.zwzw, s1
					    add_pp r0.x, -r0.x, c0.x
					    mov r1.xy, c3
					    mad r0.y, c1.x, r1.x, -r0.x
					    cmp r0.y, r0.y, -c4.z, -c4.w
					    cmp r0.y, r0.x, c4.z, r0.y
					    cmp_pp r0.x, r0.y, r0.x, c4.w
					    mad r0.y, c1.x, r1.y, -r0.x
					    cmp r0.y, r0.y, -c4.z, -c4.w
					    mad r0.z, c1.x, -r1.x, r0.x
					    cmp r0.y, r0.z, c4.z, r0.y
					    cmp_pp r0.x, r0.y, r0.x, c4.w
					    add r0.y, -r0.x, c1.x
					    cmp r0.y, r0.y, -c4.z, -c4.w
					    mad r0.z, c1.x, -r1.y, r0.x
					    cmp r0.y, r0.z, c4.z, r0.y
					    cmp_pp r0.x, r0.y, r0.x, c4.w
					    add_pp r0, r0.x, -c2.x
					    texkill r0
					    texld_pp r0, v0, s0
					    mad_pp r0.xy, r0.wyzw, c4.x, c4.y
					    dp2add_sat_pp r0.w, r0, r0, c4.z
					    add_pp r0.w, -r0.w, c4.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    dp3_pp r1.x, v1, r0
					    dp3_pp r1.y, v2, r0
					    dp3_pp r1.z, v3, r0
					    mad_pp oC0.xyz, r1, c3.y, c3.y
					    mov_pp oC0.w, c4.z
					
					// approximately 31 instruction slots used (2 texture, 29 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_3[2];
						float Zero;
					};
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					bool u_xlatb1;
					bool u_xlatb2;
					vec2 u_xlat4;
					bool u_xlatb4;
					float u_xlat6;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.x = (-u_xlat0.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.x<0.0;
					    u_xlat4.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb1 = u_xlat4.x<u_xlat0.x;
					    u_xlatb2 = u_xlatb2 && u_xlatb1;
					    u_xlat1.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb4 = u_xlat1.x<u_xlat4.x;
					    u_xlatb1 = u_xlat4.y<u_xlat1.x;
					    u_xlatb4 = u_xlatb4 && u_xlatb1;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat4.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb6 = u_xlat4.x<u_xlat4.y;
					    u_xlatb4 = _DissolveEmissionThickness<u_xlat4.x;
					    u_xlatb4 = u_xlatb4 && u_xlatb6;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat0.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-Zero);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0 = texture(_NormalMap, vs_TEXCOORD0.xy);
					    u_xlat0.xy = u_xlat0.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat0.z = sqrt(u_xlat6);
					    u_xlat1.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD2.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "PrePassFinal" "RenderType" = "TransparentCutout" }
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 204167
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   unity_SHAr          c11      1
					//   unity_SHAg          c12      1
					//   unity_SHAb          c13      1
					//   unity_SHBr          c14      1
					//   unity_SHBg          c15      1
					//   unity_SHBb          c16      1
					//   unity_SHC           c17      1
					//   _MainTex_ST         c18      1
					//   _DissolveTex_ST     c19      1
					//
					
					    vs_3_0
					    def c20, 1.05499995, -0.0549999997, 0, 0
					    def c21, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    mad o1.xy, v2, c18, c18.zwzw
					    mad o1.zw, v2.xyxy, c19.xyxy, c19
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c21.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c21.z
					    mov r4, r1
					    mov o3.zw, r1
					    add o3.xy, r2.z, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, v1.x, c7, r0
					    mad r0.xyz, v1.z, c9, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add r0.xyz, r0, r2
					    max r0.xyz, r0, c21.y
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r0.xyz, r1, c21.w
					    exp r1.x, r0.x
					    exp r1.y, r0.y
					    exp r1.z, r0.z
					    mad r0.xyz, r1, c20.x, c20.y
					    max o5.xyz, r0, c21.y
					    mov o4, c21.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   unity_SHAr          c11      1
					//   unity_SHAg          c12      1
					//   unity_SHAb          c13      1
					//   unity_SHBr          c14      1
					//   unity_SHBg          c15      1
					//   unity_SHBb          c16      1
					//   unity_SHC           c17      1
					//   _MainTex_ST         c18      1
					//   _DissolveTex_ST     c19      1
					//
					
					    vs_3_0
					    def c20, 1.05499995, -0.0549999997, 0, 0
					    def c21, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    mad o1.xy, v2, c18, c18.zwzw
					    mad o1.zw, v2.xyxy, c19.xyxy, c19
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c21.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c21.z
					    mov r4, r1
					    mov o3.zw, r1
					    add o3.xy, r2.z, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, v1.x, c7, r0
					    mad r0.xyz, v1.z, c9, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add r0.xyz, r0, r2
					    max r0.xyz, r0, c21.y
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r0.xyz, r1, c21.w
					    exp r1.x, r0.x
					    exp r1.y, r0.y
					    exp r1.z, r0.z
					    mad r0.xyz, r1, c20.x, c20.y
					    max o5.xyz, r0, c21.y
					    mov o4, c21.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 47 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   unity_SHAr          c11      1
					//   unity_SHAg          c12      1
					//   unity_SHAb          c13      1
					//   unity_SHBr          c14      1
					//   unity_SHBg          c15      1
					//   unity_SHBb          c16      1
					//   unity_SHC           c17      1
					//   _MainTex_ST         c18      1
					//   _DissolveTex_ST     c19      1
					//
					
					    vs_3_0
					    def c20, 1.05499995, -0.0549999997, 0, 0
					    def c21, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c18, c18.zwzw
					    mad o1.zw, v2.xyxy, c19.xyxy, c19
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c21.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c21.z
					    mov r4, r1
					    mov o3.zw, r1
					    mov o6.x, r1.z
					    add o3.xy, r2.z, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, v1.x, c7, r0
					    mad r0.xyz, v1.z, c9, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add r0.xyz, r0, r2
					    max r0.xyz, r0, c21.y
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r0.xyz, r1, c21.w
					    exp r1.x, r0.x
					    exp r1.y, r0.y
					    exp r1.z, r0.z
					    mad r0.xyz, r1, c20.x, c20.y
					    max o5.xyz, r0, c21.y
					    mov o4, c21.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _ProjectionParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   unity_WorldToObject c7       3
					//   _ProjectionParams   c10      1
					//   unity_SHAr          c11      1
					//   unity_SHAg          c12      1
					//   unity_SHAb          c13      1
					//   unity_SHBr          c14      1
					//   unity_SHBg          c15      1
					//   unity_SHBb          c16      1
					//   unity_SHC           c17      1
					//   _MainTex_ST         c18      1
					//   _DissolveTex_ST     c19      1
					//
					
					    vs_3_0
					    def c20, 1.05499995, -0.0549999997, 0, 0
					    def c21, 1, 0, 0.5, 0.416666657
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.x
					    mad o1.xy, v2, c18, c18.zwzw
					    mad o1.zw, v2.xyxy, c19.xyxy, c19
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
					    dp4 r1.y, c1, r0
					    mul r2.x, r1.y, c10.x
					    mul r2.w, r2.x, c21.z
					    dp4 r1.x, c0, r0
					    dp4 r1.w, c3, r0
					    dp4 r1.z, c2, r0
					    mul r2.xz, r1.xyww, c21.z
					    mov r4, r1
					    mov o3.zw, r1
					    mov o6.x, r1.z
					    add o3.xy, r2.z, r2.xwzw
					    mul r0.xyz, c8, v1.y
					    mad r0.xyz, v1.x, c7, r0
					    mad r0.xyz, v1.z, c9, r0
					    nrm r1.xyz, r0
					    mul r0.x, r1.y, r1.y
					    mad r0.x, r1.x, r1.x, -r0.x
					    mul r2, r1.yzzx, r1.xyzz
					    dp4 r3.x, c14, r2
					    dp4 r3.y, c15, r2
					    dp4 r3.z, c16, r2
					    mad r0.xyz, c17, r0.x, r3
					    mov r1.w, c21.x
					    dp4 r2.x, c11, r1
					    dp4 r2.y, c12, r1
					    dp4 r2.z, c13, r1
					    add r0.xyz, r0, r2
					    max r0.xyz, r0, c21.y
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul r0.xyz, r1, c21.w
					    exp r1.x, r0.x
					    exp r1.y, r0.y
					    exp r1.z, r0.z
					    mad r0.xyz, r1, c20.x, c20.y
					    max o5.xyz, r0, c21.y
					    mov o4, c21.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out float vs_TEXCOORD5;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD5 = u_xlat0.z;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
					    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Color                     c0       1
					//   _DissolveEmissionColor     c1       1
					//   _DissolvePower             c2       1
					//   _DissolveEmissionThickness c3       1
					//   Zero                       c4       1
					//   _MainTex                   s0       1
					//   _DissolveTex               s1       1
					//   _LightBuffer               s2       1
					//
					
					    ps_3_0
					    def c5, 0.333333343, -0, -1, 0
					    def c6, 0.5, 1.5, 0, 1
					    dcl_texcoord v0
					    dcl_texcoord2 v1
					    dcl_texcoord4 v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0
					    texld_pp r1, v0.zwzw, s1
					    add_pp r0.w, -r1.x, c2.x
					    mov r1.xyz, c5
					    mad r1.w, c3.x, r1.x, -r0.w
					    cmp r1.w, r1.w, c5.y, c5.z
					    cmp r1.w, r0.w, c5.w, r1.w
					    mad r2, c1.xyzx, -r1.zzzy, -r1.yyyz
					    cmp_pp r0, r1.w, r0, r2
					    mov r2, c6
					    mad r1.y, c3.x, r2.x, -r0.w
					    cmp r1.y, r1.y, c5.y, c5.z
					    mad r1.x, c3.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c5.w, r1.y
					    mad r3, c1.xyzx, r2.yyyz, r2.zzzw
					    cmp_pp r0, r1.x, r0, r3
					    add r1.x, -r0.w, c3.x
					    cmp r1.x, r1.x, c5.y, c5.z
					    mad r1.y, c3.x, -r2.x, r0.w
					    cmp r1.x, r1.y, c5.w, r1.x
					    cmp_pp r0, r1.x, r0, -c5.yyyz
					    add_pp r1, r0.w, -c4.x
					    texkill r1
					    texldp_pp r1, v1, s2
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v2
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					
					// approximately 31 instruction slots used (3 texture, 28 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[3];
						float Zero;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Color                     c0       1
					//   _DissolveEmissionColor     c1       1
					//   _DissolvePower             c2       1
					//   _DissolveEmissionThickness c3       1
					//   Zero                       c4       1
					//   _MainTex                   s0       1
					//   _DissolveTex               s1       1
					//   _LightBuffer               s2       1
					//
					
					    ps_3_0
					    def c5, 0.333333343, -0, -1, 0
					    def c6, 0.5, 1.5, 0, 1
					    dcl_texcoord v0
					    dcl_texcoord2 v1
					    dcl_texcoord4 v2.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0
					    texld_pp r1, v0.zwzw, s1
					    add_pp r0.w, -r1.x, c2.x
					    mov r1.xyz, c5
					    mad r1.w, c3.x, r1.x, -r0.w
					    cmp r1.w, r1.w, c5.y, c5.z
					    cmp r1.w, r0.w, c5.w, r1.w
					    mad r2, c1.xyzx, -r1.zzzy, -r1.yyyz
					    cmp_pp r0, r1.w, r0, r2
					    mov r2, c6
					    mad r1.y, c3.x, r2.x, -r0.w
					    cmp r1.y, r1.y, c5.y, c5.z
					    mad r1.x, c3.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c5.w, r1.y
					    mad r3, c1.xyzx, r2.yyyz, r2.zzzw
					    cmp_pp r0, r1.x, r0, r3
					    add r1.x, -r0.w, c3.x
					    cmp r1.x, r1.x, c5.y, c5.z
					    mad r1.y, c3.x, -r2.x, r0.w
					    cmp r1.x, r1.y, c5.w, r1.x
					    cmp_pp r0, r1.x, r0, -c5.yyyz
					    add_pp r1, r0.w, -c4.x
					    texkill r1
					    texldp_pp r1, v1, s2
					    add_pp r1.xyz, r1, v2
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, r0.w
					
					// approximately 28 instruction slots used (3 texture, 25 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[3];
						float Zero;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_FogColor             c0       1
					//   unity_FogParams            c1       1
					//   _Color                     c2       1
					//   _DissolveEmissionColor     c3       1
					//   _DissolvePower             c4       1
					//   _DissolveEmissionThickness c5       1
					//   Zero                       c6       1
					//   _MainTex                   s0       1
					//   _DissolveTex               s1       1
					//   _LightBuffer               s2       1
					//
					
					    ps_3_0
					    def c7, 0.333333343, -0, -1, 0
					    def c8, 0.5, 1.5, 0, 1
					    dcl_texcoord v0
					    dcl_texcoord2 v1
					    dcl_texcoord4 v2.xyz
					    dcl_texcoord5 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c2
					    texld_pp r1, v0.zwzw, s1
					    add_pp r0.w, -r1.x, c4.x
					    mov r1.xyz, c7
					    mad r1.w, c5.x, r1.x, -r0.w
					    cmp r1.w, r1.w, c7.y, c7.z
					    cmp r1.w, r0.w, c7.w, r1.w
					    mad r2, c3.xyzx, -r1.zzzy, -r1.yyyz
					    cmp_pp r0, r1.w, r0, r2
					    mov r2, c8
					    mad r1.y, c5.x, r2.x, -r0.w
					    cmp r1.y, r1.y, c7.y, c7.z
					    mad r1.x, c5.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c7.w, r1.y
					    mad r3, c3.xyzx, r2.yyyz, r2.zzzw
					    cmp_pp r0, r1.x, r0, r3
					    add r1.x, -r0.w, c5.x
					    cmp r1.x, r1.x, c7.y, c7.z
					    mad r1.y, c5.x, -r2.x, r0.w
					    cmp r1.x, r1.y, c7.w, r1.x
					    cmp_pp r0, r1.x, r0, -c7.yyyz
					    add_pp r1, r0.w, -c6.x
					    texkill r1
					    texldp_pp r1, v1, s2
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v2
					    mad r0.xyz, r0, r1, -c0
					    mov_pp oC0.w, r0.w
					    mad_sat r0.w, v3.x, c1.z, c1.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					
					// approximately 33 instruction slots used (3 texture, 30 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = vs_TEXCOORD5 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _LightBuffer;
					//   sampler2D _MainTex;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_FogColor             c0       1
					//   unity_FogParams            c1       1
					//   _Color                     c2       1
					//   _DissolveEmissionColor     c3       1
					//   _DissolvePower             c4       1
					//   _DissolveEmissionThickness c5       1
					//   Zero                       c6       1
					//   _MainTex                   s0       1
					//   _DissolveTex               s1       1
					//   _LightBuffer               s2       1
					//
					
					    ps_3_0
					    def c7, 0.333333343, -0, -1, 0
					    def c8, 0.5, 1.5, 0, 1
					    dcl_texcoord v0
					    dcl_texcoord2 v1
					    dcl_texcoord4 v2.xyz
					    dcl_texcoord5 v3.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c2
					    texld_pp r1, v0.zwzw, s1
					    add_pp r0.w, -r1.x, c4.x
					    mov r1.xyz, c7
					    mad r1.w, c5.x, r1.x, -r0.w
					    cmp r1.w, r1.w, c7.y, c7.z
					    cmp r1.w, r0.w, c7.w, r1.w
					    mad r2, c3.xyzx, -r1.zzzy, -r1.yyyz
					    cmp_pp r0, r1.w, r0, r2
					    mov r2, c8
					    mad r1.y, c5.x, r2.x, -r0.w
					    cmp r1.y, r1.y, c7.y, c7.z
					    mad r1.x, c5.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c7.w, r1.y
					    mad r3, c3.xyzx, r2.yyyz, r2.zzzw
					    cmp_pp r0, r1.x, r0, r3
					    add r1.x, -r0.w, c5.x
					    cmp r1.x, r1.x, c7.y, c7.z
					    mad r1.y, c5.x, -r2.x, r0.w
					    cmp r1.x, r1.y, c7.w, r1.x
					    cmp_pp r0, r1.x, r0, -c7.yyyz
					    add_pp r1, r0.w, -c6.x
					    texkill r1
					    texldp_pp r1, v1, s2
					    add_pp r1.xyz, r1, v2
					    mad r0.xyz, r0, r1, -c0
					    mov_pp oC0.w, r0.w
					    mad_sat r0.w, v3.x, c1.z, c1.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					
					// approximately 30 instruction slots used (3 texture, 27 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[3];
						float Zero;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  float vs_TEXCOORD5;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat1.x = u_xlat0.w + (-Zero);
					    u_xlatb1 = u_xlat1.x<0.0;
					    if(((int(u_xlatb1) * int(0xffffffffu)))!=0){discard;}
					    u_xlat1.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + (-unity_FogColor.xyz);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat12 = vs_TEXCOORD5 / _ProjectionParams.y;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat12 = u_xlat12 * _ProjectionParams.z;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat12 = u_xlat12 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "Deferred" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 279150
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _NormalMap_ST              c16      1
					//   _DissolveTex_ST            c17      1
					//
					
					    vs_3_0
					    def c18, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c18.xxxy, c18.yyyx
					    dp4 r4.x, c0, r0
					    dp4 r4.y, c1, r0
					    dp4 r4.z, c2, r0
					    dp4 r4.w, c3, r0
					    mad o1.xy, v3, c15, c15.zwzw
					    mad o1.zw, v3.xyxy, c16.xyxy, c16
					    mad o2.xy, v3, c17, c17.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r0, c8.xyzz, v2.y
					    mad r0, v2.x, c7.xyzz, r0
					    mad r0, v2.z, c9.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o7.xyz, c13, r1.x, r3
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.z, r1, r1
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r1
					    mov o3.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r0.z, c14.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r0.x
					    mov o4.x, r1.x
					    mov o5.x, r1.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r0.y
					    mov o5.z, r0.w
					    mov o6, c18.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   float4 _NormalMap_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_SHBr                 c10      1
					//   unity_SHBg                 c11      1
					//   unity_SHBb                 c12      1
					//   unity_SHC                  c13      1
					//   unity_WorldTransformParams c14      1
					//   _MainTex_ST                c15      1
					//   _NormalMap_ST              c16      1
					//   _DissolveTex_ST            c17      1
					//
					
					    vs_3_0
					    def c18, 1, 0, 0, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    mad r0, v0.xyzx, c18.xxxy, c18.yyyx
					    dp4 r4.x, c0, r0
					    dp4 r4.y, c1, r0
					    dp4 r4.z, c2, r0
					    dp4 r4.w, c3, r0
					    mad o1.xy, v3, c15, c15.zwzw
					    mad o1.zw, v3.xyxy, c16.xyxy, c16
					    mad o2.xy, v3, c17, c17.zwzw
					    dp4 o3.w, c4, v0
					    dp4 o4.w, c5, v0
					    dp4 o5.w, c6, v0
					    mul r0, c8.xyzz, v2.y
					    mad r0, v2.x, c7.xyzz, r0
					    mad r0, v2.z, c9.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c10, r2
					    dp4 r3.y, c11, r2
					    dp4 r3.z, c12, r2
					    mad o7.xyz, c13, r1.x, r3
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.z, r1, r1
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r1
					    mov o3.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r0.z, c14.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o3.y, r2.x
					    mov o3.z, r0.x
					    mov o4.x, r1.x
					    mov o5.x, r1.y
					    mov o4.y, r2.y
					    mov o5.y, r2.z
					    mov o4.z, r0.y
					    mov o5.z, r0.w
					    mov o6, c18.y
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _NormalMap_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _NormalMap_ST.xy + _NormalMap_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD2.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD2.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD2.y = u_xlat3.x;
					    vs_TEXCOORD2.z = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat0.y;
					    vs_TEXCOORD4.w = u_xlat0.z;
					    vs_TEXCOORD3.y = u_xlat3.y;
					    vs_TEXCOORD4.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.z = u_xlat2.w;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_SHAr                 c0       1
					//   unity_SHAg                 c1       1
					//   unity_SHAb                 c2       1
					//   _Color                     c3       1
					//   _DissolveEmissionColor     c4       1
					//   _DissolvePower             c5       1
					//   _DissolveEmissionThickness c6       1
					//   Zero                       c7       1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c8, 0.333333343, 0.5, 0.416666657, 0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 2, -1, 0, 1
					    def c11, 1.5, 0, 1, 0.5
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord6_pp v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c3
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c5.x
					    mov r1.xy, c8
					    mad r1.z, c6.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c10.z, -c10.w
					    cmp r1.z, r0.w, c10.z, r1.z
					    mov r2.zw, c10
					    mad r2, c4.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c6.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c10.z, -c10.w
					    mad r1.x, c6.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c10.z, r1.z
					    mov r2.xyz, c11
					    mad r2, c4.xyzx, r2.xxxy, r2.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c6.x
					    cmp r1.x, r1.x, -c10.z, -c10.w
					    mad r1.y, c6.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c10.z, r1.x
					    cmp_pp r0, r1.x, r0, c10.zzzw
					    add_pp r1, r0.w, -c7.x
					    texkill r1
					    texld_pp r1, v0.zwzw, s1
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r0.w, r1, r1, c10.z
					    add_pp r0.w, -r0.w, c10.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    mov r2.w, c10.w
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwz, c11.wwwy
					    add_pp r1.xyz, r1, v5
					    max_pp r2.xyz, r1, c10.z
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c8.z
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mad_pp r1.xyz, r2, c9.x, c9.y
					    max_pp r2.xyz, r1, c10.z
					    mul_pp r1.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    exp_pp oC3.x, -r1.x
					    exp_pp oC3.y, -r1.y
					    exp_pp oC3.z, -r1.z
					    mov_pp oC0.w, c10.w
					    mov_pp oC1, c10.z
					    mov_pp oC3.w, c10.w
					
					// approximately 59 instruction slots used (3 texture, 56 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[4];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					vec3 u_xlat8;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlatb16 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb12 = u_xlat2.x<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb12;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb16)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat15 = u_xlat0.w + (-Zero);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat8.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6);
					        u_xlat1.x = min(u_xlat3.x, u_xlat15);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat1, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat1.xyz));
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _MainTex;
					//   sampler2D _NormalMap;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_SHAr                 c0       1
					//   unity_SHAg                 c1       1
					//   unity_SHAb                 c2       1
					//   _Color                     c3       1
					//   _DissolveEmissionColor     c4       1
					//   _DissolvePower             c5       1
					//   _DissolveEmissionThickness c6       1
					//   Zero                       c7       1
					//   _MainTex                   s0       1
					//   _NormalMap                 s1       1
					//   _DissolveTex               s2       1
					//
					
					    ps_3_0
					    def c8, 0.333333343, 0.5, 0.416666657, 0
					    def c9, 1.05499995, -0.0549999997, 0, 0
					    def c10, 2, -1, 0, 1
					    def c11, 1.5, 0, 1, 0.5
					    dcl_texcoord v0
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xyz
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord6_pp v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c3
					    texld_pp r1, v1, s2
					    add_pp r0.w, -r1.x, c5.x
					    mov r1.xy, c8
					    mad r1.z, c6.x, r1.x, -r0.w
					    cmp r1.z, r1.z, -c10.z, -c10.w
					    cmp r1.z, r0.w, c10.z, r1.z
					    mov r2.zw, c10
					    mad r2, c4.xyzx, r2.wwwz, r2.zzzw
					    cmp_pp r0, r1.z, r0, r2
					    mad r1.z, c6.x, r1.y, -r0.w
					    cmp r1.z, r1.z, -c10.z, -c10.w
					    mad r1.x, c6.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c10.z, r1.z
					    mov r2.xyz, c11
					    mad r2, c4.xyzx, r2.xxxy, r2.yyyz
					    cmp_pp r0, r1.x, r0, r2
					    add r1.x, -r0.w, c6.x
					    cmp r1.x, r1.x, -c10.z, -c10.w
					    mad r1.y, c6.x, -r1.y, r0.w
					    cmp r1.x, r1.y, c10.z, r1.x
					    cmp_pp r0, r1.x, r0, c10.zzzw
					    add_pp r1, r0.w, -c7.x
					    texkill r1
					    texld_pp r1, v0.zwzw, s1
					    mad_pp r1.xy, r1.wyzw, c10.x, c10.y
					    dp2add_sat_pp r0.w, r1, r1, c10.z
					    add_pp r0.w, -r0.w, c10.w
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    dp3_pp r2.x, v2, r1
					    dp3_pp r2.y, v3, r1
					    dp3_pp r2.z, v4, r1
					    mov r2.w, c10.w
					    dp4_pp r1.x, c0, r2
					    dp4_pp r1.y, c1, r2
					    dp4_pp r1.z, c2, r2
					    mad_pp oC2, r2, c11.wwwz, c11.wwwy
					    add_pp r1.xyz, r1, v5
					    max_pp r2.xyz, r1, c10.z
					    log_pp r1.x, r2.x
					    log_pp r1.y, r2.y
					    log_pp r1.z, r2.z
					    mul_pp r1.xyz, r1, c8.z
					    exp_pp r2.x, r1.x
					    exp_pp r2.y, r1.y
					    exp_pp r2.z, r1.z
					    mad_pp r1.xyz, r2, c9.x, c9.y
					    max_pp r2.xyz, r1, c10.z
					    mul_pp oC3.xyz, r0, r2
					    mov_pp oC0.xyz, r0
					    mov_pp oC0.w, c10.w
					    mov_pp oC1, c10.z
					    mov_pp oC3.w, c10.w
					
					// approximately 56 instruction slots used (3 texture, 53 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_5[4];
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					uniform  sampler2D _NormalMap;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					vec3 u_xlat8;
					bool u_xlatb12;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.w = (-u_xlat1.x) + _DissolvePower;
					    u_xlat1 = texture(_NormalMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat16 = min(u_xlat16, 1.0);
					    u_xlat16 = (-u_xlat16) + 1.0;
					    u_xlat1.z = sqrt(u_xlat16);
					    u_xlatb16 = u_xlat0.w<0.0;
					    u_xlat2.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb12 = u_xlat2.x<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb12;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.x;
					    u_xlatb2 = u_xlat2.y<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb16)) ? u_xlat3 : u_xlat0;
					    u_xlatb16 = u_xlat0.w<u_xlat2.y;
					    u_xlatb2 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb16 = u_xlatb16 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb16)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat15 = u_xlat0.w + (-Zero);
					    u_xlatb15 = u_xlat15<0.0;
					    if(((int(u_xlatb15) * int(0xffffffffu)))!=0){discard;}
					    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb15){
					        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat1.xyz = vs_TEXCOORD3.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.www + u_xlat1.xyz;
					        u_xlat1.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD4.www + u_xlat1.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat8.x = vs_TEXCOORD2.w;
					        u_xlat8.y = vs_TEXCOORD3.w;
					        u_xlat8.z = vs_TEXCOORD4.w;
					        u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat8.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat15 = u_xlat1.y * 0.25;
					        u_xlat6 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat15 = max(u_xlat15, u_xlat6);
					        u_xlat1.x = min(u_xlat3.x, u_xlat15);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat4.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat3, u_xlat2);
					        u_xlat3.y = dot(u_xlat4, u_xlat2);
					        u_xlat3.z = dot(u_xlat1, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat1.xyz = u_xlat3.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "SHADOWCASTER"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "RenderType" = "TransparentCutout" "SHADOWSUPPORT" = "true" }
			ZClip Off
			Cull Off
			GpuProgramID 339708
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_MatrixVP        c4       4
					//   unity_ObjectToWorld   c8       3
					//   unity_WorldToObject   c11      3
					//   _WorldSpaceLightPos0  c14      1
					//   unity_LightShadowBias c15      1
					//   _DissolveTex_ST       c16      1
					//
					
					    vs_3_0
					    def c17, 1, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord1 o1.xy
					    dcl_texcoord2 o2.xyz
					    mad o1.xy, v2, c16, c16.zwzw
					    dp4 o2.x, c8, v0
					    dp4 o2.y, c9, v0
					    dp4 o2.z, c10, v0
					    abs r0.x, c15.z
					    slt r0.x, -r0.x, r0.x
					    mul r0.yzw, c12.xxyz, v1.y
					    mad r0.yzw, v1.x, c11.xxyz, r0
					    mad r0.yzw, v1.z, c13.xxyz, r0
					    nrm r1.xyz, r0.yzww
					    mad r2, v0.xyzx, c17.xxxy, c17.yyyx
					    dp4 r3.x, c8, r2
					    dp4 r3.y, c9, r2
					    dp4 r3.z, c10, r2
					    mad r0.yzw, r3.xxyz, -c14.w, c14.xxyz
					    nrm r4.xyz, r0.yzww
					    dp3 r0.y, r1, r4
					    mad r0.y, r0.y, -r0.y, c17.x
					    rsq r0.y, r0.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c15.z
					    mad r1.xyz, r1, -r0.y, r3
					    mov r1.w, c17.x
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    dp4 r1.x, c0, r2
					    dp4 r1.y, c1, r2
					    dp4 r1.z, c2, r2
					    dp4 r1.w, c3, r2
					    lrp r2, r0.x, r3, r1
					    rcp r0.x, r2.w
					    mul_sat r0.x, r0.x, c15.x
					    add r0.x, r0.x, r2.z
					    mov r5.xyw, r2
					    max r0.y, r0.x, c17.y
					    add r0.y, -r0.x, r0.y
					    mad r5.z, c15.y, r0.y, r0.x
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 45 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _DissolveTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_1_1[44];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bool u_xlatb2;
					float u_xlat6;
					float u_xlat9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.xyz + unity_ObjectToWorld[3].xyz;
					    vs_TEXCOORD2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat2.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_MatrixVP[3];
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlatb2 = unity_LightShadowBias.z!=0.0;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat0 : u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = min(u_xlat1.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, -1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = min(u_xlat0.w, u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _LightPositionRange;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   _LightPositionRange c7       1
					//   _DissolveTex_ST     c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xyz
					    mad o2.xy, v1, c8, c8.zwzw
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o0.xyz, r0, -c7
					    mov o3.xyz, r0
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    mad o1.xy, r1.w, c255, r1
					    mov o1.zw, r1
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _DissolveTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _DissolvePower             c0       1
					//   _DissolveEmissionThickness c1       1
					//   Zero                       c2       1
					//   _DissolveTex               s0       1
					//
					
					    ps_3_0
					    def c3, 0.333333343, -0, -1, 0
					    def c4, 0.5, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add_pp r0.x, -r0.x, c0.x
					    mov r1.x, c3.x
					    mad r0.y, c1.x, r1.x, -r0.x
					    cmp r0.y, r0.y, c3.y, c3.z
					    cmp r0.y, r0.x, c3.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c3.z
					    mov r2.x, c1.x
					    mad r0.y, r2.x, c4.x, -r0.x
					    cmp r0.y, r0.y, c3.y, c3.z
					    mad r0.z, c1.x, -r1.x, r0.x
					    cmp r0.y, r0.z, c3.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c3.z
					    add r0.y, -r0.x, c1.x
					    cmp r0.y, r0.y, c3.y, c3.z
					    mad r0.z, r2.x, -c4.x, r0.x
					    cmp r0.y, r0.z, c3.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c3.z
					    add_pp r0, r0.x, -c2.x
					    texkill r0
					    mov_pp oC0, c3.w
					
					// approximately 21 instruction slots used (1 texture, 20 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_3;
						float Zero;
					};
					uniform  sampler2D _DissolveTex;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					bool u_xlatb1;
					bool u_xlatb2;
					vec2 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = (-u_xlat0.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.x<0.0;
					    u_xlat4.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb1 = u_xlat4.x<u_xlat0.x;
					    u_xlatb2 = u_xlatb2 && u_xlatb1;
					    u_xlat1 = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb4 = u_xlat1<u_xlat4.x;
					    u_xlatb1 = u_xlat4.y<u_xlat1;
					    u_xlatb4 = u_xlatb4 && u_xlatb1;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat4.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb6 = u_xlat4.x<u_xlat4.y;
					    u_xlatb4 = _DissolveEmissionThickness<u_xlat4.x;
					    u_xlatb4 = u_xlatb4 && u_xlatb6;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat0.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-Zero);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   float4 _LightPositionRange;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _LightPositionRange        c0       1
					//   unity_LightShadowBias      c1       1
					//   _DissolvePower             c2       1
					//   _DissolveEmissionThickness c3       1
					//   Zero                       c4       1
					//   _DissolveTex               s0       1
					//
					
					    ps_3_0
					    def c5, 0.333333343, -0, -1, 0
					    def c6, 0.5, 0, 0, 0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    add_pp r0.x, -r0.x, c2.x
					    mov r1.x, c5.x
					    mad r0.y, c3.x, r1.x, -r0.x
					    cmp r0.y, r0.y, c5.y, c5.z
					    cmp r0.y, r0.x, c5.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c5.z
					    mov r2.x, c3.x
					    mad r0.y, r2.x, c6.x, -r0.x
					    cmp r0.y, r0.y, c5.y, c5.z
					    mad r0.z, c3.x, -r1.x, r0.x
					    cmp r0.y, r0.z, c5.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c5.z
					    add r0.y, -r0.x, c3.x
					    cmp r0.y, r0.y, c5.y, c5.z
					    mad r0.z, r2.x, -c6.x, r0.x
					    cmp r0.y, r0.z, c5.w, r0.y
					    cmp_pp r0.x, r0.y, r0.x, -c5.z
					    add_pp r0, r0.x, -c4.x
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul_pp oC0, r0.x, c0.w
					
					// approximately 25 instruction slots used (1 texture, 24 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						float _DissolvePower;
						float _DissolveEmissionThickness;
						vec4 unused_0_3;
						float Zero;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_2_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_2_2[20];
					};
					uniform  sampler2D _DissolveTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					bool u_xlatb1;
					bool u_xlatb2;
					vec2 u_xlat4;
					bool u_xlatb4;
					bool u_xlatb6;
					void main()
					{
					    u_xlat0 = texture(_DissolveTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = (-u_xlat0.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.x<0.0;
					    u_xlat4.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb1 = u_xlat4.x<u_xlat0.x;
					    u_xlatb2 = u_xlatb2 && u_xlatb1;
					    u_xlat1 = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb4 = u_xlat1<u_xlat4.x;
					    u_xlatb1 = u_xlat4.y<u_xlat1;
					    u_xlatb4 = u_xlatb4 && u_xlatb1;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat4.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlatb6 = u_xlat4.x<u_xlat4.y;
					    u_xlatb4 = _DissolveEmissionThickness<u_xlat4.x;
					    u_xlatb4 = u_xlatb4 && u_xlatb6;
					    u_xlatb2 = u_xlatb4 || u_xlatb2;
					    u_xlat0.x = (u_xlatb2) ? 1.0 : u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-Zero);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "META"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "Meta" "RenderType" = "TransparentCutout" }
			ZClip Off
			Cull Off
			GpuProgramID 393456
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _DissolveTex_ST;
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   unity_WorldTransformParams c10      1
					//   unity_LightmapST           c11      1
					//   unity_DynamicLightmapST    c12      1
					//   unity_MetaVertexControl    c13      1
					//   _MainTex_ST                c14      1
					//   _DissolveTex_ST            c15      1
					//
					
					    vs_3_0
					    def c16, 0, 9.99999975e-005, 1, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_texcoord2 v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    slt r0.x, c16.x, v0.z
					    mul r0.z, r0.x, c16.y
					    mad r0.xy, v4, c11, c11.zwzw
					    lrp r1.xyz, c13.x, r0, v0
					    slt r0.x, c16.x, r1.z
					    mul r0.z, r0.x, c16.y
					    mad r0.xy, v5, c12, c12.zwzw
					    lrp r2.xyz, c13.y, r0, r1
					    mov r2.w, c16.z
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    dp4 r3.z, c2, r2
					    dp4 r3.w, c3, r2
					    mad o1.xy, v3, c14, c14.zwzw
					    mad o1.zw, v3.xyxy, c15.xyxy, c15
					    dp4 o2.w, c4, v0
					    dp4 o3.w, c5, v0
					    dp4 o4.w, c6, v0
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, c8.zxyw, v2.y
					    mad r1.xyz, v2.x, c7.zxyw, r1
					    mad r1.xyz, v2.z, c9.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r0.z, c10.w, v1.w
					    mul r2.xyz, r0.z, r2
					    mov o2.y, r2.x
					    mov o2.z, r1.y
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r1.z
					    mov o4.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 45 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _MainTex_ST;
						vec4 _DissolveTex_ST;
						vec4 unused_0_3;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb12 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb12 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float Zero;
					//   float4 _Color;
					//   float3 _DissolveEmissionColor;
					//   float _DissolveEmissionThickness;
					//   float _DissolvePower;
					//   sampler2D _DissolveTex;
					//   sampler2D _MainTex;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Color                     c0       1
					//   _DissolveEmissionColor     c1       1
					//   _DissolvePower             c2       1
					//   _DissolveEmissionThickness c3       1
					//   unity_MetaFragmentControl  c4       1
					//   unity_OneOverOutputBoost   c5       1
					//   unity_MaxOutputValue       c6       1
					//   Zero                       c7       1
					//   _MainTex                   s0       1
					//   _DissolveTex               s1       1
					//
					
					    ps_3_0
					    def c8, 0.333333343, -0, -1, 0
					    def c9, 0.5, 1.5, 0, 1
					    def c10, 0, 0.0235294141, 0, 0
					    dcl_texcoord v0
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mul_pp r0.xyz, r0, c0
					    texld_pp r1, v0.zwzw, s1
					    add_pp r0.w, -r1.x, c2.x
					    mov r1, c8
					    mad r2.x, c3.x, r1.x, -r0.w
					    cmp r2.x, r2.x, c8.y, c8.z
					    cmp r2.x, r0.w, c8.w, r2.x
					    mad r3, c1.xyzx, -r1.zzzy, -r1.yyyz
					    cmp_pp r0, r2.x, r0, r3
					    mov r2, c9
					    mad r1.y, c3.x, r2.x, -r0.w
					    cmp r1.y, r1.y, c8.y, c8.z
					    mad r1.x, c3.x, -r1.x, r0.w
					    cmp r1.x, r1.x, c8.w, r1.y
					    mad r3, c1.xyzx, r2.yyyz, r2.zzzw
					    cmp_pp r0, r1.x, r0, r3
					    add r1.x, -r0.w, c3.x
					    cmp r1.x, r1.x, c8.y, c8.z
					    mad r1.y, c3.x, -r2.x, r0.w
					    cmp r1.x, r1.y, c8.w, r1.x
					    cmp_pp r0, r1.x, r0, -c8.yyyz
					    add_pp r2, r0.w, -c7.x
					    texkill r2
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mov_sat r0.x, c5.x
					    mul r0.xyz, r1, r0.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c6.x, r1
					    cmp_pp r0.xyz, -c4.x, r1.w, r0
					    mov r0.w, c4.x
					    mov r1.y, c4.y
					    cmp_pp oC0, -r1.y, r0, c10.xxxy
					
					// approximately 37 instruction slots used (2 texture, 35 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						vec4 _Color;
						vec3 _DissolveEmissionColor;
						float _DissolvePower;
						float _DissolveEmissionThickness;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_7[2];
						float Zero;
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_1_0;
						bvec4 unity_MetaFragmentControl;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _DissolveTex;
					in  vec4 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat12;
					bool u_xlatb12;
					bool u_xlatb14;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xyz = _DissolveEmissionColor.xyz;
					    u_xlat1.w = 1.0;
					    u_xlat2 = texture(_DissolveTex, vs_TEXCOORD0.zw);
					    u_xlat0.w = (-u_xlat2.x) + _DissolvePower;
					    u_xlatb2 = u_xlat0.w<0.0;
					    u_xlat6.xy = vec2(_DissolveEmissionThickness) * vec2(0.333333343, 0.5);
					    u_xlatb14 = u_xlat6.x<u_xlat0.w;
					    u_xlatb2 = u_xlatb14 && u_xlatb2;
					    u_xlat0 = (bool(u_xlatb2)) ? u_xlat1 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.x;
					    u_xlatb5 = u_xlat6.y<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat3.xyz = _DissolveEmissionColor.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.w = 1.0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat3 : u_xlat0;
					    u_xlatb1 = u_xlat0.w<u_xlat6.y;
					    u_xlatb5 = _DissolveEmissionThickness<u_xlat0.w;
					    u_xlatb1 = u_xlatb5 && u_xlatb1;
					    u_xlat0 = (bool(u_xlatb1)) ? vec4(0.0, 0.0, 0.0, 1.0) : u_xlat0;
					    u_xlat12 = u_xlat0.w + (-Zero);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlatb12 = u_xlat12<0.0;
					    if(((int(u_xlatb12) * int(0xffffffffu)))!=0){discard;}
					    u_xlat12 = unity_OneOverOutputBoost;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
				}
			}
		}
	}
}